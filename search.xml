<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Bash笔记</title>
    <url>//2023/12/21/Bash%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="修改连接IP、网关、子网掩码"><a href="#修改连接IP、网关、子网掩码" class="headerlink" title="修改连接IP、网关、子网掩码"></a>修改连接IP、网关、子网掩码</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> OFF</span><br><span class="line">netsh interface ipv4 <span class="built_in">set</span> address 网络设备名称 static %IPV4ADDR% %IPV4MASK% %IPV4GATEWAY% </span><br></pre></td></tr></tbody></table></figure>

<img src="/2023/12/21/Bash%E7%AC%94%E8%AE%B0/image-20231221112145880.png" class="" title="image-20231221112145880">
</body></html>]]></content>
      <tags>
        <tag>win10</tag>
        <tag>bash</tag>
        <tag>批处理</tag>
      </tags>
  </entry>
  <entry>
    <title>Blender笔记</title>
    <url>//2023/08/06/Blender%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><table>
<thead>
<tr>
<th>键</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>全选</td>
</tr>
<tr>
<td>X</td>
<td>删除</td>
</tr>
<tr>
<td>shift+A</td>
<td>打开添加菜单</td>
</tr>
<tr>
<td>shift+D</td>
<td>复制</td>
</tr>
<tr>
<td>shift+C</td>
<td>游标回到中心</td>
</tr>
<tr>
<td>G</td>
<td>随意移动物体<br>G、X：往x轴上移动（G、X、3：将物体在x轴上移动到第3位）<br>G、Y：往y轴上移动<br>G、Z：往z轴上移动</td>
</tr>
<tr>
<td>R</td>
<td>旋转物体<br>R、X：在x轴上旋转（R、X、30：物体在x轴上旋转到30°）<br>R、Y：在y轴上旋转<br>R、Z：在z轴上旋转</td>
</tr>
<tr>
<td>S</td>
<td>缩放物体<br>S、X：在x轴上缩放<br>S、Y：在y轴上缩放<br>S、Z：在z轴上缩放</td>
</tr>
<tr>
<td>tab</td>
<td>切换编辑模式<br>1：选择点<br>2：选择线<br>3：选择面</td>
</tr>
<tr>
<td>I</td>
<td>内插面</td>
</tr>
<tr>
<td>E</td>
<td>挤出区域</td>
</tr>
<tr>
<td>ctrl+R</td>
<td>环切<br>点击确定切线的位置，鼠标右键将切线放置到中心处<br>滑动滚轮可以设置数量</td>
</tr>
<tr>
<td>数字键1</td>
<td>x轴视图<br>数字键3：y轴视图<br>数字键7：z轴视图</td>
</tr>
<tr>
<td>alt+Z</td>
<td>透视模式<br>按钮在右上角<br><img src="/2023/08/06/Blender%E7%AC%94%E8%AE%B0/image-20230806014940315.png" class="" title="image-20230806014940315"></td>
</tr>
<tr>
<td>alt+S</td>
<td>法向缩放<br>与S缩放的区别：会沿着面的朝向缩放</td>
</tr>
<tr>
<td>shift+鼠标左键</td>
<td>移动视图</td>
</tr>
</tbody></table>
<p>​	</p>
<h2 id="物体模式"><a href="#物体模式" class="headerlink" title="物体模式"></a>物体模式</h2><h2 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h2><p>使用shift可以选择多个面</p>
<h3 id="倒角"><a href="#倒角" class="headerlink" title="倒角"></a>倒角</h3><p>选择边或者面选择倒角工具，可以根据滑轮调整斜角个数（圆润度）</p>
<h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>设置镜像修改器需要提供镜像物体</p>
<img src="/2023/08/06/Blender%E7%AC%94%E8%AE%B0/image-20230807231341910.png" class="" title="image-20230807231341910">

<img src="/2023/08/06/Blender%E7%AC%94%E8%AE%B0/image-20230807231419777.png" class="" title="image-20230807231419777">



<h1 id="3D游标"><a href="#3D游标" class="headerlink" title="3D游标"></a>3D游标</h1><p>点击游标菜单，选择游标位置，使用shift+A新建物体时，会在游标位置生成</p>
<h1 id="区域"><a href="#区域" class="headerlink" title="区域"></a>区域</h1><img src="/2023/08/06/Blender%E7%AC%94%E8%AE%B0/image-20230806011745013.png" class="" title="image-20230806011745013">

<img src="/2023/08/06/Blender%E7%AC%94%E8%AE%B0/image-20230806011800717.png" class="" title="image-20230806011800717">

<img src="/2023/08/06/Blender%E7%AC%94%E8%AE%B0/image-20230806011917492.png" class="" title="image-20230806011917492">

<p>在两个面板交界处，鼠标显示为加号，右键选择垂直分割，会出现一条分割线，可以分割为两个屏幕</p>
</body></html>]]></content>
      <tags>
        <tag>Blender</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS特效</title>
    <url>//2023/07/15/CSS%E7%89%B9%E6%95%88/</url>
    <content><![CDATA[<html><head></head><body><h1 id="1-CSS文字填充动画"><a href="#1-CSS文字填充动画" class="headerlink" title="1. CSS文字填充动画"></a>1. CSS文字填充动画</h1><p><strong>效果</strong></p>
<img src="/2023/07/15/CSS%E7%89%B9%E6%95%88/TextFill.gif" class="" title="CSS文字填充动画">

<p><strong>代码</strong></p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Incredible<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> {</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> {</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">font-family</span>: Helvetica;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: -<span class="number">4px</span>;</span><br><span class="line">    <span class="comment">/* 位置设置为相对位置，允许对伪元素进行定位 */</span></span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="comment">/* 初始颜色设置为透明 */</span></span><br><span class="line">    <span class="attribute">color</span>: transparent;</span><br><span class="line">    <span class="comment">/* 设置从白色到透明的线性渐变，开始位置到一半的位置为白色，一半的位置到最后是白色逐渐为透明 */</span></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, white, white, transparent);</span><br><span class="line">    <span class="comment">/* 设置背景大小为200%宽，100%高 */</span></span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">200%</span> <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="comment">/* 设置为text，将背景图像剪辑为文本 */</span></span><br><span class="line">    -webkit-<span class="attribute">background-clip</span>: text;</span><br><span class="line">    <span class="attribute">background-position</span>-x: <span class="number">200%</span>;</span><br><span class="line">    <span class="comment">/* 定义动画，动画持续2秒，有一个ease-in-out计时功能，在页面加载2秒后开始。forward值确保保留最终的动画状态 */</span></span><br><span class="line">    <span class="attribute">animation</span>: <span class="number">2s</span> fillup ease-in-out <span class="number">2s</span> forwards;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">::after</span> {</span><br><span class="line">    <span class="comment">/* 设置伪元素的文本内容为“Incredible” */</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">'Incredible'</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 设置文本周围2像素的描边 */</span></span><br><span class="line">    -webkit-text-stroke: <span class="number">2px</span>;</span><br><span class="line">    <span class="comment">/* 设置描边颜色为白色 */</span></span><br><span class="line">    -webkit-text-stroke-<span class="attribute">color</span>: white;</span><br><span class="line">    <span class="comment">/* 设置填充颜色为透明 */</span></span><br><span class="line">    -webkit-text-fill-<span class="attribute">color</span>: transparent;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 定义动画，持续2秒，立即开始。forward值确保保留最终的动画状态。 */</span></span><br><span class="line">    <span class="attribute">animation</span>: <span class="number">2s</span> fadein ease-in-out forwards;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> fillup {</span><br><span class="line">    <span class="selector-tag">from</span> {</span><br><span class="line">        <span class="attribute">background-position</span>-x: <span class="number">200%</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="selector-tag">to</span> {</span><br><span class="line">        <span class="attribute">background-position</span>-x: <span class="number">0%</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> fadein {</span><br><span class="line">    <span class="selector-tag">from</span> {</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="selector-tag">to</span> {</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>注意</strong></p>
<ol>
<li>使用<code>-webkit</code>修饰的属性是为了适应不同浏览器，是针对WebKit浏览器引擎（如Safari和Chrome）的前缀，确保对旧版浏览器的兼容性。</li>
</ol>
</body></html>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker笔记</title>
    <url>//2024/03/11/Docker%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h1><h1 id="Docker的常用命令"><a href="#Docker的常用命令" class="headerlink" title="Docker的常用命令"></a>Docker的常用命令</h1><img src="/2024/03/11/Docker%E7%AC%94%E8%AE%B0/image-20240311183950215.png" class="" title="image-20240311183950215">

<h2 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a>docker pull</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></tbody></table></figure>

<p>从镜像仓库拉取最新的mysql镜像，并安装到本地</p>
<h2 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d --name mysql3006 -p 3006:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br></pre></td></tr></tbody></table></figure>

<p>使用 mysql 镜像创建一个名为 mysql3006 的容器，并且将容器里的 3306 端口映射到本地的 3006 端口</p>
<p><code>MYSQL_ROOT_PASSWORD</code>设置数据库 root 用户的密码</p>
</body></html>]]></content>
      <tags>
        <tag>docker</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>ESP32笔记</title>
    <url>//2024/03/19/ESP32%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="8-8点阵屏"><a href="#8-8点阵屏" class="headerlink" title="8*8点阵屏"></a>8*8点阵屏</h1><p>型号：1088AS</p>
<img src="/2024/03/19/ESP32%E7%AC%94%E8%AE%B0/image-20231229165849722.png" class="" title="img">

<p>列正，行负，则亮</p>
</body></html>]]></content>
  </entry>
  <entry>
    <title>FLask笔记</title>
    <url>//2023/08/07/FLask%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="1-蓝图"><a href="#1-蓝图" class="headerlink" title="1. 蓝图"></a>1. 蓝图</h1><p>Flask的蓝图（Blueprints）是一种组织Flask应用程序结构的方法，特别是当应用程序变得越来越大时。蓝图可以简单地理解为应用程序的子模块，它可以具有自己的视图、静态文件、模板等。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line">simple_page = Blueprint(<span class="string">'simple_page'</span>, __name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@simple_page.route(<span class="params"><span class="string">'/index'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, World!"</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> yourmodule <span class="keyword">import</span> simple_page   <span class="comment"># 导入蓝图</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.register_blueprint(simple_page)  <span class="comment"># 注册蓝图</span></span><br></pre></td></tr></tbody></table></figure>

<p>当访问 <code>/index</code> 时，Flask 将会调用 <code>simple_page.index</code> 视图函数。</p>
</body></html>]]></content>
      <tags>
        <tag>python</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Excel学习笔记</title>
    <url>//2023/11/04/Excel%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="VLOOKUP函数"><a href="#VLOOKUP函数" class="headerlink" title="VLOOKUP函数"></a>VLOOKUP函数</h1><p><strong>函数结构：</strong>Vlookup(查找值，数据表，列序数，[匹配条件])</p>
<p><img src="F:\blob\blob\source_posts\Excel学习笔记\image-20231104132634310.png" alt="image-20231104132634310"></p>
<p><strong>参数解释：</strong></p>
<ul>
<li>查找值，当前表需要比对的值</li>
<li>数据表，进行比对的数据范围</li>
<li>列序数，比对成功后，选取该列作为结果</li>
<li>匹配条件：<ul>
<li>FALSE，精确匹配</li>
<li>TRUE，近似匹配</li>
</ul>
</li>
</ul>
<p><strong>演示：</strong></p>
<p><img src="F:\blob\blob\source_posts\Excel学习笔记\image-20231104144613280.png" alt="image-20231104144613280"></p>
<h1 id="INDEX函数"><a href="#INDEX函数" class="headerlink" title="INDEX函数"></a>INDEX函数</h1><p><strong>函数结构：</strong>INDEX(数组，行序数，[列序数]，[区域序数])</p>
<p><img src="F:\blob\blob\source_posts\Excel学习笔记\image-20231107094221679.png" alt="image-20231107094221679"></p>
<p><strong>参数解释：</strong></p>
<ul>
<li>数组，需要查找的区域</li>
<li>行序数，区域对应的行号</li>
<li>列序数，区域对应的列号</li>
<li>区域序数，</li>
</ul>
<h1 id="MATCH函数"><a href="#MATCH函数" class="headerlink" title="MATCH函数"></a>MATCH函数</h1><p><strong>函数结构：</strong></p>
<h1 id="填充公式"><a href="#填充公式" class="headerlink" title="填充公式"></a>填充公式</h1><ol>
<li><p>选择第一个公式</p>
</li>
<li><p>ctrl+shift+方向键（向下）选择到底下的单元格</p>
</li>
<li><p>点击顶部工具栏的填充</p>
</li>
</ol>
<h1 id="COUNTIF函数"><a href="#COUNTIF函数" class="headerlink" title="COUNTIF函数"></a>COUNTIF函数</h1><p>查看重复个数</p>
<h1 id="单元格内换行"><a href="#单元格内换行" class="headerlink" title="单元格内换行"></a>单元格内换行</h1><p>Alt+Enter</p>
</body></html>]]></content>
      <tags>
        <tag>Excel</tag>
      </tags>
  </entry>
  <entry>
    <title>技巧</title>
    <url>//2023/11/01/Git%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<html><head></head><body><h1 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git config --global alias.ck checkout</span><br><span class="line"></span><br><span class="line">git config --global alias.br branch</span><br><span class="line"></span><br><span class="line">git config --global alias.ct commit</span><br></pre></td></tr></tbody></table></figure>



<h1 id="提交流程"><a href="#提交流程" class="headerlink" title="提交流程"></a>提交流程</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git add &lt;file/dir&gt;  <span class="comment"># 工作区 -&gt; 暂存区</span></span><br><span class="line">git commit -m <span class="string">"some info"</span> <span class="comment"># 暂存区 -&gt; 本地仓库</span></span><br><span class="line">git push <span class="comment"># 本地仓库 -&gt; 远程仓库</span></span><br></pre></td></tr></tbody></table></figure>



<h1 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git checkout -b &lt;branch name&gt;</span><br></pre></td></tr></tbody></table></figure>



<h1 id="更新-gitignore"><a href="#更新-gitignore" class="headerlink" title="更新.gitignore"></a>更新.gitignore</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -r --cached . // 删除本地缓存</span><br><span class="line">git add . // 添加要提交的文件</span><br><span class="line">git commit -m <span class="string">'update .gitignore'</span> // 更新本地的缓存</span><br></pre></td></tr></tbody></table></figure>



<h1 id="拉取远端分支"><a href="#拉取远端分支" class="headerlink" title="拉取远端分支"></a>拉取远端分支</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git pull &lt;branch name&gt; origin/&lt;branch name&gt;</span><br></pre></td></tr></tbody></table></figure>



<h1 id="合并代码-拒绝合并不相关的历史"><a href="#合并代码-拒绝合并不相关的历史" class="headerlink" title="合并代码-拒绝合并不相关的历史"></a>合并代码-拒绝合并不相关的历史</h1><p>合并代码时出现<code>refusing to merge unrelated histories</code>报错</p>
<p>在<code>merge</code>后加入<code>--allow-unrelated-histories</code>即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git merge &lt;branch name&gt; --allow-unrelated-histories</span><br></pre></td></tr></tbody></table></figure>



<h1 id="git-pull命令"><a href="#git-pull命令" class="headerlink" title="git pull命令"></a>git pull命令</h1><p>git pull的命令是由两个命令组成，git fetch和git merge</p>
<h1 id="查看服务器名称"><a href="#查看服务器名称" class="headerlink" title="查看服务器名称"></a>查看服务器名称</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></tbody></table></figure>



<h1 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h1><p>问题：不能连接到github.com<img src="/2023/11/01/Git%E6%8A%80%E5%B7%A7/image-20240404002229367.png" class="" title="image-20240404002229367"></p>
<p>如果使用vpn代理需要设置代理</p>
<img src="/2023/11/01/Git%E6%8A%80%E5%B7%A7/982b1b4ad89e43a780b6cbd42563e750.png" class="" title="img">

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:10809</span><br><span class="line">git config --global https.proxy 127.0.0.1:10809</span><br></pre></td></tr></tbody></table></figure>



<h1 id="查看git配置"><a href="#查看git配置" class="headerlink" title="查看git配置"></a>查看git配置</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git config --global -l</span><br></pre></td></tr></tbody></table></figure>



<h1 id="LFS-大文件存储"><a href="#LFS-大文件存储" class="headerlink" title="LFS 大文件存储"></a>LFS 大文件存储</h1><p><code>git lfs</code>可以用于上传大文件</p>
<h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a><strong>上传</strong></h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git init <span class="comment">#创建本地仓库环境</span></span><br><span class="line">git lfs install <span class="comment">#安装大文件上传应用</span></span><br><span class="line">git lfs track * <span class="comment">#追踪要上传的大文件，*表示路径下的所有文件</span></span><br><span class="line">git add .gitattributes <span class="comment">#添加先上传的属性文件(要先上传属性文件，不然有可能失败)</span></span><br><span class="line">git commit -m <span class="string">"pre"</span> <span class="comment">#添加属性文件上传的说明</span></span><br><span class="line">git remote add origin https://github.com/Youpeng-Zhang/MOP.git <span class="comment">#建立本地和Github仓库的链接</span></span><br><span class="line">git push origin master <span class="comment">#上传属性文件</span></span><br><span class="line">git add * <span class="comment">#添加要上传的大文件，*表示路径下的所有文件</span></span><br><span class="line">git commit -m <span class="string">"Git LFS commit"</span> <span class="comment">#添加大文件上传的说明</span></span><br><span class="line">git push origin master <span class="comment">#上传大文件</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a><strong>下载</strong></h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git lfs <span class="built_in">clone</span> git@bitbucket.org:tpettersen/Atlasteroids.git <span class="comment"># 下载大文件</span></span><br><span class="line">git lfs fetch <span class="comment"># 中断后可根据之前的进度进行下载</span></span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP协议</title>
    <url>//2023/07/18/HTTP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<html><head></head><body><h1 id="1-GET方法与POST方法的区别"><a href="#1-GET方法与POST方法的区别" class="headerlink" title="1. GET方法与POST方法的区别"></a>1. GET方法与POST方法的区别</h1><ol>
<li>GET通常是幂等的，POST通常不幂等</li>
</ol>
<p>幂等：对同一资源的多次请求所产生的影响是相同的。 </p>
<p>GET请求是幂等的，意味着对同一URL发起多次GET请求不会对服务器端产生任何副作用，也不会改变服务器端的状态。每次GET请求都只是获取资源的副本，不会对资源本身进行修改。</p>
<p>POST请求通常是不幂等的，这意味着多次对同一URL发起POST请求可能会对服务器端产生不同的影响。每次POST请求都可能会导致服务器端的状态发生改变，例如创建新的资源或修改已有资源。 </p>
<ol start="2">
<li>GET可以被缓存，POST不能被缓存</li>
</ol>
<p>幂等性是缓存的一个重要条件。当一个请求是幂等的时候，意味着对同一资源的多次请求所产生的影响是相同的，不会对服务器端产生任何副作用或改变资源的状态。这为缓存提供了一个可靠的机制。 </p>
<p>当一个幂等的GET请求被缓存后，<strong>缓存服务器</strong>可以在收到相同的请求时直接返回缓存的响应，而无需再次向原始服务器发起请求。这样可以减少网络流量和服务器负载，提高响应速度和性能。  </p>
</body></html>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM</title>
    <url>//2023/05/25/JVM/</url>
    <content><![CDATA[<html><head></head><body><h1 id="JVM-的组成"><a href="#JVM-的组成" class="headerlink" title="JVM 的组成"></a>JVM 的组成</h1><p><img src="/.%5CJVM%5Cimage-20230330002059069.png" alt="image-20230330002059069"></p>
<p>常用的是 Hotspot，Hotspot8 以上收费</p>
<p><img src="/.%5CJVM%5Cimage-20230330002331102.png" alt="image-20230330002331102"></p>
<p><strong>JDK、JRE、JVM 之间的关系</strong></p>
</body></html>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客</title>
    <url>//2023/07/14/Hexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<html><head></head><body><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></tbody></table></figure>



<h1 id="Hexo博客配合Typora使用"><a href="#Hexo博客配合Typora使用" class="headerlink" title="Hexo博客配合Typora使用"></a>Hexo博客配合Typora使用</h1><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="Hexo配置："><a href="#Hexo配置：" class="headerlink" title="Hexo配置："></a><strong>Hexo配置</strong>：</h3><ol>
<li>打开<code>_config.yml</code>文件，找到<code>post_asset_folder</code>属性，将其设置为<code>true</code>，该属性的作用是：使用<code>hexo new</code>新建文章的时候会创建一个和文章名相同的文件夹，在该文件夹内放置图片，文章中可以导入该图片。但是，图片的格式只能为<code>{% asset_img "image-20230714014753990.png" "post_asset_folder属性" %}</code>在Typora上不能展示该图片，通过生成文件后可以在线上看到。</li>
</ol>
<img src="/2023/07/14/Hexo%E5%8D%9A%E5%AE%A2/image-20230714014753990.png" class="" title="post_asset_folder属性">

<ol start="2">
<li>下载依赖<code>hexo-image-link</code>可以有效解决该问题，将图片格式改为Typora可以识别的格式<code>{% asset_img "image-20230714014753990.png" "post_asset_folder属性" %}</code>，并且在生成文件后也能在线上查看。</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install -s hexo-image-link</span><br></pre></td></tr></tbody></table></figure>



<h3 id="Typora配置："><a href="#Typora配置：" class="headerlink" title="Typora配置："></a><strong>Typora配置</strong>：</h3><ol>
<li>在偏好设置中，选择图像，将<code>插入图片时...</code>改为<code>复制到指定路径</code>，格式为<code>./${filename}</code>，这样使用截图软件截的图就可以直接复制到Typora上，而不需要先复制到对应的文件夹再通过修改图片路径插入图片</li>
</ol>
<img src="/2023/07/14/Hexo%E5%8D%9A%E5%AE%A2/image-20230714015513693.png" class="" title="Typora偏好设置">
</body></html>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript实现图片裁剪</title>
    <url>//2023/10/02/JavaScript%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA/</url>
    <content><![CDATA[<html><head></head><body><h1 id="程序介绍"><a href="#程序介绍" class="headerlink" title="程序介绍"></a>程序介绍</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>有时候想要将纵向的图片展示到电脑桌面上当壁纸，但是又因为尺寸不合适，使用市面上的截图软件不能准确截取到想要的宽高。因此，打算使用HTML和JavaScript实现准确截取图片功能，HTML用于展示图片和截取结果，JavaScript用于实现截取图片功能</p>
<h2 id="页面展示"><a href="#页面展示" class="headerlink" title="页面展示"></a>页面展示</h2><p>功能菜单有：选择文件、截取图片</p>
<p>图片展示区</p>
<p><img src="F:\blob\blob\source_posts\JavaScript实现图片裁剪\image-20231002214825650.png" alt="页面展示"></p>
<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="F:\blob\blob\source_posts\JavaScript实现图片裁剪\image-20231002231937425-1696259979409-1.png" alt="效果展示"></p>
<h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><p>点击选择文件按钮，选择需要截取的源图片；滑动浅米色蒙版，选择要截取的部分；</p>
<p><img src="F:\blob\blob\source_posts\JavaScript实现图片裁剪\image-20231002215155482.png" alt="image-20231002215155482"></p>
<h2 id="Html代码展示"><a href="#Html代码展示" class="headerlink" title="Html代码展示"></a>Html代码展示</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 功能菜单 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">onchange</span>=<span class="string">"handleFileSelect(event)"</span> <span class="attr">accept</span>=<span class="string">".jpg,.png"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"crop-image"</span>&gt;</span>截取图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 图片展示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"img-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"my-img"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>



<h1 id="功能代码分析"><a href="#功能代码分析" class="headerlink" title="功能代码分析"></a>功能代码分析</h1><h2 id="选择图片"><a href="#选择图片" class="headerlink" title="选择图片"></a>选择图片</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">onchange</span>=<span class="string">"handleFileSelect(event)"</span> <span class="attr">accept</span>=<span class="string">".jpg,.png"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p><code>input</code>是一个HTML元素，当前类型为<code>file</code>文件类型，用于选择文件。当用户选择文件后，会触发一个名为<code>handleFileSelect</code>的事件处理函数。该输入元素只接受后缀名为<code>.jpg</code>和<code>.png</code>的文件（<code>accept</code>属性）。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 处理文件选择</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Event</span>} <span class="variable">event</span> - 触发事件对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleFileSelect</span>(<span class="params">event</span>) {</span><br><span class="line">    <span class="title function_">clearBox</span>();  <span class="comment">// 清除Box</span></span><br><span class="line">    <span class="keyword">var</span> file = event.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>];  <span class="comment">// 所选择的文件对象</span></span><br><span class="line">    <span class="keyword">var</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">    reader.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params">e</span>) {</span><br><span class="line">        <span class="comment">// 文件读取器加载事件</span></span><br><span class="line">        <span class="keyword">var</span> imgElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"my-img"</span>);</span><br><span class="line">        imgElement.<span class="property">src</span> = e.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">        imgElement.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">            <span class="keyword">let</span> maxHeight = <span class="number">0.8</span>;  <span class="comment">// 最大高度</span></span><br><span class="line">            <span class="keyword">const</span> viewportHeight = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;  <span class="comment">// 当前设备高度</span></span><br><span class="line">            <span class="keyword">const</span> maxHeightPixels = viewportHeight * maxHeight;  <span class="comment">// 当前设备最大高度（像素值）</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> height = imgElement.<span class="property">height</span>;  <span class="comment">// 图像高度</span></span><br><span class="line">            <span class="keyword">let</span> width = imgElement.<span class="property">width</span>;  <span class="comment">// 图像宽度</span></span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"原始图片大小："</span>, width, height);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (height &gt; maxHeightPixels) {</span><br><span class="line">                ratio = maxHeightPixels / height;</span><br><span class="line">                imgElement.<span class="property">style</span>.<span class="property">width</span> = <span class="string">`<span class="subst">${width * ratio}</span>px`</span></span><br><span class="line">                imgElement.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">${height * ratio}</span>px`</span></span><br><span class="line">            }</span><br><span class="line">            <span class="title function_">init_box_line</span>();  <span class="comment">// 初始化裁剪图片蒙版</span></span><br><span class="line">        };</span><br><span class="line">    };</span><br><span class="line">    <span class="comment">// 将文件转为DataURL</span></span><br><span class="line">    reader.<span class="title function_">readAsDataURL</span>(file);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>在选择图片前，会先清除先前生成的图片蒙版（<code>clearBox</code>）；选择完图片并且渲染到界面上后，将初始化图片蒙版（<code>init_box_line</code>）</p>
<p><code>input</code>选中的文件存在于<code>event.target.files</code>数组中，在<code>FileReader</code>对象加载过程中加载图片标签，将选择到的图片地址转为<code>DataURL</code>赋值到<code>img</code>标签上，<code>img</code>就可以显示需要打开的图片文件。并且根据设置的最大高度，等比例显示图片。所设置的最大高度（0.8）为相对于需要显示在界面上的大小，即表示图片的高为界面的80%，其中需要将80%转为像素值。</p>
<h2 id="清除图片蒙版"><a href="#清除图片蒙版" class="headerlink" title="清除图片蒙版"></a>清除图片蒙版</h2><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 清除box</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clearBox</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"my-img"</span>);</span><br><span class="line">    img.<span class="property">style</span>.<span class="property">width</span> = <span class="string">""</span></span><br><span class="line">    img.<span class="property">style</span>.<span class="property">height</span> = <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> box_line = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"box_line"</span>);</span><br><span class="line">    <span class="keyword">if</span> (box_line) {</span><br><span class="line">        <span class="keyword">let</span> parent = box_line.<span class="property">parentNode</span>;</span><br><span class="line">        parent.<span class="title function_">removeChild</span>(box_line);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>先将展示图片标签的img的宽高设为空，并且搜索是否存在图片蒙版，如果存在则通过图片蒙版的父节点删除该蒙版</p>
<h2 id="初始化图片蒙版"><a href="#初始化图片蒙版" class="headerlink" title="初始化图片蒙版"></a>初始化图片蒙版</h2><h3 id="生产图片蒙版"><a href="#生产图片蒙版" class="headerlink" title="生产图片蒙版"></a>生产图片蒙版</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box_w, box_h;  <span class="comment">// 图片蒙版宽、高</span></span><br><span class="line"><span class="keyword">var</span> r = <span class="number">344</span> / <span class="number">193</span>;  <span class="comment">// 当前显示屏的宽高比例（344mm x 193mm、15.6寸）</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"my-img"</span>);</span><br><span class="line"><span class="keyword">var</span> w = img.<span class="property">clientWidth</span>  <span class="comment">// 图片当前宽度</span></span><br><span class="line"><span class="keyword">var</span> h = img.<span class="property">clientHeight</span>  <span class="comment">// 图片当前高低</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (w &lt; h) {</span><br><span class="line">    box_w = w;</span><br><span class="line">    box_h = w / r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (box_h &gt; h) {</span><br><span class="line">        box_h = h</span><br><span class="line">        box_w = h / r</span><br><span class="line">    }</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (w &gt;= h) {</span><br><span class="line">    box_w = h * r;</span><br><span class="line">    box_h = h;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (box_w &gt; w) {</span><br><span class="line">        box_w = w;</span><br><span class="line">        box_h = w / r;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"展示的图片大小："</span>, w, h);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"蒙版框大小："</span>, box_w, box_h);</span><br><span class="line"><span class="comment">// console.log(img, w, h, box_w, box_h);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> box_line = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">"div"</span>);</span><br><span class="line">box_line.<span class="title function_">setAttribute</span>(<span class="string">"id"</span>, <span class="string">"box_line"</span>);</span><br><span class="line">box_line.<span class="property">style</span>.<span class="property">width</span> = <span class="string">`<span class="subst">${box_w}</span>px`</span>;</span><br><span class="line">box_line.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">${box_h}</span>px`</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"img-group"</span>).<span class="title function_">append</span>(box_line);</span><br></pre></td></tr></tbody></table></figure>

<p>如果图片宽度小于图片高度，则图片蒙版宽度为图片宽度，并且图片蒙版高度为根据比例计算图片蒙版宽度得到；如果图片蒙版高度高于图片高度，则图片蒙版的高度为当前图片高度，图片蒙版的宽度为根据比例计算当前图片高度得到</p>
<h3 id="定义触发事件"><a href="#定义触发事件" class="headerlink" title="定义触发事件"></a>定义触发事件</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 定义变量来保存鼠标按下时的初始位置</span></span><br><span class="line"><span class="keyword">var</span> initialX;</span><br><span class="line"><span class="keyword">var</span> initialY;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听鼠标按下事件</span></span><br><span class="line">box_line.<span class="title function_">addEventListener</span>(<span class="string">"mousedown"</span>, <span class="keyword">function</span> (<span class="params">event</span>) {</span><br><span class="line">    <span class="comment">// 记录鼠标按下时的初始位置</span></span><br><span class="line">    initialX = event.<span class="property">clientX</span>;</span><br><span class="line">    initialY = event.<span class="property">clientY</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加鼠标移动和鼠标释放事件的监听器</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">"mousemove"</span>, dragElement);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">"mouseup"</span>, stopDragging);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义鼠标移动事件的处理函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dragElement</span>(<span class="params">event</span>) {</span><br><span class="line">    <span class="comment">// 计算鼠标移动的距离</span></span><br><span class="line">    <span class="keyword">var</span> deltaX = event.<span class="property">clientX</span> - initialX;</span><br><span class="line">    <span class="keyword">var</span> deltaY = event.<span class="property">clientY</span> - initialY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deltaX &gt; w) {</span><br><span class="line">        deltaX = w;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deltaY &gt; h) {</span><br><span class="line">        deltaY = h;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新div元素的位置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (box_h == h) {</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            box_line.<span class="property">offsetLeft</span> + deltaX &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">            box_line.<span class="property">offsetLeft</span> + deltaX + box_w &lt;= w</span><br><span class="line">        ) {</span><br><span class="line">            box_line.<span class="property">style</span>.<span class="property">left</span> = box_line.<span class="property">offsetLeft</span> + deltaX + <span class="string">"px"</span>;</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (box_w == w) {</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            box_line.<span class="property">offsetTop</span> + deltaY &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">            box_line.<span class="property">offsetTop</span> + deltaY + box_h &lt;= h</span><br><span class="line">        ) {</span><br><span class="line">            box_line.<span class="property">style</span>.<span class="property">top</span> = box_line.<span class="property">offsetTop</span> + deltaY + <span class="string">"px"</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新初始位置</span></span><br><span class="line">    initialX = event.<span class="property">clientX</span>;</span><br><span class="line">    initialY = event.<span class="property">clientY</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义鼠标释放事件的处理函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stopDragging</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="comment">// 移除鼠标移动和鼠标释放事件的监听器</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">"mousemove"</span>, dragElement);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">"mouseup"</span>, stopDragging);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>鼠标按下：当鼠标在图片蒙版上方，并且鼠标按下，会先记录当前状态的横纵坐标，并添加鼠标移动和鼠标抬起监听器；</p>
<p>鼠标移动：在鼠标移动过程中，根据当前事件记录的横纵坐标减去鼠标按下时记录的初始位置，得到鼠标移动的距离，即图片蒙版移动的距离。如果移动的横向距离/纵向距离大于图片宽度/高度，则移动的距离默认为图片的最大宽度/最大高度。如果图片蒙版高度为图片高度，并且图片蒙版相对于图片左侧边框的距离加上移动距离大于0（即图片蒙版在图片左侧边框之内，没有超出左侧边框，超出左侧边框会变成负数）和图片蒙版相对于图片左侧边框的距离加上移动距离和图片蒙版宽度小于图片宽度（即图片蒙版移动的距离和图片蒙版的宽度在图片右侧的边框之内），则才可以移动图片蒙版。最后重新更新初始化位置。</p>
<p>鼠标抬起：释放所有的鼠标事件</p>
<h3 id="下载截取的图片"><a href="#下载截取的图片" class="headerlink" title="下载截取的图片"></a>下载截取的图片</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">captureImage</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">var</span> divElement = box_line;</span><br><span class="line">    <span class="keyword">var</span> imgElement = img;</span><br><span class="line">    <span class="keyword">var</span> divRect = divElement.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">    <span class="keyword">var</span> imgRect = imgElement.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> divLeft = divRect.<span class="property">left</span> - imgRect.<span class="property">left</span>;</span><br><span class="line">    <span class="keyword">var</span> divTop = divRect.<span class="property">top</span> - imgRect.<span class="property">top</span>;</span><br><span class="line">    <span class="keyword">var</span> divWidth = divRect.<span class="property">width</span>;</span><br><span class="line">    <span class="keyword">var</span> divHeight = divRect.<span class="property">height</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">"canvas"</span>);</span><br><span class="line">    canvas.<span class="property">width</span> = divWidth / ratio;</span><br><span class="line">    canvas.<span class="property">height</span> = divHeight / ratio;</span><br><span class="line">    <span class="keyword">var</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">    context.<span class="title function_">drawImage</span>(</span><br><span class="line">        imgElement,  <span class="comment">// 要绘制的图像元素</span></span><br><span class="line">        divLeft / ratio,  <span class="comment">// 源图像的左上角在目标画布中的 X 坐标</span></span><br><span class="line">        divTop / ratio,  <span class="comment">// 源图像的左上角在目标画布中的 Y 坐标。 </span></span><br><span class="line">        divWidth / ratio,  <span class="comment">// 源图像在目标画布中要绘制的宽度</span></span><br><span class="line">        divHeight / ratio,  <span class="comment">// 源图像在目标画布中要绘制的高度</span></span><br><span class="line">        <span class="number">0</span>,  <span class="comment">// 目标画布中绘制的图像的左上角的 X 坐标</span></span><br><span class="line">        <span class="number">0</span>,  <span class="comment">// 目标画布中绘制的图像的左上角的 Y 坐标</span></span><br><span class="line">        divWidth / ratio,  <span class="comment">// 目标画布中绘制的图像的宽度</span></span><br><span class="line">        divHeight / ratio <span class="comment">// 目标画布中绘制的图像的高度</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">"a"</span>);</span><br><span class="line">    link.<span class="property">href</span> = canvas.<span class="title function_">toDataURL</span>();</span><br><span class="line">    link.<span class="property">download</span> = <span class="string">"crop-image.png"</span>;</span><br><span class="line">    link.<span class="title function_">click</span>();</span><br><span class="line">    link.<span class="title function_">remove</span>()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> crop_image = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"crop-image"</span>);</span><br><span class="line">crop_image.<span class="title function_">addEventListener</span>(<span class="string">"click"</span>, captureImage);</span><br></pre></td></tr></tbody></table></figure>

<p><code>Canvas</code>自带的<code>drawImage</code>函数需要提供9个参数，</p>
<ol>
<li><code>imgElement</code>即为需要从上面截取图片的元素；</li>
<li><code>divLeft / ratio</code>为源图像的左上角在目标画布中的 X 坐标（为保持和原图片一样的像素分辨率，将所有的坐标参数转为源图片的大小，）；</li>
<li><code>divTop / ratio</code>为源图像的左上角在目标画布中的 Y 坐标；</li>
<li><code>divWidth / ratio</code>为源图像在目标画布中要绘制的宽度；</li>
<li>0为目标画布中绘制的图像的左上角的 X 坐标</li>
<li>0为目标画布中绘制的图像的左上角的 Y 坐标</li>
<li><code>divWidth / ratio</code>为目标画布中绘制的图像的宽度</li>
<li><code>divHeight / ratio</code>为目标画布中绘制的图像的高度</li>
</ol>
<p>最后将截取到的图片转为<code>DataURL</code>，并且触发下载</p>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">'X-UA-Compatible'</span> <span class="attr">content</span>=<span class="string">'IE=edge'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图片裁剪<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">'viewport'</span> <span class="attr">content</span>=<span class="string">'width=device-width, initial-scale=1'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./static/js/main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-wrap</span>: nowrap;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#main</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#img-group</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box_line</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* border: 10px solid #000; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">opacity</span>: <span class="number">0.2</span>;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 功能菜单 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">onchange</span>=<span class="string">"handleFileSelect(event)"</span> <span class="attr">accept</span>=<span class="string">".jpg,.png"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"crop-image"</span>&gt;</span>截取图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 图片展示 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"img-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"my-img"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p><code>main.js</code></p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ratio = <span class="number">1</span>  <span class="comment">// 展示图片宽高与原始图像宽高比率</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 处理文件选择</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Event</span>} <span class="variable">event</span> - 触发事件对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleFileSelect</span>(<span class="params">event</span>) {</span><br><span class="line">    <span class="title function_">clearBox</span>();  <span class="comment">// 清除Box</span></span><br><span class="line">    <span class="keyword">var</span> file = event.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>];  <span class="comment">// 所选择的文件对象</span></span><br><span class="line">    <span class="keyword">var</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">    reader.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params">e</span>) {</span><br><span class="line">        <span class="comment">// 文件读取器加载事件</span></span><br><span class="line">        <span class="keyword">var</span> imgElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"my-img"</span>);</span><br><span class="line">        imgElement.<span class="property">src</span> = e.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">        imgElement.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">            <span class="keyword">let</span> maxHeight = <span class="number">0.8</span>;  <span class="comment">// 最大高度</span></span><br><span class="line">            <span class="keyword">const</span> viewportHeight = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;  <span class="comment">// 当前设备高度</span></span><br><span class="line">            <span class="keyword">const</span> maxHeightPixels = viewportHeight * maxHeight;  <span class="comment">// 当前设备最大高度（像素值）</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> height = imgElement.<span class="property">height</span>;  <span class="comment">// 图像高度</span></span><br><span class="line">            <span class="keyword">let</span> width = imgElement.<span class="property">width</span>;  <span class="comment">// 图像宽度</span></span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"原始图片大小："</span>, width, height);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (height &gt; maxHeightPixels) {</span><br><span class="line">                ratio = maxHeightPixels / height;</span><br><span class="line">                imgElement.<span class="property">style</span>.<span class="property">width</span> = <span class="string">`<span class="subst">${width * ratio}</span>px`</span></span><br><span class="line">                imgElement.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">${height * ratio}</span>px`</span></span><br><span class="line">            }</span><br><span class="line">            <span class="title function_">init_box_line</span>();  <span class="comment">// 初始化裁剪图片蒙版</span></span><br><span class="line">        };</span><br><span class="line">    };</span><br><span class="line">    <span class="comment">// 将文件转为DataURL</span></span><br><span class="line">    reader.<span class="title function_">readAsDataURL</span>(file);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 清除box</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clearBox</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"my-img"</span>);</span><br><span class="line">    img.<span class="property">style</span>.<span class="property">width</span> = <span class="string">""</span></span><br><span class="line">    img.<span class="property">style</span>.<span class="property">height</span> = <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> box_line = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"box_line"</span>);</span><br><span class="line">    <span class="keyword">if</span> (box_line) {</span><br><span class="line">        <span class="keyword">let</span> parent = box_line.<span class="property">parentNode</span>;</span><br><span class="line">        parent.<span class="title function_">removeChild</span>(box_line);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 初始化box</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init_box_line</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">var</span> box_w, box_h;</span><br><span class="line">    <span class="keyword">var</span> r = <span class="number">344</span> / <span class="number">193</span>;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"my-img"</span>);</span><br><span class="line">    <span class="keyword">var</span> w = img.<span class="property">clientWidth</span></span><br><span class="line">    <span class="keyword">var</span> h = img.<span class="property">clientHeight</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (w &lt; h) {</span><br><span class="line">        box_w = w;</span><br><span class="line">        box_h = w / r;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (box_h &gt; h) {</span><br><span class="line">            box_h = h</span><br><span class="line">            box_w = h / r</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (w &gt;= h) {</span><br><span class="line">        box_w = h * r;</span><br><span class="line">        box_h = h;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (box_w &gt; w) {</span><br><span class="line">            box_w = w;</span><br><span class="line">            box_h = w / r;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"展示的图片大小："</span>, w, h);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"蒙版框大小："</span>, box_w, box_h);</span><br><span class="line">    <span class="comment">// console.log(img, w, h, box_w, box_h);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> box_line = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">"div"</span>);</span><br><span class="line">    box_line.<span class="title function_">setAttribute</span>(<span class="string">"id"</span>, <span class="string">"box_line"</span>);</span><br><span class="line">    box_line.<span class="property">style</span>.<span class="property">width</span> = <span class="string">`<span class="subst">${box_w}</span>px`</span>;</span><br><span class="line">    box_line.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">${box_h}</span>px`</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"img-group"</span>).<span class="title function_">append</span>(box_line);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义变量来保存鼠标按下时的初始位置</span></span><br><span class="line">    <span class="keyword">var</span> initialX;</span><br><span class="line">    <span class="keyword">var</span> initialY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听鼠标按下事件</span></span><br><span class="line">    box_line.<span class="title function_">addEventListener</span>(<span class="string">"mousedown"</span>, <span class="keyword">function</span> (<span class="params">event</span>) {</span><br><span class="line">        <span class="comment">// 记录鼠标按下时的初始位置</span></span><br><span class="line">        initialX = event.<span class="property">clientX</span>;</span><br><span class="line">        initialY = event.<span class="property">clientY</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加鼠标移动和鼠标释放事件的监听器</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">"mousemove"</span>, dragElement);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">"mouseup"</span>, stopDragging);</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义鼠标移动事件的处理函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dragElement</span>(<span class="params">event</span>) {</span><br><span class="line">        <span class="comment">// 计算鼠标移动的距离</span></span><br><span class="line">        <span class="keyword">var</span> deltaX = event.<span class="property">clientX</span> - initialX;</span><br><span class="line">        <span class="keyword">var</span> deltaY = event.<span class="property">clientY</span> - initialY;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (deltaX &gt; w) {</span><br><span class="line">            deltaX = w;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (deltaY &gt; h) {</span><br><span class="line">            deltaY = h;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新div元素的位置</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (box_h == h) {</span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">                box_line.<span class="property">offsetLeft</span> + deltaX &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">                box_line.<span class="property">offsetLeft</span> + deltaX + box_w &lt;= w</span><br><span class="line">            ) {</span><br><span class="line">                box_line.<span class="property">style</span>.<span class="property">left</span> = box_line.<span class="property">offsetLeft</span> + deltaX + <span class="string">"px"</span>;</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (box_w == w) {</span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">                box_line.<span class="property">offsetTop</span> + deltaY &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">                box_line.<span class="property">offsetTop</span> + deltaY + box_h &lt;= h</span><br><span class="line">            ) {</span><br><span class="line">                box_line.<span class="property">style</span>.<span class="property">top</span> = box_line.<span class="property">offsetTop</span> + deltaY + <span class="string">"px"</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新初始位置</span></span><br><span class="line">        initialX = event.<span class="property">clientX</span>;</span><br><span class="line">        initialY = event.<span class="property">clientY</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义鼠标释放事件的处理函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">stopDragging</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="comment">// 移除鼠标移动和鼠标释放事件的监听器</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">"mousemove"</span>, dragElement);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">"mouseup"</span>, stopDragging);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">captureImage</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">var</span> divElement = box_line;</span><br><span class="line">        <span class="keyword">var</span> imgElement = img;</span><br><span class="line">        <span class="keyword">var</span> divRect = divElement.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">        <span class="keyword">var</span> imgRect = imgElement.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> divLeft = divRect.<span class="property">left</span> - imgRect.<span class="property">left</span>;</span><br><span class="line">        <span class="keyword">var</span> divTop = divRect.<span class="property">top</span> - imgRect.<span class="property">top</span>;</span><br><span class="line">        <span class="keyword">var</span> divWidth = divRect.<span class="property">width</span>;</span><br><span class="line">        <span class="keyword">var</span> divHeight = divRect.<span class="property">height</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">"canvas"</span>);</span><br><span class="line">        canvas.<span class="property">width</span> = divWidth / ratio;</span><br><span class="line">        canvas.<span class="property">height</span> = divHeight / ratio;</span><br><span class="line">        <span class="keyword">var</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">        context.<span class="title function_">drawImage</span>(</span><br><span class="line">            imgElement,  <span class="comment">// 要绘制的图像元素</span></span><br><span class="line">            divLeft / ratio,  <span class="comment">// 源图像的左上角在目标画布中的 X 坐标</span></span><br><span class="line">            divTop / ratio,  <span class="comment">// 源图像的左上角在目标画布中的 Y 坐标。 </span></span><br><span class="line">            divWidth / ratio,  <span class="comment">// 源图像在目标画布中要绘制的宽度</span></span><br><span class="line">            divHeight / ratio,  <span class="comment">// 源图像在目标画布中要绘制的高度</span></span><br><span class="line">            <span class="number">0</span>,  <span class="comment">// 目标画布中绘制的图像的左上角的 X 坐标</span></span><br><span class="line">            <span class="number">0</span>,  <span class="comment">// 目标画布中绘制的图像的左上角的 Y 坐标</span></span><br><span class="line">            divWidth / ratio,  <span class="comment">// 目标画布中绘制的图像的宽度</span></span><br><span class="line">            divHeight / ratio <span class="comment">// 目标画布中绘制的图像的高度</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">"a"</span>);</span><br><span class="line">        link.<span class="property">href</span> = canvas.<span class="title function_">toDataURL</span>();</span><br><span class="line">        link.<span class="property">download</span> = <span class="string">"crop-image.png"</span>;</span><br><span class="line">        link.<span class="title function_">click</span>();</span><br><span class="line">        link.<span class="title function_">remove</span>()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> crop_image = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"crop-image"</span>);</span><br><span class="line">    crop_image.<span class="title function_">addEventListener</span>(<span class="string">"click"</span>, captureImage);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>//2023/05/25/JavaScript%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><p>可以使用toString(a)，进行进制转换，a填需要转换的进制</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line">a.<span class="title function_">toString</span>(<span class="number">2</span>)  <span class="comment">// '1010'</span></span><br><span class="line">a.<span class="title function_">toString</span>(<span class="number">16</span>)  <span class="comment">// 'a'</span></span><br></pre></td></tr></tbody></table></figure>



<h1 id="字符串新增方法"><a href="#字符串新增方法" class="headerlink" title="字符串新增方法"></a>字符串新增方法</h1><ol>
<li>includes()：是否找到了参数字符串。</li>
<li>startsWith()：参数字符串是否在原字符串的头部。</li>
<li>endsWith()：参数字符串是否在原字符串的尾部。</li>
<li>repeat(n)：将原字符串重复n次。会先将n取整，若仍为负数，则报错<code>Infinity</code>；若n为字符串，则转换成数字。</li>
<li>padStart()：用于头部补全。</li>
<li>padEnd()：用于尾部补全。</li>
<li>trimStart()、trimLeft()：消除字符串头部的空格。</li>
<li>trimEnd()、trimRight()：消除尾部的空格。</li>
<li>matchAll()：返回一个正则表达式在当前字符串的所有匹配，返回的是一个遍历器（Iterator），需要使用for…of取出，也可以使用结解构将其转成数组<code>[...string.matchAll(regex)]</code>。</li>
<li>replaceAll()：可以一次性替换所有匹配，<code>searchValue</code>必须是全局的正则表达式。</li>
<li>at()：返回参数指定位置的字符。</li>
</ol>
<p><strong>padStart用途：</strong></p>
<ol>
<li>用于尾部补全</li>
</ol>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">'1'</span>.<span class="title function_">padStart</span>(<span class="number">10</span>, <span class="string">'0'</span>) <span class="comment">// "0000000001"</span></span><br><span class="line"><span class="string">'12'</span>.<span class="title function_">padStart</span>(<span class="number">10</span>, <span class="string">'0'</span>) <span class="comment">// "0000000012"</span></span><br><span class="line"><span class="string">'123456'</span>.<span class="title function_">padStart</span>(<span class="number">10</span>, <span class="string">'0'</span>) <span class="comment">// "0000123456"</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>提示字符串格式</li>
</ol>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">'12'</span>.<span class="title function_">padStart</span>(<span class="number">10</span>, <span class="string">'YYYY-MM-DD'</span>) <span class="comment">// "YYYY-MM-12"</span></span><br><span class="line"><span class="string">'09-12'</span>.<span class="title function_">padStart</span>(<span class="number">10</span>, <span class="string">'YYYY-MM-DD'</span>) <span class="comment">// "YYYY-09-12"</span></span><br></pre></td></tr></tbody></table></figure>



<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.</td>
<td align="left">匹配任何字符</td>
</tr>
<tr>
<td align="center">*</td>
<td align="left">匹配前一个表达式零次或多次</td>
</tr>
<tr>
<td align="center">+</td>
<td align="left">匹配前一个表达式一次或多次</td>
</tr>
<tr>
<td align="center">?</td>
<td align="left">匹配前一个表达式零次或一次</td>
</tr>
<tr>
<td align="center">^</td>
<td align="left">匹配输入字符串的开始位置</td>
</tr>
<tr>
<td align="center">$</td>
<td align="left">匹配输入字符串的结束位置</td>
</tr>
<tr>
<td align="center">\d</td>
<td align="left">匹配数字字符</td>
</tr>
<tr>
<td align="center">\D</td>
<td align="left">匹配非数字字符</td>
</tr>
<tr>
<td align="center">\w</td>
<td align="left">匹配字母、数字或下划线字符</td>
</tr>
<tr>
<td align="center">\W</td>
<td align="left">匹配非字母、数字或下划线字符</td>
</tr>
<tr>
<td align="center">\s</td>
<td align="left">匹配空白字符</td>
</tr>
<tr>
<td align="center">\S</td>
<td align="left">匹配非空白字符</td>
</tr>
<tr>
<td align="center">[]</td>
<td align="left">匹配方括号中的任意一个字符</td>
</tr>
<tr>
<td align="center">()</td>
<td align="left">分组，用于限制操作符的作用范围、改变操作符的优先级、捕获匹配项等。</td>
</tr>
</tbody></table>
<h2 id="1-RegExp-构造函数"><a href="#1-RegExp-构造函数" class="headerlink" title="1. RegExp 构造函数"></a>1. RegExp 构造函数</h2><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种情况</span></span><br><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">'xyz'</span>, <span class="string">'i'</span>);</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/xyz/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种情况</span></span><br><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">'xyz'</span>, <span class="string">'i'</span>);</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/xyz/i</span>;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-正则表达式方法"><a href="#2-正则表达式方法" class="headerlink" title="2. 正则表达式方法"></a>2. 正则表达式方法</h2><ol>
<li>match()</li>
<li>replace()</li>
<li>search()</li>
<li>split()</li>
</ol>
<h2 id="3-u-修饰符"><a href="#3-u-修饰符" class="headerlink" title="3. u 修饰符"></a>3. u 修饰符</h2><p>用来正确处理大于<code>\uFFFF</code>的 Unicode 字符</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">/^\uD83D/u.<span class="title function_">test</span>(<span class="string">'\uD83D\uDC2A'</span>) <span class="comment">// false</span></span><br><span class="line">/^\uD83D/.<span class="title function_">test</span>(<span class="string">'\uD83D\uDC2A'</span>) <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="4-y-修饰符"><a href="#4-y-修饰符" class="headerlink" title="4. y 修饰符"></a>4. y 修饰符</h2><h3 id="exec方法"><a href="#exec方法" class="headerlink" title="exec方法"></a>exec方法</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'aaa_aa_a'</span>;</span><br><span class="line"><span class="keyword">var</span> r1 = <span class="regexp">/a+/g</span>;</span><br><span class="line"><span class="keyword">var</span> r2 = <span class="regexp">/a+/y</span>;</span><br><span class="line"></span><br><span class="line">r1.<span class="title function_">exec</span>(s) <span class="comment">// ["aaa"]</span></span><br><span class="line">r2.<span class="title function_">exec</span>(s) <span class="comment">// ["aaa"]</span></span><br><span class="line"></span><br><span class="line">r1.<span class="title function_">exec</span>(s) <span class="comment">// ["aa"]</span></span><br><span class="line">r2.<span class="title function_">exec</span>(s) <span class="comment">// null</span></span><br></pre></td></tr></tbody></table></figure>

<p>y修饰符和g修饰符类似，都是从上一次搜索到的位置开始匹配字符，但是y修饰符不一样，y修饰符要求在字符串的头部就匹配到数据，否则返回空。</p>
<p>代码分析：执行第一次匹配后，都是输出aaa，剩余字符串为_aa_a；第二次匹配，都是从第一次匹配剩余的字符串的<code>_</code>开始，g修饰符会搜索剩余字符串所有符合的结果，而y修饰符会从头开始匹配，如果不合适（即<code>_</code>与<code>a</code>不匹配），则直接返回null</p>
<p><strong>实际上，<code>y</code>修饰符号隐含了头部匹配的标志<code>^</code>。</strong></p>
<h3 id="match方法"><a href="#match方法" class="headerlink" title="match方法"></a>match方法</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">'a1a2a3'</span>.<span class="title function_">match</span>(<span class="regexp">/a\d/y</span>) <span class="comment">// ["a1"]</span></span><br><span class="line"><span class="string">'a1a2a3'</span>.<span class="title function_">match</span>(<span class="regexp">/a\d/gy</span>) <span class="comment">// ["a1", "a2", "a3"]</span></span><br></pre></td></tr></tbody></table></figure>

<p>代码分析：匹配到第一次字符a1，将匹配结果返回，进行匹配下一个字符，由于y修饰符限制，正则表达式只能从上次成功匹配的字符<code>a</code>之后开始匹配，也就是<code>a</code>后面的<code>1</code>开始匹配，由于头部匹配不合适，则返回null。</p>
<h2 id="5-s-修饰符"><a href="#5-s-修饰符" class="headerlink" title="5. s 修饰符"></a>5. s 修饰符</h2><p>点（<code>.</code>）是一个特殊字符，代表任意的单个字符，但是有两个例外：一个是四个字节的 UTF-16 字符，这个可以用<code>u</code>修饰符解决；另一个是行终止符（line terminator character）。</p>
<p>行终止符：</p>
<ul>
<li>U+000A 换行符（<code>\n</code>）</li>
<li>U+000D 回车符（<code>\r</code>）</li>
<li>U+2028 行分隔符（line separator）</li>
<li>U+2029 段分隔符（paragraph separator）</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">/foo.<span class="property">bar</span>/s.<span class="title function_">test</span>(<span class="string">'foo\nbar'</span>) <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="6-断言"><a href="#6-断言" class="headerlink" title="6. 断言"></a>6. 断言</h2><p><strong>先行断言（lookahead）</strong>：<code>x</code>只有在<code>y</code>前面才匹配，必须写成<code>/x(?=y)/</code></p>
<p><strong>先行否定断言（negative lookahead）</strong>：<code>x</code>只有在<code>y</code>前面才匹配，必须写成<code>/x(?=y)/</code></p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">/\d+(?=%)/.<span class="title function_">exec</span>(<span class="string">'100% of US presidents have been male'</span>)  <span class="comment">// ["100"]</span></span><br><span class="line">/\d+(?!%)/.<span class="title function_">exec</span>(<span class="string">'that’s all 44 of them'</span>)                 <span class="comment">// ["44"]</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>后行断言（lookbehind）</strong>：<code>x</code>只有在<code>y</code>后面才匹配，必须写成<code>/(?&lt;=y)x/</code></p>
<p><strong>后行否定断言（negative lookbehind）</strong>：<code>x</code>只有在<code>y</code>后面才匹配，必须写成<code>/(?&lt;=y)x/</code></p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">/\d+(?=%)/.<span class="title function_">exec</span>(<span class="string">'100% of US presidents have been male'</span>)  <span class="comment">// ["100"]</span></span><br><span class="line">/\d+(?!%)/.<span class="title function_">exec</span>(<span class="string">'that’s all 44 of them'</span>)                 <span class="comment">// ["44"]</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="7-Unicode-属性类"><a href="#7-Unicode-属性类" class="headerlink" title="7. Unicode 属性类"></a>7. Unicode 属性类</h2><p>匹配满足条件的所有字符</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> regexGreekSymbol = <span class="regexp">/\p{Script=Greek}/u</span>;</span><br><span class="line">regexGreekSymbol.<span class="title function_">test</span>(<span class="string">'π'</span>) <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure>

<p><code>\p{Script=Greek}</code>表示匹配一个希腊文字母，所以匹配<code>π</code>成功。</p>
<h2 id="8-v-修饰符"><a href="#8-v-修饰符" class="headerlink" title="8. v 修饰符"></a>8. v 修饰符</h2><p>可以向某个 Unicode 属性类添加或减少字符</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 差集运算（A 减去 B）</span></span><br><span class="line">[A--B]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集运算（A 与 B 的交集）</span></span><br><span class="line">[A&amp;&amp;B]</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 十进制字符去除 ASCII 码的0到9</span></span><br><span class="line">[\p{<span class="title class_">Decimal</span>_Number}--[<span class="number">0</span>-<span class="number">9</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Emoji 字符去除 ASCII 码字符</span></span><br><span class="line">[\p{<span class="title class_">Emoji</span>}--\p{<span class="variable constant_">ASCII</span>}]</span><br></pre></td></tr></tbody></table></figure>

<h2 id="9-具名组匹配"><a href="#9-具名组匹配" class="headerlink" title="9. 具名组匹配"></a>9. 具名组匹配</h2><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">RE_DATE</span> = <span class="regexp">/(?&lt;year&gt;\d{4})-(?&lt;month&gt;\d{2})-(?&lt;day&gt;\d{2})/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> matchObj = <span class="variable constant_">RE_DATE</span>.<span class="title function_">exec</span>(<span class="string">'1999-12-31'</span>);</span><br><span class="line"><span class="keyword">const</span> year = matchObj.<span class="property">groups</span>.<span class="property">year</span>; <span class="comment">// "1999"</span></span><br><span class="line"><span class="keyword">const</span> month = matchObj.<span class="property">groups</span>.<span class="property">month</span>; <span class="comment">// "12"</span></span><br><span class="line"><span class="keyword">const</span> day = matchObj.<span class="property">groups</span>.<span class="property">day</span>; <span class="comment">// "31"</span></span><br></pre></td></tr></tbody></table></figure>

<p>“具名组匹配”在圆括号内部，模式的头部添加“问号 + 尖括号 + 组名“（<code>?&lt;year&gt;</code>），然后就可以在<code>exec</code>方法返回结果的<code>groups</code>属性上引用该组名。同时，数字序号（<code>matchObj[1]</code>）依然有效。</p>
<p><strong>解构赋值和替换</strong></p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> {<span class="attr">groups</span>: {one, two}} = <span class="regexp">/^(?&lt;one&gt;.*):(?&lt;two&gt;.*)$/u</span>.<span class="title function_">exec</span>(<span class="string">'foo:bar'</span>);</span><br><span class="line">one  <span class="comment">// foo</span></span><br><span class="line">two  <span class="comment">// bar</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> re = <span class="regexp">/(?&lt;year&gt;\d{4})-(?&lt;month&gt;\d{2})-(?&lt;day&gt;\d{2})/u</span>;</span><br><span class="line"></span><br><span class="line"><span class="string">'2015-01-02'</span>.<span class="title function_">replace</span>(re, <span class="string">'$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;'</span>)</span><br><span class="line"><span class="comment">// '02/01/2015'</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>引用</strong></p>
<p>如果要在正则表达式内部引用某个“具名组匹配”，可以使用<code>\k&lt;组名&gt;</code>的写法。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">RE_TWICE</span> = <span class="regexp">/^(?&lt;word&gt;[a-z]+)!\k&lt;word&gt;$/</span>;</span><br><span class="line"><span class="variable constant_">RE_TWICE</span>.<span class="title function_">test</span>(<span class="string">'abc!abc'</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable constant_">RE_TWICE</span>.<span class="title function_">test</span>(<span class="string">'abc!ab'</span>) <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></figure>

<p>数字引用（<code>\1</code>）依然有效。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">RE_TWICE</span> = <span class="regexp">/^(?&lt;word&gt;[a-z]+)!\1$/</span>;</span><br><span class="line"><span class="variable constant_">RE_TWICE</span>.<span class="title function_">test</span>(<span class="string">'abc!abc'</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable constant_">RE_TWICE</span>.<span class="title function_">test</span>(<span class="string">'abc!ab'</span>) <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="10-d-修饰符"><a href="#10-d-修饰符" class="headerlink" title="10. d 修饰符"></a>10. d 修饰符</h2><p>这个修饰符可以让<code>exec()</code>、<code>match()</code>的返回结果添加<code>indices</code>属性，在该属性上面可以拿到匹配的开始位置和结束位置。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> text = <span class="string">'zabbcdef'</span>;</span><br><span class="line"><span class="keyword">const</span> re = <span class="regexp">/ab/</span>d;</span><br><span class="line"><span class="keyword">const</span> result = re.<span class="title function_">exec</span>(text);</span><br><span class="line"></span><br><span class="line">result.<span class="property">index</span> <span class="comment">// 1</span></span><br><span class="line">result.<span class="property">indices</span> <span class="comment">// [ [1, 3] ]</span></span><br></pre></td></tr></tbody></table></figure>

<p>结束位置是匹配结果的下一个字符</p>
<h1 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h1><h2 id="1-数值分隔符"><a href="#1-数值分隔符" class="headerlink" title="1. 数值分隔符"></a>1. 数值分隔符</h2><p>类似<code>1000</code>可以写作<code>1,000</code></p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> budget = <span class="number">1_000_000_000_000</span>;</span><br><span class="line">budget === <span class="number">10</span> ** <span class="number">12</span> <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure>

<p>数值分隔符没有指定间隔的位数，可以每三位添加一个分隔符，也可以每一位、每两位、每四位添加一个。其他进制的数值也可以使用分隔符。数值分隔符只是一种书写便利，对于 JavaScript 内部数值的存储和输出，并没有影响。</p>
<p>数值分隔符有几个使用注意点：</p>
<ul>
<li>不能放在数值的最前面（leading）或最后面（trailing）。</li>
<li>不能两个或两个以上的分隔符连在一起。</li>
<li>小数点的前后不能有分隔符。</li>
<li>科学计数法里面，表示指数的<code>e</code>或<code>E</code>前后不能有分隔符。</li>
<li>分隔符不能紧跟着进制的前缀<code>0b</code>、<code>0B</code>、<code>0o</code>、<code>0O</code>、<code>0x</code>、<code>0X</code>。</li>
</ul>
<p>下面三个将字符串转成数值的函数，不支持数值分隔符。</p>
<ul>
<li>Number()</li>
<li>parseInt()</li>
<li>parseFloat()</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="string">'123_456'</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'123_456'</span>) <span class="comment">// 123</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-Number"><a href="#2-Number" class="headerlink" title="2. Number"></a>2. Number</h2><p><code>Number.isFinite()</code>用来检查一个数值是否为有限的（finite），不是数值直接返回false。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">15</span>); <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">0.8</span>); <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="title class_">NaN</span>); <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>); <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isFinite</span>(-<span class="title class_">Infinity</span>); <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="string">'foo'</span>); <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="string">'15'</span>); <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="literal">true</span>); <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></figure>

<p><code>Number.isNaN()</code>用来检查一个值是否为<code>NaN</code>。</p>
<p><strong>Number的这两个方法和直接调用这两个方法的区别</strong>：</p>
<p>isFinite会将非数值转为数值，在进行判断，而Number的isFinite会直接判断数值，如果不为数值，则直接返回false。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">isFinite</span>(<span class="number">25</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">isFinite</span>(<span class="string">"25"</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">25</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="string">"25"</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="title class_">NaN</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">"NaN"</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">"NaN"</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="number">1</span>) <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></figure>

<p><code>Number.isInteger()</code>用来判断一个数值是否为整数。</p>
<p>整数和浮点数采用的是同样的储存方法，所以 25 和 25.0 被视为同一个值。如果参数不是数值，则直接返回false</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">25</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">25.0</span>) <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure>

<p>如果数值超过精度会将后面位舍弃，可能会出现误判；或者一个数的绝对值小于<code>Number.MIN_VALUE</code>（5E-324），即最小分辨值，会自动转为0，这是也会误判。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">3.0000000000000002</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">5E-324</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">5E-325</span>) <span class="comment">// true 5E-325由于值太小，会被自动转为0</span></span><br></pre></td></tr></tbody></table></figure>

<p><code>Number.EPSILON</code>表示 1 与大于 1 的最小浮点数之间的差。等于 2 的 -52 次方。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="property">EPSILON</span> === <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, -<span class="number">52</span>)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="property">EPSILON</span></span><br><span class="line"><span class="comment">// 2.220446049250313e-16</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="property">EPSILON</span>.<span class="title function_">toFixed</span>(<span class="number">20</span>)</span><br><span class="line"><span class="comment">// "0.00000000000000022204"</span></span><br></pre></td></tr></tbody></table></figure>

<p>误差范围设为 2 的-50 次方（即<code>Number.EPSILON * Math.pow(2, 2)</code>），即如果两个浮点数的差小于这个值，我们就认为这两个浮点数相等。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *	判断0.1+0.2是否等于0.3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> - <span class="number">0.3</span></span><br><span class="line"><span class="comment">// 5.551115123125783e-17</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.551115123125783e-17</span> &lt; <span class="title class_">Number</span>.<span class="property">EPSILON</span> * <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断两个浮点数是否相等</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">withinErrorMargin</span> (left, right) {</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">abs</span>(left - right) &lt; <span class="title class_">Number</span>.<span class="property">EPSILON</span> * <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><code>Number.isSafeInteger()</code>用来判断一个整数是否在这个范围之内，JavaScript 能够准确表示的整数范围在<code>-2^53</code>到<code>2^53</code>之间。</p>
<p>大整数计算时，只检验计算结果不行，可能会出现错误，如果a远比b大，进行计算时，a会以最大上限整数进行存储，而不是a的真实值。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="title function_">isSafeInteger</span>(<span class="number">9007199254740993</span>)</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="title function_">isSafeInteger</span>(<span class="number">990</span>)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="title function_">isSafeInteger</span>(<span class="number">9007199254740993</span> - <span class="number">990</span>)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="number">9007199254740993</span> - <span class="number">990</span></span><br><span class="line"><span class="comment">// 返回结果 9007199254740002</span></span><br><span class="line"><span class="comment">// 正确答案应该是 9007199254740003</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-Math"><a href="#3-Math" class="headerlink" title="3. Math"></a>3. Math</h2><p><code>Math.trunc</code>方法用于去除一个数的小数部分，返回整数部分，不会进行四舍五入。</p>
<p><code>Math.sign</code>方法用来判断一个数到底是正数、负数、还是零。</p>
<ul>
<li>参数为正数，返回<code>+1</code>；</li>
<li>参数为负数，返回<code>-1</code>；</li>
<li>参数为 0，返回<code>0</code>；</li>
<li>参数为-0，返回<code>-0</code>;</li>
<li>其他值，返回<code>NaN</code>。</li>
</ul>
<p><code>Math.cbrt()</code>方法用于计算一个数的立方根。</p>
<p><code>Math.clz32()</code>方法将参数转为 32 位无符号整数的形式，然后返回这个 32 位值里面有多少个前导 0。左移运算符（<code>&lt;&lt;</code>）与<code>Math.clz32</code>方法直接相关。对于小数，<code>Math.clz32</code>方法只考虑整数部分。</p>
<p><code>Math.imul</code>方法返回两个数以 32 位带符号整数形式相乘的结果，返回的也是一个 32 位的带符号整数。主要用于大整数计算。</p>
<p><code>Math.fround</code>方法返回一个数的32位单精度浮点数形式。</p>
<p><code>Math.hypot</code>方法返回所有参数的平方和的平方根。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">hypot</span>(<span class="number">3</span>, <span class="number">4</span>);        <span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 3 的平方加上 4 的平方，等于 5 的平方。</span></span><br></pre></td></tr></tbody></table></figure>

<p><code>Math.expm1(x)</code>返回e的x次方-1<br>$$<br>e^x-1<br>$$<br><code>Math.log1p(x)</code>方法返回<code>1 + x</code>的自然对数<br>$$<br>ln(1+x)<br>$$<br><code>Math.log1p(x)</code>方法返回<code>1 + x</code>的自然对数<br>$$<br>log_{10}(x)<br>$$<br><code>Math.log2(x)</code>返回以 2 为底的<code>x</code>的对数。<br>$$<br>log_2(x)<br>$$</p>
<ul>
<li><code>Math.sinh(x)</code> 返回<code>x</code>的双曲正弦（hyperbolic sine）</li>
<li><code>Math.cosh(x)</code> 返回<code>x</code>的双曲余弦（hyperbolic cosine）</li>
<li><code>Math.tanh(x)</code> 返回<code>x</code>的双曲正切（hyperbolic tangent）</li>
<li><code>Math.asinh(x)</code> 返回<code>x</code>的反双曲正弦（inverse hyperbolic sine）</li>
<li><code>Math.acosh(x)</code> 返回<code>x</code>的反双曲余弦（inverse hyperbolic cosine）</li>
<li><code>Math.atanh(x)</code> 返回<code>x</code>的反双曲正切（inverse hyperbolic tangent）</li>
</ul>
<h2 id="4-BigInt"><a href="#4-BigInt" class="headerlink" title="4. BigInt"></a>4. BigInt</h2><p>大整数，BigInt 类型的数据必须添加后缀<code>n</code>。</p>
<p>除法运算会舍弃小数位；</p>
<p>BigInt不能与普通数值进行混合运算，<code>|</code>、<code>+</code>；</p>
<p>比较运算符可以与其他类型值混合计算；</p>
<p>BigInt 与字符串混合运算时，会先转为字符串，再进行运算。</p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. 基本用法</h2><p>参数默认值不是传值的，而是每次都重新计算默认值表达式的值。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">99</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">p = x + <span class="number">1</span></span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">100</span>;</span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// 101</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-与参数解构赋值结合"><a href="#2-与参数解构赋值结合" class="headerlink" title="2. 与参数解构赋值结合"></a>2. 与参数解构赋值结合</h2><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">{x, y = <span class="number">5</span>} = {}</span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// undefined 5</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-参数默认位置"><a href="#3-参数默认位置" class="headerlink" title="3. 参数默认位置"></a>3. 参数默认位置</h2><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">x = <span class="number">5</span>, y = <span class="number">6</span></span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(<span class="literal">undefined</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="comment">// 5 null</span></span><br></pre></td></tr></tbody></table></figure>

<p>undefined触发默认值，null不会</p>
<h2 id="4-函数的length属性"><a href="#4-函数的length属性" class="headerlink" title="4. 函数的length属性"></a>4. 函数的length属性</h2><p>指定了默认值以后，函数的<code>length</code>属性，将返回没有指定默认值的参数个数，rest参数也不在length中。</p>
<p>如果设置了默认值的参数不是尾参数，那么<code>length</code>属性也不再计入后面的参数了。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">a = <span class="number">0</span>, b, c</span>) {}).<span class="property">length</span> <span class="comment">// 0</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">a, b = <span class="number">1</span>, c</span>) {}).<span class="property">length</span> <span class="comment">// 1</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">...a</span>) {}).<span class="property">length</span>  <span class="comment">// 0</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="5-作用域"><a href="#5-作用域" class="headerlink" title="5. 作用域"></a>5. 作用域</h2><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">y = x</span>) {</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>() <span class="comment">// 1</span></span><br></pre></td></tr></tbody></table></figure>

<p>函数<code>f</code>调用时，参数<code>y = x</code>形成一个单独的作用域，并没有定义变量<code>x</code>，所以从全局变量找<code>x</code>。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">x, y = <span class="keyword">function</span>() { x = <span class="number">2</span>; }</span>) {</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line">  <span class="title function_">y</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// 3</span></span><br><span class="line">x <span class="comment">// 1</span></span><br></pre></td></tr></tbody></table></figure>

<p>执行<code>y()</code>的时候，<code>y()</code>和函数参数的<code>x</code>在同一作用域内，所以函数的参数<code>x</code>的值被改为2；函数体内使用<code>var</code>声明了一个和外部同名的变量<code>x</code>，并且赋值为3，这个变量只是一个局部变量，虽然和外面的全局变量同名但是本质不同，所以外部的<code>x</code>没有变，仍为1，所以<code>foo</code>最后一行代码输出的为3。</p>
<p>刚开始：</p>
<p>全局作用域：</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>x</td>
<td>1</td>
</tr>
</tbody></table>
<p><code>foo</code>函数的参数作用域（当前作用域由于<code>y</code>参数没有执行，所以<code>x</code>参数仍为undefined）：</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>x</td>
<td>undefined</td>
</tr>
<tr>
<td>y</td>
<td>function ( ) { x = 2; }</td>
</tr>
</tbody></table>
<p>执行<code>foo()</code>函数：</p>
<p>全局作用域：</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>x</td>
<td>1</td>
</tr>
</tbody></table>
<p><code>foo</code>函数内部作用域：</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>x</td>
<td>3</td>
</tr>
</tbody></table>
<p><code>foo</code>函数的参数作用域（此时已经执行<code>y()</code>函数，所以<code>x</code>的值从undefined变为2）：</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>x</td>
<td>2</td>
</tr>
<tr>
<td>y</td>
<td>function ( ) { x = 2; }</td>
</tr>
</tbody></table>
<h2 id="6-rest-参数"><a href="#6-rest-参数" class="headerlink" title="6. rest 参数"></a>6. rest 参数</h2><p>rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。 rest 参数的形式为<code>...变量名</code></p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">...values</span>) {</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> val <span class="keyword">of</span> values) {</span><br><span class="line">    sum += val;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>) <span class="comment">// 10</span></span><br></pre></td></tr></tbody></table></figure>

<p><code>arguments</code>对象，是一个类似数组的对象，所以需要使用<code>Array.from</code>将其转为数组</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">...values</span>) {</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> val <span class="keyword">of</span> values) {</span><br><span class="line">    sum += val;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>) <span class="comment">// 10</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>注意，rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。</strong></p>
<h2 id="7-严格模式"><a href="#7-严格模式" class="headerlink" title="7. 严格模式"></a>7. 严格模式</h2><p>只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。</p>
<p>原因是：函数执行的时候，先执行函数参数，然后再执行函数体，这样不合理。</p>
<p>严格模式下不能用前缀<code>0</code>表示八进制</p>
<p>解决方法（把函数包在一个无参数的立即执行函数里面）：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> doSomething = (<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  <span class="string">'use strict'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">value = <span class="number">42</span></span>) {</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  };</span><br><span class="line">}());</span><br></pre></td></tr></tbody></table></figure>

<h2 id="8-name-属性"><a href="#8-name-属性" class="headerlink" title="8. name 属性"></a>8. name 属性</h2><p>函数的<code>name</code>属性，返回该函数的函数名。</p>
<h2 id="9-箭头函数"><a href="#9-箭头函数" class="headerlink" title="9. 箭头函数"></a>9. 箭头函数</h2><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">f</span> = v =&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params">v</span>) {</span><br><span class="line">  <span class="keyword">return</span> v;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>

<p>如果箭头函数只有一行语句，且不需要返回值，可以采用下面的写法，就不用写大括号了。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; <span class="keyword">void</span> <span class="title function_">doesNotReturn</span>();</span><br></pre></td></tr></tbody></table></figure>

<p><strong>注意：</strong></p>
<ol>
<li>箭头函数没有自己的<code>this</code>对象，使用箭头函数的<code>this</code>指向上一层的作用域。</li>
<li>不可以当作构造函数，也就是说，不可以对箭头函数使用<code>new</code>命令，否则会抛出一个错误。</li>
<li>不可以使用<code>arguments</code>对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</li>
<li>不可以使用<code>yield</code>命令，因此箭头函数不能用作 Generator 函数。</li>
<li>箭头函数也没有<code>arguments</code>、<code>super</code>、<code>new.target</code>变量，都指向外层的变量</li>
<li>箭头函数不能使用<code>call()</code>、<code>apply()</code>、<code>bind()</code>这些方法</li>
</ol>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    (<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">x</span>).<span class="title function_">bind</span>({ <span class="attr">x</span>: <span class="string">'inner'</span> })()</span><br><span class="line">  ];</span><br><span class="line">}).<span class="title function_">call</span>({ <span class="attr">x</span>: <span class="string">'outer'</span> });</span><br><span class="line"><span class="comment">// ['outer']</span></span><br></pre></td></tr></tbody></table></figure>

<p>部署管道机制（pipeline）的例子</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">pipeline</span> = (<span class="params">...funcs</span>) =&gt;</span><br><span class="line">  <span class="function"><span class="params">val</span> =&gt;</span> funcs.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="title function_">b</span>(a), val);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">plus1</span> = a =&gt; a + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mult2</span> = a =&gt; a * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> addThenMult = <span class="title function_">pipeline</span>(plus1, mult2);</span><br><span class="line"></span><br><span class="line"><span class="title function_">addThenMult</span>(<span class="number">5</span>)</span><br><span class="line"><span class="comment">// 12</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="10-尾调用"><a href="#10-尾调用" class="headerlink" title="10. 尾调用"></a>10. 尾调用</h2><p>尾调用（Tail Call）是函数式编程的一个重要概念，指某个函数的最后一步是调用另一个函数。</p>
<p>以下三种情况，都不属于尾调用。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 情况一</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x</span>){</span><br><span class="line">  <span class="keyword">let</span> y = <span class="title function_">g</span>(x);</span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况二</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x</span>){</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">g</span>(x) + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况三</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x</span>){</span><br><span class="line">  <span class="title function_">g</span>(x);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。</p>
<p>在正常模式下，函数内部有两个变量，可以跟踪函数的调用栈。尾调用优化发生时，函数的调用栈会改写，因此上面两个变量就会失真。严格模式禁用这两个变量，所以尾调用模式仅在严格模式下生效。</p>
<ul>
<li><code>func.arguments</code>：返回调用时函数的参数。</li>
<li><code>func.caller</code>：返回调用当前函数的那个函数。</li>
</ul>
<p><strong>尾递归</strong></p>
<p>尾递归优化过的 Fibonacci 数列实现如下。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 原函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Fibonacci</span> (n) {</span><br><span class="line">  <span class="keyword">if</span> ( n &lt;= <span class="number">1</span> ) {<span class="keyword">return</span> <span class="number">1</span>};</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Fibonacci</span>(n - <span class="number">1</span>) + <span class="title class_">Fibonacci</span>(n - <span class="number">2</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title class_">Fibonacci</span>(<span class="number">10</span>) <span class="comment">// 89</span></span><br><span class="line"><span class="title class_">Fibonacci</span>(<span class="number">100</span>) <span class="comment">// 超时</span></span><br><span class="line"><span class="title class_">Fibonacci</span>(<span class="number">500</span>) <span class="comment">// 超时</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 尾递归</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Fibonacci2</span> (n , ac1 = <span class="number">1</span> , ac2 = <span class="number">1</span>) {</span><br><span class="line">  <span class="keyword">if</span>( n &lt;= <span class="number">1</span> ) {<span class="keyword">return</span> ac2};</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Fibonacci2</span> (n - <span class="number">1</span>, ac2, ac1 + ac2);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title class_">Fibonacci2</span>(<span class="number">100</span>) <span class="comment">// 573147844013817200000</span></span><br><span class="line"><span class="title class_">Fibonacci2</span>(<span class="number">1000</span>) <span class="comment">// 7.0330367711422765e+208</span></span><br><span class="line"><span class="title class_">Fibonacci2</span>(<span class="number">10000</span>) <span class="comment">// Infinity</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>尾递归优化</strong></p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x, y</span>) {</span><br><span class="line">  <span class="keyword">if</span> (y &gt; <span class="number">0</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">sum</span>(x + <span class="number">1</span>, y - <span class="number">1</span>);</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">100000</span>)</span><br><span class="line"><span class="comment">// Uncaught RangeError: Maximum call stack size exceeded(…)</span></span><br></pre></td></tr></tbody></table></figure>

<p>报错，提示超出调用栈的最大次数</p>
<p>蹦床函数（trampoline）可以将递归执行转为循环执行。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x, y</span>) {</span><br><span class="line">  <span class="keyword">if</span> (y &gt; <span class="number">0</span>) {</span><br><span class="line">    <span class="keyword">return</span> sum.<span class="title function_">bind</span>(<span class="literal">null</span>, x + <span class="number">1</span>, y - <span class="number">1</span>);</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>这里是返回一个函数，然后执行该函数，而不是函数里面调用函数，这样就避免了递归执行，从而就消除了调用栈过大的问题。</p>
<p>蹦床函数并不是真正的尾递归优化，下面的实现才是。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">tco</span>(<span class="params">f</span>) {</span><br><span class="line">  <span class="keyword">var</span> value;</span><br><span class="line">  <span class="keyword">var</span> active = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> accumulated = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">accumulator</span>(<span class="params"></span>) {</span><br><span class="line">    accumulated.<span class="title function_">push</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="keyword">if</span> (!active) {</span><br><span class="line">      active = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">while</span> (accumulated.<span class="property">length</span>) {</span><br><span class="line">        value = f.<span class="title function_">apply</span>(<span class="variable language_">this</span>, accumulated.<span class="title function_">shift</span>());</span><br><span class="line">      }</span><br><span class="line">      active = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="title function_">tco</span>(<span class="keyword">function</span>(<span class="params">x, y</span>) {</span><br><span class="line">  <span class="keyword">if</span> (y &gt; <span class="number">0</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">sum</span>(x + <span class="number">1</span>, y - <span class="number">1</span>)</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">100000</span>)</span><br><span class="line"><span class="comment">// 100001</span></span><br></pre></td></tr></tbody></table></figure>

<p>分析：待分析</p>
<h2 id="11-函数参数的尾逗号"><a href="#11-函数参数的尾逗号" class="headerlink" title="11. 函数参数的尾逗号"></a>11. 函数参数的尾逗号</h2><p>ES2017 允许函数的最后一个参数有尾逗号（trailing comma）。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clownsEverywhere</span>(<span class="params"></span></span><br><span class="line"><span class="params">  param1,</span></span><br><span class="line"><span class="params">  param2,</span></span><br><span class="line"><span class="params"></span>) { <span class="comment">/* ... */</span> }</span><br><span class="line"></span><br><span class="line"><span class="title function_">clownsEverywhere</span>(</span><br><span class="line">  <span class="string">'foo'</span>,</span><br><span class="line">  <span class="string">'bar'</span>,</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure>

<h2 id="12-Function-prototype-toString"><a href="#12-Function-prototype-toString" class="headerlink" title="12. Function.prototype.toString()"></a>12. Function.prototype.toString()</h2><p>返回函数一模一样的原始代码。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="comment">/* foo comment */</span> foo () {}</span><br><span class="line"></span><br><span class="line">foo.<span class="title function_">toString</span>()</span><br><span class="line"><span class="comment">// "function /* foo comment */ foo () {}"</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="13-catch-命令的参数省略"><a href="#13-catch-命令的参数省略" class="headerlink" title="13. catch 命令的参数省略"></a>13. catch 命令的参数省略</h2><p>使用<code>try...catch</code>的时候catch后面可以不接参数，但是捕获不到异常</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> {</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">} <span class="keyword">catch</span> {</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="eg1：直接使用Math-max-求最大值，参数为数组时可以使用-解构"><a href="#eg1：直接使用Math-max-求最大值，参数为数组时可以使用-解构" class="headerlink" title="eg1：直接使用Math.max()求最大值，参数为数组时可以使用...解构"></a>eg1：直接使用Math.max()求最大值，参数为数组时可以使用<code>...</code>解构</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 的写法</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, [<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的写法</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(...[<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>);</span><br></pre></td></tr></tbody></table></figure>

<h3 id="eg2：push-函数，将一个数组添加到另一个数组的尾部"><a href="#eg2：push-函数，将一个数组添加到另一个数组的尾部" class="headerlink" title="eg2：push()函数，将一个数组添加到另一个数组的尾部"></a>eg2：<code>push()</code>函数，将一个数组添加到另一个数组的尾部</h3><p>ES5之前由于<code>push()</code>方法的参数不能是数组，所以只好通过<code>apply()</code>方法变通使用<code>push()</code>方法。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 的写法</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span>.<span class="title function_">apply</span>(arr1, arr2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的写法</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr1.<span class="title function_">push</span>(...arr2);</span><br></pre></td></tr></tbody></table></figure>

<h3 id="eg3：创建时间"><a href="#eg3：创建时间" class="headerlink" title="eg3：创建时间"></a>eg3：创建时间</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(...[<span class="number">2023</span>, <span class="number">6</span>, <span class="number">20</span>, <span class="number">17</span>, <span class="number">40</span>, <span class="number">59</span>])</span><br><span class="line">date.<span class="title function_">toLocaleString</span>()</span><br><span class="line"><span class="comment">// 2023/7/20 17:40:59</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="eg4：复制数组"><a href="#eg4：复制数组" class="headerlink" title="eg4：复制数组"></a>eg4：复制数组</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 的写法</span></span><br><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = a1.<span class="title function_">concat</span>();</span><br><span class="line"></span><br><span class="line">a2[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">a1 <span class="comment">// [1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">const</span> a2 = [...a1];</span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">const</span> [...a2] = a1;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="eg5：合并数组"><a href="#eg5：合并数组" class="headerlink" title="eg5：合并数组"></a>eg5：合并数组</h3><p>这两种方法属于浅拷贝</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">'a'</span>, <span class="string">'b'</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="string">'d'</span>, <span class="string">'e'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5 的合并数组</span></span><br><span class="line">arr1.<span class="title function_">concat</span>(arr2, arr3);</span><br><span class="line"><span class="comment">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的合并数组</span></span><br><span class="line">[...arr1, ...arr2, ...arr3]</span><br><span class="line"><span class="comment">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="es6：与解构赋值结合"><a href="#es6：与解构赋值结合" class="headerlink" title="es6：与解构赋值结合"></a>es6：与解构赋值结合</h3><p>扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line">a = list[<span class="number">0</span>], rest = list.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line">[a, ...rest] = list</span><br></pre></td></tr></tbody></table></figure>

<h2 id="1-扩展运算符"><a href="#1-扩展运算符" class="headerlink" title="1. 扩展运算符"></a>1. 扩展运算符</h2><p>只有函数调用时，扩展运算符才可以放在圆括号中，否则会报错。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">(...[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Unexpected number</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((...[<span class="number">1</span>, <span class="number">2</span>]))</span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Unexpected number</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="comment">// 1 2</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-替代函数的-apply-方法"><a href="#2-替代函数的-apply-方法" class="headerlink" title="2. 替代函数的 apply() 方法"></a>2. 替代函数的 apply() 方法</h2><p>不再需要<code>apply()</code>方法将数组转为函数的参数</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 的写法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x, y, z</span>) {</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">f.<span class="title function_">apply</span>(<span class="literal">null</span>, args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的写法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x, y, z</span>) {</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="title function_">f</span>(...args);</span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-字符串"><a href="#3-字符串" class="headerlink" title="3. 字符串"></a>3. 字符串</h2><p>扩展运算符还可以将字符串转为真正的数组。</p>
<p>能够正确识别四个字节的 Unicode 字符。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">[...<span class="string">'hello'</span>]</span><br><span class="line"><span class="comment">// [ "h", "e", "l", "l", "o" ]</span></span><br><span class="line"></span><br><span class="line"><span class="string">'x\uD83D\uDE80y'</span> <span class="comment">// x🚀y</span></span><br><span class="line"><span class="string">'x\uD83D\uDE80y'</span>.<span class="property">length</span> <span class="comment">// 4</span></span><br><span class="line">[...<span class="string">'x\uD83D\uDE80y'</span>].<span class="property">length</span> <span class="comment">// 3</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="4-类数组的对象"><a href="#4-类数组的对象" class="headerlink" title="4. 类数组的对象"></a>4. 类数组的对象</h2><p>类数组的对象也可以通过扩展运算符得到数组</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">let arrObj = {</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h1 id="脚本技巧"><a href="#脚本技巧" class="headerlink" title="脚本技巧"></a>脚本技巧</h1><h2 id="获取子节点"><a href="#获取子节点" class="headerlink" title="获取子节点"></a>获取子节点</h2><p>使用<code>document.getElementsByClassName().childNodes</code>可以获取子节点的列表</p>
<p>例：全选复选框</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> divs = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">'board-item'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> div <span class="keyword">of</span> divs){</span><br><span class="line">    div.<span class="property">childNodes</span>[<span class="number">0</span>].<span class="property">checked</span> = <span class="literal">true</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// div.childNodes返回的结果：NodeList(2) [input, span]</span></span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试速记</title>
    <url>//2023/05/25/JavaScript%E9%80%9F%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="1-this"><a href="#1-this" class="headerlink" title="1. this"></a>1. this</h1><ol>
<li>箭头函数没有作用域，this 指向上一级</li>
</ol>
<h1 id="2-闭包"><a href="#2-闭包" class="headerlink" title="2. 闭包"></a>2. 闭包</h1><p><strong>为什么使用闭包？</strong></p>
<ol>
<li>避免变量被污染</li>
<li>私有化</li>
<li>保存变量，常驻内存</li>
</ol>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">;(<span class="keyword">function</span> <span class="title function_">fn</span> () {</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">30</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">a</span> () {}</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> {}</span><br><span class="line">})()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前的a与闭包里的a不冲突</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">15</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>使用场景</strong></p>
<ol>
<li>防抖和节流中也会用到闭包</li>
<li>库的封装（保证数据私有性）</li>
</ol>
<p><strong>例子</strong></p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 计数器</span></span><br><span class="line"><span class="comment">// 闭包应用 =&gt; 处理私有数据</span></span><br><span class="line"><span class="keyword">let</span> makeCounter = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">let</span> privateCounter = <span class="number">0</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">changeBy</span> (val) {</span><br><span class="line">    privateCounter += val</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="attr">increment</span>: <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">      <span class="title function_">changeBy</span>(<span class="number">1</span>)</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">decrement</span>: <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">      <span class="title function_">changeBy</span>(-<span class="number">1</span>)</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">      <span class="keyword">return</span> privateCounter</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-1-匿名自执行函数"><a href="#2-1-匿名自执行函数" class="headerlink" title="2.1 匿名自执行函数"></a>2.1 匿名自执行函数</h2><p><strong>特点</strong></p>
<ol>
<li>自执行 =&gt; 单例模式</li>
<li>防止变量污染</li>
</ol>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">;(<span class="keyword">function</span> (<span class="params"><span class="variable language_">window</span></span>) {})(<span class="variable language_">window</span>)</span><br></pre></td></tr></tbody></table></figure>

<p><strong>应用</strong></p>
<p>jQuery</p>
<p>以下代码尝试封装 jQuery</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"><span class="variable language_">window</span></span>){</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">$</span> = jquery = <span class="keyword">function</span>(<span class="params">nodeSelector</span>){</span><br><span class="line">        <span class="keyword">let</span> nodes = {};</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> nodeSelector === <span class="string">'string'</span>){</span><br><span class="line">            <span class="keyword">let</span> temp = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(nodeSelector);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; temp.<span class="property">length</span>; i++){</span><br><span class="line">                nodes[i] = temp[i];</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 类数组</span></span><br><span class="line">            nodes.<span class="property">length</span> = temp.<span class="property">length</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">"必须输入字符串"</span>)</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟添加css类方法</span></span><br><span class="line">        nodes.<span class="property">addClass</span> = <span class="keyword">function</span> (<span class="params">classes</span>){</span><br><span class="line">            <span class="keyword">let</span> className = <span class="keyword">class</span>.<span class="title function_">split</span>(<span class="string">" "</span>);</span><br><span class="line">            className.<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span> =&gt;</span> {</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nodes.<span class="property">length</span>; i++){</span><br><span class="line">                    nodes[i].<span class="property">classList</span>.<span class="title function_">add</span>(value)</span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟设置text方法</span></span><br><span class="line">        nodes.<span class="property">setText</span> = <span class="keyword">function</span> (<span class="params">text</span>){</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nodes.<span class="property">length</span>; i++){</span><br><span class="line">                nodes[i].<span class="property">textContent</span> = text;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">})(<span class="variable language_">window</span>)</span><br></pre></td></tr></tbody></table></figure>

<p>优化上述代码</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> $ = (jquery = (<span class="keyword">function</span> (<span class="params"><span class="variable language_">window</span></span>) {</span><br><span class="line">  <span class="keyword">let</span> jquery = <span class="keyword">function</span> (<span class="params">nodeSelector</span>) {</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">nodes</span> = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(nodeSelector)</span><br><span class="line">  }</span><br><span class="line">  jquery.<span class="property"><span class="keyword">prototype</span></span> = {</span><br><span class="line">    <span class="attr">each</span>: <span class="keyword">function</span> (<span class="params">callback</span>) {</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">nodes</span>.<span class="property">length</span>; i++) {</span><br><span class="line">        callback.<span class="title function_">call</span>(<span class="variable language_">this</span>, i, <span class="variable language_">this</span>.<span class="property">nodes</span>[i])</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">addClass</span>: <span class="keyword">function</span> (<span class="params">classes</span>) {</span><br><span class="line">      <span class="keyword">let</span> className = classes.<span class="title function_">split</span>(<span class="string">' '</span>)</span><br><span class="line">      className.<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span> =&gt;</span> {</span><br><span class="line">        <span class="comment">// for(let i = 0; i &lt; nodes.length; i++){</span></span><br><span class="line">        <span class="comment">//     nodes[i].classList.add(value)</span></span><br><span class="line">        <span class="comment">// }</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params">index, obj</span>) {</span><br><span class="line">          obj.<span class="property">classList</span>.<span class="title function_">add</span>(value)</span><br><span class="line">        })</span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">setText</span>: <span class="keyword">function</span> (<span class="params">text</span>) {</span><br><span class="line">      <span class="comment">// for(let i = 0; i &lt; nodes.length; i++){</span></span><br><span class="line">      <span class="comment">//     nodes[i].textContent = text;</span></span><br><span class="line">      <span class="comment">// }</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params">index, obj</span>) {</span><br><span class="line">        obj.<span class="property">textContent</span> = text</span><br><span class="line">      })</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">nodeSelector</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">jquery</span>(nodeSelector)</span><br><span class="line">  }</span><br><span class="line">})())</span><br></pre></td></tr></tbody></table></figure>

<p>代码解释：这段代码采用了一个立即执行函数表达式（IIFE），它返回一个函数，这个函数又返回一个新的对象。这里的第一个 <code>return</code> 语句是为了返回这个函数，以便在代码中使用 <code>$</code> 或 <code>jquery</code> 来创建一个<strong>新</strong>的对象。第二个 <code>return</code> 语句是为了确保每次调用 <code>$</code> 或 <code>jquery</code> 时都会返回一个新的对象，而不是返回<strong>同一个</strong>对象的引用。这样可以避免多个地方同时对同一个对象进行操作时产生的副作用。</p>
<p>再次优化</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> $ = (jQuery = (<span class="keyword">function</span> (<span class="params"><span class="variable language_">window</span></span>) {</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Query</span> (dom, selector) {</span><br><span class="line">    <span class="keyword">let</span> i,</span><br><span class="line">      len = dom ? dom.<span class="property">length</span> : <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">      <span class="variable language_">this</span>[i] = dom[i]</span><br><span class="line">    }</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> = len</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">selector</span> = selector || <span class="string">''</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Z</span> (elements, selector) {</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Query</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, elements, selector)</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">qsa</span> (element, selector) {</span><br><span class="line">    <span class="keyword">return</span> element.<span class="title function_">querySelectorAll</span>(selector)</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  Z.<span class="property"><span class="keyword">prototype</span></span> = {</span><br><span class="line">    each (callback) {</span><br><span class="line">      ;[].<span class="property">every</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="keyword">function</span> (<span class="params">el, index</span>) {</span><br><span class="line">        <span class="keyword">return</span> callback.<span class="title function_">call</span>(el, index, el)</span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">    find (selector) {</span><br><span class="line">      <span class="keyword">let</span> doms = []</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params">index, el</span>) {</span><br><span class="line">        <span class="keyword">let</span> childs = <span class="variable language_">this</span>.<span class="title function_">querySelectorAll</span>(selector)</span><br><span class="line">        doms.<span class="title function_">push</span>(...childs)</span><br><span class="line">      })</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">Z</span>(doms, selector)</span><br><span class="line">    },</span><br><span class="line">    eq (i) {</span><br><span class="line">      <span class="keyword">let</span> doms = []</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params">index, el</span>) {</span><br><span class="line">        <span class="keyword">if</span> (i == index) {</span><br><span class="line">          doms.<span class="title function_">push</span>(<span class="variable language_">this</span>)</span><br><span class="line">        }</span><br><span class="line">      })</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">Z</span>(doms, <span class="variable language_">this</span>.<span class="property">selector</span>)</span><br><span class="line">    },</span><br><span class="line">    remove () {</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params">index, el</span>) {</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">remove</span>()</span><br><span class="line">      })</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">isFunction</span> (value) {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> value == <span class="string">'function'</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  $.isFunction = isFunction</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> $</span><br><span class="line">})())</span><br></pre></td></tr></tbody></table></figure>

<h1 id="3-空对象"><a href="#3-空对象" class="headerlink" title="3. 空对象"></a>3. 空对象</h1><p><code>let obj = Object.create(null)</code>与<code>let obj2 = {}</code>的区别</p>
<ol>
<li><code>obj</code>没有原型链，<code>obj2</code>有<code>__proto__</code></li>
<li>使用<code>obj</code>来存数据，运行效率比<code>obj2</code>更快，因为<code>obj</code>没有原型链，找不到数据不用向上变量原型链</li>
</ol>
<h1 id="4-事件委托"><a href="#4-事件委托" class="headerlink" title="4. 事件委托"></a>4. 事件委托</h1><p>解释：如果要作用到当前节点，可以作用到上一层节点中，用上层节点进行委托。比如<code>&lt;li&gt;</code>标签有点击事件，可以使用<code>&lt;ul&gt;</code>标签（当前<code>&lt;li&gt;</code>标签的上层）接收点击事件，作用时，判断是不是<code>&lt;li&gt;</code>标签即可。</p>
<p><strong>例子</strong></p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ul = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'ul'</span>)</span><br><span class="line">ul.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">event</span>) {</span><br><span class="line">  event = event || <span class="variable language_">window</span>.<span class="property">event</span></span><br><span class="line">  <span class="keyword">let</span> target = event.<span class="property">target</span></span><br><span class="line">  <span class="comment">// 可以通过判断event target的nodeName是不是li标签，nodeName规定大写</span></span><br><span class="line">  <span class="keyword">if</span> (target.<span class="property">nodeName</span> == <span class="string">'LI'</span>) {</span><br><span class="line">    <span class="title function_">alert</span>(target.<span class="property">innerHTML</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="5-原型链"><a href="#5-原型链" class="headerlink" title="5. 原型链"></a>5. 原型链</h1><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b36a129a39b498a8a5c5061f754865f~tplv-k3u1fbpfcp-watermark.image" alt="5c486425000107c811760468[1].jpg"></p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6fb957b6e052425cb7e20567cb2a8933~tplv-k3u1fbpfcp-watermark.image" alt="822e1844346f4694a2e04e22f6fa9fbc[1].png"></p>
<h1 id="6-对象"><a href="#6-对象" class="headerlink" title="6. 对象"></a>6. 对象</h1><p>可以在对象中使用方括号获取变量的值作为键</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user1 = <span class="string">'John'</span></span><br><span class="line"><span class="keyword">let</span> obj = {</span><br><span class="line">  <span class="attr">user1</span>: { <span class="attr">js</span>: <span class="number">100</span>, <span class="attr">css</span>: <span class="number">60</span> }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 输出 {user1: {…}}</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = {</span><br><span class="line">  [user1]: { <span class="attr">js</span>: <span class="number">100</span>, <span class="attr">css</span>: <span class="number">60</span> }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 输出 {John: {…}}</span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="7-与-的区别"><a href="#7-与-的区别" class="headerlink" title="7. ??与||的区别"></a>7. ??与||的区别</h1><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="literal">undefined</span> ?? <span class="string">'default'</span> <span class="comment">// x = 'default'</span></span><br><span class="line"><span class="keyword">const</span> y = <span class="literal">null</span> ?? <span class="string">'default'</span> <span class="comment">// y = 'default'</span></span><br><span class="line"><span class="keyword">const</span> z = <span class="string">'value'</span> ?? <span class="string">'default'</span> <span class="comment">// z = 'value'</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">''</span> ?? <span class="string">'default'</span> <span class="comment">// a = ''</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="string">''</span> || <span class="string">'default'</span> <span class="comment">// b = 'default'</span></span><br></pre></td></tr></tbody></table></figure>

<p>|| 只会在左边的值为假值时返回右边的值 (0, ‘’, undefined, null, false 等都为假值)</p>
<p>?? 是在左边的值为 undefined 或者 null 时才会返回右边的值</p>
<h1 id="8-前端性能优化"><a href="#8-前端性能优化" class="headerlink" title="8. 前端性能优化"></a>8. 前端性能优化</h1><h2 id="8-1-路由懒加载"><a href="#8-1-路由懒加载" class="headerlink" title="8.1 路由懒加载"></a>8.1 路由懒加载</h2><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 通过webpackChunkName设置分割后代码块的名字</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "home" */</span> <span class="string">'@/views/home/index.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MetricGroup</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "metricGroup" */</span> <span class="string">'@/views/metricGroup/index.vue'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'home'</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/metricGroup'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'metricGroup'</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">MetricGroup</span></span><br><span class="line">  }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>

<p><strong>懒加载前提的实现</strong>：ES6 的动态地加载模块——<code>import()</code></p>
<h2 id="8-2-组件懒加载"><a href="#8-2-组件懒加载" class="headerlink" title="8.2 组件懒加载"></a>8.2 组件懒加载</h2><p>只有使用到该组件时，才会加载对应的文件</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">dialogInfo</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "dialogInfo" */</span> <span class="string">'@/components/dialogInfo'</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'homeView'</span>,</span><br><span class="line">  <span class="attr">components</span>: {</span><br><span class="line">    dialogInfo</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>使用场景</strong></p>
<ol>
<li>该页面的 JS 文件<strong>体积大</strong>，导致页面打开慢，可以通过组件懒加载进行资源拆分，利用浏览器并行下载资源，提升下载速度（比如首页）</li>
<li>该组件不是一进入页面就展示，需要一定<strong>条件</strong>下才触发（比如弹框组件）</li>
<li>该组件<strong>复用</strong>性高，很多页面都有引入，利用组件懒加载抽离出该组件，一方面可以很好利用缓存，同时也可以减少页面的 JS 文件大小（比如表格组件、图形组件等）</li>
</ol>
<h2 id="8-3-合理使用-Tree-shaking"><a href="#8-3-合理使用-Tree-shaking" class="headerlink" title="8.3 合理使用 Tree shaking"></a>8.3 合理使用 Tree shaking</h2><p>Tree shaking 的理解：是一种用于优化 JavaScript 代码的技术，消除无用的 JS 代码，减少代码体积。</p>
<p>如果代码存在副作用（如修改全局变量或调用接口等），那么这部分代码是不会被删除的。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// util.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">targetType</span> (target) {</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span></span><br><span class="line">    .<span class="title function_">call</span>(target)</span><br><span class="line">    .<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">toLowerCase</span>()</span><br><span class="line">}</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">deepClone</span> (target) {</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(target))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>项目中只使用了 targetType 方法，但未使用 deepClone 方法，项目打包后，deepClone 方法不会被打包到项目里</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// util.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  targetType (target) {</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span></span><br><span class="line">      .<span class="title function_">call</span>(target)</span><br><span class="line">      .<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>)</span><br><span class="line">      .<span class="title function_">toLowerCase</span>()</span><br><span class="line">  },</span><br><span class="line">  deepClone (target) {</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(target))</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入并使用</span></span><br><span class="line"><span class="keyword">import</span> util <span class="keyword">from</span> <span class="string">'../util'</span></span><br><span class="line">util.<span class="title function_">targetType</span>(<span class="literal">null</span>)</span><br></pre></td></tr></tbody></table></figure>

<p><strong>无法通过静态分析判断出一个对象的哪些变量未被使用，所以 tree-shaking 只对使用 export 导出的变量生效</strong></p>
<h2 id="8-4-骨架屏优化白屏时长"><a href="#8-4-骨架屏优化白屏时长" class="headerlink" title="8.4 骨架屏优化白屏时长"></a>8.4 骨架屏优化白屏时长</h2><p>使用骨架屏优化白屏时间</p>
<p><strong>骨架屏插件</strong>：vue-skeleton-webpack-plugin</p>
<h2 id="8-5-长列表虚拟滚动"><a href="#8-5-长列表虚拟滚动" class="headerlink" title="8.5 长列表虚拟滚动"></a>8.5 长列表虚拟滚动</h2><p>通过虚拟滚动列表，即数据滚动，dom 元素固定个数不再新增</p>
<p><strong>虚拟滚动的插件</strong>：vue-virtual-scroller、vue-virtual-scroll-list、react-tiny-virtual-list、react-virtualized</p>
<h2 id="8-6-Web-Worker-优化长任务"><a href="#8-6-Web-Worker-优化长任务" class="headerlink" title="8.6 Web Worker 优化长任务"></a>8.6 Web Worker 优化长任务</h2><p>GUI 渲染线程与 JS 引擎线程是互斥的关系，当页面中有很多长任务时，会造成页面 UI 阻塞，出现界面卡顿、掉帧等情况</p>
<p>（通信时长：新建一个 web worker 时, 浏览器会加载对应的 worker.js 资源）</p>
<p><strong>当任务的运算时长 - 通信时长 &gt; 50ms，推荐使用 Web Worker</strong></p>
<h2 id="8-7-requestAnimationFrame-制作动画"><a href="#8-7-requestAnimationFrame-制作动画" class="headerlink" title="8.7 requestAnimationFrame 制作动画"></a>8.7 requestAnimationFrame 制作动画</h2><p><code>requestAnimationFrame</code> 是浏览器专门为动画提供的 API，它的刷新频率与显示器的频率保持一致，使用该 api 可以解决用 setTimeout/setInterval 制作动画卡顿的情况</p>
<p><strong>setTimeout/setInterval、requestAnimationFrame 三者的区别</strong>：</p>
<p>1）引擎层面</p>
<p>setTimeout/setInterval 属于 <code>JS引擎</code>，requestAnimationFrame 属于 <code>GUI引擎</code></p>
<p><code>JS引擎与GUI引擎</code>是互斥的，也就是说 GUI 引擎在渲染时会阻塞 JS 引擎的计算</p>
<p>2）时间是否准确</p>
<p>requestAnimationFrame 刷新频率是固定且准确的，但 setTimeout/setInterval 是宏任务，根据事件轮询机制，其他任务会阻塞或延迟 js 任务的执行，会出现定时器不准的情况</p>
<p>3）性能层面</p>
<p>当页面被隐藏或最小化时，setTimeout/setInterval 定时器仍会在后台执行动画任务，而使用 requestAnimationFrame 当页面处于未激活的状态下，屏幕刷新任务会被系统暂停</p>
<h2 id="8-8-JS-的-6-种加载方式"><a href="#8-8-JS-的-6-种加载方式" class="headerlink" title="8.8 JS 的 6 种加载方式"></a>8.8 JS 的 6 种加载方式</h2><h3 id="8-8-1-正常模式"><a href="#8-8-1-正常模式" class="headerlink" title="8.8.1 正常模式"></a>8.8.1 正常模式</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">'index.js'</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>这种情况下 JS 会阻塞 dom 渲染，浏览器必须等待 index.js 加载和执行完成后才能去做其它事情</p>
<h3 id="8-8-2-async-模式"><a href="#8-8-2-async-模式" class="headerlink" title="8.8.2 async 模式"></a>8.8.2 async 模式</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">'index.js'</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>async 模式下，它的加载是异步的，JS 不会阻塞 DOM 的渲染，async 加载是无顺序的，当它加载结束，JS 会立即执行</p>
<p><strong>使用场景</strong>：若该 JS 资源与 DOM 元素没有依赖关系，也不会产生其他资源所需要的数据时，可以使用 async 模式，比如埋点统计</p>
<p>（埋点统计：通过一定的方式记录用户行为和操作，将这些数据发送到服务器进行处理和分析，从而了解用户的行为习惯、流量来源、使用习惯等信息。页面 PV（Page View）统计、点击事件统计、表单提交统计、Ajax 请求统计、错误信息统计）</p>
<h3 id="8-8-3-defer-模式"><a href="#8-8-3-defer-模式" class="headerlink" title="8.8.3 defer 模式"></a>8.8.3 defer 模式</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script defer src=<span class="string">'index.js'</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>defer 模式下，JS 的加载也是异步的，defer 资源会在 <code>DOMContentLoaded</code> 执行之前，并且 defer 是有顺序的加载</p>
<p>如果有多个设置了 defer 的 script 标签存在，则会按照引入的前后顺序执行，即便是后面的 script 资源先返回</p>
<p><strong>应用场景</strong></p>
<p>控制资源加载顺序</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script defer src=<span class="string">"vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">"element-ui.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="8-8-4-module-模式"><a href="#8-8-4-module-模式" class="headerlink" title="8.8.4 module 模式"></a>8.8.4 module 模式</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">'module'</span>&gt;<span class="keyword">import</span> {a} <span class="keyword">from</span> <span class="string">'./a.js'</span>&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>浏览器会对其内部的<code>import</code>引用发起 HTTP 请求，获取模块内容。这时 script 的行为会像是 defer 一样，在后台下载，并且等待 DOM 解析</p>
<h3 id="8-8-5-preload"><a href="#8-8-5-preload" class="headerlink" title="8.8.5 preload"></a>8.8.5 preload</h3><p>link 标签的 preload 属性：用于提前加载一些需要的依赖，这些资源会优先加载</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"preload"</span> <span class="keyword">as</span>=<span class="string">"script"</span> href=<span class="string">"index.js"</span>&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>特点</strong></p>
<ol>
<li>preload 加载的资源是在浏览器渲染机制之前进行处理的，并且不会阻塞 onload 事件；</li>
<li>preload 加载的 JS 脚本其加载和执行的过程是分离的，即 preload 会预加载相应的脚本代码，待到需要时自行调用；</li>
</ol>
<h3 id="8-8-6-prefetch"><a href="#8-8-6-prefetch" class="headerlink" title="8.8.6 prefetch"></a>8.8.6 prefetch</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"prefetch"</span> <span class="keyword">as</span>=<span class="string">"script"</span> href=<span class="string">"index.js"</span>&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>prefetch 是利用浏览器的空闲时间，加载页面将来可能用到的资源的一种机制；通常可以用于加载其他页面（非首页）所需要的资源，以便加快后续页面的打开速度</p>
<h2 id="8-9-图片的优化"><a href="#8-9-图片的优化" class="headerlink" title="8.9 图片的优化"></a>8.9 图片的优化</h2><h3 id="8-9-1-图片的动态裁剪"><a href="#8-9-1-图片的动态裁剪" class="headerlink" title="8.9.1 图片的动态裁剪"></a>8.9.1 图片的动态裁剪</h3><p>只需在图片的 url 上动态添加参数，就可以得到需要的尺寸大小</p>
<h3 id="8-9-2-图片的懒加载"><a href="#8-9-2-图片的懒加载" class="headerlink" title="8.9.2 图片的懒加载"></a>8.9.2 图片的懒加载</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">"img"</span>).<span class="property">length</span>; <span class="comment">// 获取图片数量</span></span><br><span class="line">    <span class="keyword">let</span> imgs = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">"img"</span>); <span class="comment">// 获取图片dom元素</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>; <span class="comment">// 图片计数，防止加载过的图片重新加载</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">lazyload</span>(); <span class="comment">// 执行第一遍，先把看到的图片先加载</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">onscroll</span> = lazyload; <span class="comment">// 为网页滑动事件绑定函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">lazyload</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">let</span> deviceHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>; <span class="comment">// 获取设备页面的高度</span></span><br><span class="line">        <span class="keyword">let</span> scrollTop =</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>; <span class="comment">// 获取当前滑动的距离</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = count; i &lt; n; i++) {</span><br><span class="line">            <span class="comment">// 从count开始遍历，避免多次执行</span></span><br><span class="line">            <span class="keyword">if</span> (imgs[i].<span class="property">offsetTop</span> &lt; deviceHeight + scrollTop) {</span><br><span class="line">                <span class="comment">// 若当前图片距离页面顶部的高度小于滑条滑过的距离和页面高度的和，证明该图片已经在可视区域内，执行加载</span></span><br><span class="line">                <span class="keyword">if</span> (imgs[i].<span class="title function_">getAttribute</span>(<span class="string">"src"</span>) == <span class="string">"./img/loading.gif"</span>) {</span><br><span class="line">                    imgs[i].<span class="property">src</span> = imgs[i].<span class="title function_">getAttribute</span>(<span class="string">"data-src"</span>);</span><br><span class="line">                }</span><br><span class="line">                count = i + <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>插件推荐</strong>：vue-lazyload</p>
<h3 id="8-9-3-使用字体图标"><a href="#8-9-3-使用字体图标" class="headerlink" title="8.9.3 使用字体图标"></a>8.9.3 使用字体图标</h3><p><strong>字体图标的优点</strong>：</p>
<ol>
<li>轻量级：一个图标字体要比一系列的图像要小。一旦字体加载了，图标就会马上渲染出来，减少了 http 请求</li>
<li>灵活性：可以随意的改变颜色、产生阴影、透明效果、旋转等</li>
<li>兼容性：几乎支持所有的浏览器，请放心使用</li>
</ol>
<h3 id="8-9-4-图片转-base64-格式"><a href="#8-9-4-图片转-base64-格式" class="headerlink" title="8.9.4 图片转 base64 格式"></a>8.9.4 图片转 base64 格式</h3><p>将小图片转换为 base64 编码字符串，并写入 HTML 或者 CSS 中，减少 http 请求</p>
<p><strong>优缺点</strong>：</p>
<p>1）它处理的往往是非常小的图片，因为 Base64 编码后，图片大小会膨胀为原文件的 4/3，如果对大图也使用 Base64 编码，后者的体积会明显增加，即便减少了 http 请求，也无法弥补这庞大的体积带来的性能开销，得不偿失；（空间换时间）</p>
<p>2）在传输非常小的图片的时候，Base64 带来的文件体积膨胀、以及浏览器解析 Base64 的时间开销，与它节省掉的 http 请求开销相比，可以忽略不计，这时候才能真正体现出它在性能方面的优势</p>
<h1 id="9-函数表达式、函数声明"><a href="#9-函数表达式、函数声明" class="headerlink" title="9. 函数表达式、函数声明"></a>9. 函数表达式、函数声明</h1><blockquote>
<ol>
<li>变量提升</li>
<li>函数声明提升</li>
</ol>
</blockquote>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"foo1"</span>)</span><br><span class="line">}</span><br><span class="line"><span class="title function_">foo</span>() </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"foo2"</span>)</span><br><span class="line">}</span><br><span class="line"><span class="title function_">foo</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"foo1"</span>)</span><br><span class="line">}</span><br><span class="line"><span class="title function_">foo</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"foo2"</span>)</span><br><span class="line">}</span><br><span class="line"><span class="title function_">foo</span>()	</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo1</span></span><br><span class="line"><span class="comment">// foo2</span></span><br><span class="line"><span class="comment">// foo2</span></span><br><span class="line"><span class="comment">// foo2</span></span><br></pre></td></tr></tbody></table></figure>

<p>表达式提升：无论在哪个位置使用var声明一个变量，该变量都会在整段程序最上端，因此在使用var声明他之前调用他，会显示undefined</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title function_">foo</span>()</span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"foo1"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uncaught TypeError: foo is not a function</span></span><br></pre></td></tr></tbody></table></figure>

<p>函数声明提升：函数声明会在任何代码执行之前先被读取并添加到执行上下文，如果出现重复的函数声明，最后的声明会替换前面的声明，因此<strong>无论哪个位置</strong>执行该函数都会执行最后声明的函数内容</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"foo1"</span>)</span><br><span class="line">}</span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// foo2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"foo2"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="10-valueOf与toString的区别"><a href="#10-valueOf与toString的区别" class="headerlink" title="10. valueOf与toString的区别"></a>10. valueOf与toString的区别</h1><p>valueOf()方法返回对象的<strong>原始值</strong>。例如，当使用一个对象进行数学运算时，JavaScript会自动调用valueOf()方法来获取对象的原始值进行计算。 </p>
<p>toString()方法返回对象的<strong>字符串</strong>表示。它将对象转换为字符串，并返回该字符串。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numObj = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">valueOf</span>()); <span class="comment">// 输出：10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toString</span>()); <span class="comment">// 输出："10"</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numObj.<span class="title function_">valueOf</span>()); <span class="comment">// 输出：10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numObj.<span class="title function_">toString</span>()); <span class="comment">// 输出："10"</span></span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端回顾</title>
    <url>//2023/05/25/JavaScript%E9%9D%A2%E8%AF%95%E5%9B%9E%E9%A1%BE/</url>
    <content><![CDATA[<html><head></head><body><h1 id="隐藏页面中某个元素的方法"><a href="#隐藏页面中某个元素的方法" class="headerlink" title="隐藏页面中某个元素的方法"></a>隐藏页面中某个元素的方法</h1><p>1.opacity：0，该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定 一些事件，如 click 事件，那么点击该区域，也能触发点击事件的</p>
<p>2.visibility：hidden，该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已 经绑定的事件 ，隐藏对应元素，在文档布局中仍保留原来的空间（重绘）</p>
<p>3.display：none，把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素。 不显示对应的元素，在文档布局中不再分配空间（回流+重绘）</p>
<h1 id="CSS-选择器及优先级"><a href="#CSS-选择器及优先级" class="headerlink" title="CSS 选择器及优先级"></a>CSS 选择器及优先级</h1><p><strong>选择器</strong></p>
<ol>
<li>id 选择器(#myid)</li>
<li>类选择器(.myclass)</li>
<li>属性选择器(a[rel=”external”])</li>
<li>伪类选择器(a:hover, li:nth-child)</li>
<li>标签选择器(div, h1,p)</li>
<li>相邻选择器（h1 + p）</li>
<li>子选择器(ul &gt; li)</li>
<li>后代选择器(li a)</li>
<li>通配符选择器(*)</li>
</ol>
<p><strong>优先级：</strong></p>
<ul>
<li><code>!important</code></li>
<li>内联样式（1000）</li>
<li>ID 选择器（0100）</li>
<li>类选择器/属性选择器/伪类选择器（0010）</li>
<li>元素选择器/伪元素选择器（0001）</li>
<li>关系选择器/通配符选择器（0000）</li>
</ul>
<h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b36a129a39b498a8a5c5061f754865f~tplv-k3u1fbpfcp-watermark.image" alt="5c486425000107c811760468[1].jpg"></p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6fb957b6e052425cb7e20567cb2a8933~tplv-k3u1fbpfcp-watermark.image" alt="822e1844346f4694a2e04e22f6fa9fbc[1].png"></p>
<h1 id="前端性能优化手段"><a href="#前端性能优化手段" class="headerlink" title="前端性能优化手段"></a>前端性能优化手段</h1><p>加：少请求（4 个）、精灵图、懒加载、缓存、压缩代码/图片（SVG 图片） 执：C 头 J 尾、避免 img、iframe 的 src 为空、img 修改大小 染：少 dom、用 requestAnimationFrame 替 setTimeout、5 个动画用 css 以上用 Canvas、节流防抖、gpu 加速 样：避免标签 style、float、0 丢单位、 脚：缓存 length</p>
<p>前端性能优化手段从以下几个方面入手：加载优化、执行优化、渲染优化、样式优化、脚本优化</p>
<ol>
<li>加载优化:减少 HTTP<strong>请求</strong>、<strong>缓存</strong>资源、<strong>压缩</strong>代码、无阻塞、<strong>首屏加载</strong>、<strong>按需加载</strong>、<strong>预加载</strong>、<strong>压缩图像</strong>、减少 Cookie、<strong>避免重定向</strong>、异步加载<strong>第三方</strong>资源</li>
<li>执行优化：CSS 写在头部，JS 写在尾部并异步、避免 img、iframe 等的<strong>src</strong>为空、尽量避免重置图像大小、图像尽量避免使用 DataURL</li>
<li>渲染优化：设置 viewport、减少<strong>DOM</strong>节点、优化动画、优化高频事件、<strong>GPU</strong>加速</li>
<li>样式优化：避免在 HTML 中书写<strong>style</strong>、避免 CSS 表达式、移除 CSS 空规则、正确使用<strong>display</strong>：display、不滥用<strong>float</strong>等</li>
<li>脚本优化：减少重绘和回流、缓存 DOM 选择与计算、缓存.<strong>length</strong>的值、尽量使用事件代理、尽量使用<strong>id 选择器</strong>、touch 事件优化</li>
</ol>
<h1 id="进程、线程"><a href="#进程、线程" class="headerlink" title="进程、线程"></a>进程、线程</h1><p>什么是进程？</p>
<p>进程：是 cpu 分配资源的最小单位；（是能拥有资源和独立运行的最小单位）</p>
<p>什么是线程？</p>
<p>线程：是 cpu 调度的最小单位；（线程是建立在进程的基础上的一次程序运行单位，一个进程中可以有多个线程）</p>
<h1 id="webpack-和-gulp-的区别"><a href="#webpack-和-gulp-的区别" class="headerlink" title="webpack 和 gulp 的区别"></a>webpack 和 gulp 的区别</h1><p>Gulp：</p>
<p>Gulp 是一个自动化构建工具，强调的是前端开发的流程，通过配置一系列的 task，定义 task 处理的事物，然后定义执行顺序，来让 Gulp 执行 task，从而构建前端项目的流程，说白了就是用来打包项目。</p>
<p>不管做什么功能，都有一个统一的接口进行管理，必须去注册一个任务，然后去执行，这也是它的特点之一，即“任务化”。</p>
<p>WebPack：</p>
<p>WebPack 是一个前端模块化方案，侧重模块打包，把开发中的所有资源（图片、js 文件、css 文件等）都看成模块，通过 loader（加载器）和 plugins（插件）对资源进行处理，打包成符合生产环境部署的前端资源，Gulp 也可以配置 seajs、requirejs 甚至 webpack 的插件。</p>
<p>它会分析你的项目结构，找到 JS 模块以及那些浏览器不能够直接运行的扩展语言（如：TypeScript 等），然后将其转换和打包为合适的格式供浏览器使用。它最大的优点就是“模块化”（万物皆模块）。</p>
<h1 id="前端安全"><a href="#前端安全" class="headerlink" title="前端安全"></a>前端安全</h1><p>XSS：跨站脚本攻击<br>CSRF：跨站请求伪造<br>iframe 安全</p>
<h1 id="减少-reflow-x2F-repaint"><a href="#减少-reflow-x2F-repaint" class="headerlink" title="减少 reflow/repaint"></a>减少 reflow/repaint</h1><p>定义 css 的 class、dom 属性变量、使用 fixed、table 布局（CCDFT）<br>（1）不要一条一条地修改 DOM 的样式。可以先定义好 css 的 class，然后修改 DOM 的 className。</p>
<p>（2）不要把 DOM 结点的属性值放在一个循环里当成循环里的变量。<br>（3）为动画的 HTML 元件使用 fixed 或 absoult 的 position，那么修改他们的 CSS 是不会 reflow 的。<br>（4）千万不要使用 table 布局。因为可能很小的一个小改动会造成整个 table 的重新布局。(table 及其内部元素除外，它可能需要多次计算才能确定好其在渲染树中节点的属性，通常要花 3 倍于同等元素的时间。这也是为什么我们要避免使用 table 做布局的一个原因。)</p>
<p>（5）不要在布局信息改变的时候做查询（会导致渲染队列强制刷新）</p>
<h1 id="重排和重绘"><a href="#重排和重绘" class="headerlink" title="重排和重绘"></a>重排和重绘</h1><p>重绘(Repaint)：是在一个元素的外观被改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。比如改变某个元素的背景色、文字颜色、边框颜色等等</p>
<p>重绘不一定需要重排（比如颜色的改变），重排必然导致重绘（比如改变网页位置）</p>
<h1 id="ES6-模块与-CommonJS-模块的差异"><a href="#ES6-模块与-CommonJS-模块的差异" class="headerlink" title="ES6 模块与 CommonJS 模块的差异"></a>ES6 模块与 CommonJS 模块的差异</h1><p>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用</p>
<p>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口</p>
<p>CommonJS、AMD、ES6 module</p>
<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。</p>
<p>保护/保存</p>
<h1 id="实现深拷贝方法"><a href="#实现深拷贝方法" class="headerlink" title="实现深拷贝方法"></a>实现深拷贝方法</h1><ol>
<li>采用递归去拷贝所有层级属性</li>
<li>JSON.stringify 和 JSON.parse</li>
<li>函数库 lodash</li>
</ol>
</body></html>]]></content>
      <categories>
        <category>学习记录</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Java</title>
    <url>//2023/05/25/Java%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><p>ThreadLocal直译为线程局部变量</p>
<p><strong>特点</strong></p>
<ol>
<li>只能在自己的线程内访问自己的数据，另外的线程是访问不到其他ThreadLocal的</li>
</ol>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">ThreadLocal&lt;Person&gt; tl = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; {</span><br><span class="line">    SleeperHelper.sleepSecond(<span class="number">1</span>);</span><br><span class="line">    tl.set(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"zhangsan"</span>));</span><br><span class="line">    System.out.println(tl.get());</span><br><span class="line">}).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; {</span><br><span class="line">    SleeperHelper.sleepSecond(<span class="number">2</span>);</span><br><span class="line">    System.out.println(tl.get());</span><br><span class="line">}).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出对象地址</span></span><br><span class="line"><span class="comment">// null</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>应用场景</strong></p>
<ol>
<li>Spring事务处理方案（@Transaction）</li>
<li>存储全局用户登录信息</li>
<li>存储数据库连接，以及Session等信息</li>
</ol>
<h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><h2 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h2><p>内存空间装满了，这时再进入对象，没法分配空间，就会报内存溢出错误（out of memory）</p>
<h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><p>内存还有空余的位置，但是内存中存着一个被强引用指着的对象，该对象在业务逻辑上已经不使用了，但是这个对象又不能被回收，后面的程序也不使用，这就是内存泄漏</p>
<p><strong>内存溢出与内存泄漏的关系</strong>：如果内存泄漏太多，就会引起内存溢出</p>
<h1 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h1><p>Java中4种引用的级别由高到低依次为：强引用 &gt; 软引用 &gt; 弱引用 &gt; 虚引用</p>
<h2 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h2><p>只要强引用存在，垃圾回收器将<strong>永远不会回收</strong>被引用的对象，哪怕内存不足时，JVM也会直接抛出OutOfMemoryError，不会去回收。</p>
<p>如果想中断强引用与对象之间的联系，可以显示的将强引用赋值为null，这样一来，JVM就可以适时的回收对象了。</p>
<p>使用<code>new</code>创建对象时，被创建的对象就是强引用，如<code>Object object = new Object()</code>，其中的object就是一个强引用了。</p>
<h2 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h2><p><strong>“内存不够就回收，内存充足不回收”</strong></p>
<p><strong>“适合做缓存”</strong></p>
<p>在内存足够的时候，软引用对象不会被回收，只有在<strong>内存</strong>不足时，系统则会回收软引用对象，如果回收了软引用对象之后仍然没有足够的内存，才会抛出内存溢出异常。</p>
<p>JDK1.2 之后，用<code>java.lang.ref.SoftReference</code>类来表示软引用。</p>
<p>如果一个对象只具备软引用，如果内存空间足够，那么JVM就不会GC它，如果内存空间不足了，就会GC该对象。 </p>
<p><strong>应用</strong></p>
<ol>
<li>软引用是用来描述一些非必需但仍有用的对象。这种特性常常被用来实现缓存技术，比如网页缓存，图片缓存等。</li>
</ol>
<h2 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h2><p>弱引用的引用强度比软引用要更弱一些，无论内存是否足够，只要 <strong>JVM</strong> 开始进行垃圾回收，那些被弱引用关联的对象都会被回收。</p>
<p>在 JDK1.2 之后，用 <code>java.lang.ref.WeakReference</code> 来表示弱引用。</p>
<p>弱引用的生命周期要比软引用短很多。不过，如果垃圾回收器是一个优先级很低的线程，也不一定会很快就会释放掉软引用的内存。</p>
<p>如果一个对象只具有弱引用，只要JVM的GC线程检测到了，就会立即回收。</p>
<h2 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h2><p>虚引用是最弱的一种引用关系。</p>
<p>在 JDK1.2 之后，用 <code>PhantomReference</code>类来表示，通过查看这个类的源码，发现它只有一个构造函数和一个 get() 方法，而且它的 get() 方法仅仅是返回一个null，也就是说将永远无法通过虚引用来获取对象，虚引用必须要和 <code>ReferenceQueue</code>引用队列一起使用。</p>
<p>如果一个对象只具有虚引用，那么它就和没有任何引用一样，随时会被JVM当作垃圾进行GC。</p>
<p><strong>应用</strong></p>
<ol>
<li>设置虚引用关联的唯一目的，就是能在这个对象被收集器回收时收到一个系统通知</li>
</ol>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">PhantomReference</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PhantomReference</span>(<span class="keyword">new</span> <span class="title class_">A</span>(), referenceQueue); <span class="comment">// 必须配合引用队列一起使用</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>追踪堆外数据</li>
</ol>
<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p>线程池是一种用于管理线程资源的机制，它可以在应用程序启动时创建一定数量的线程，然后将任务提交给线程池进行执行。线程池可以有效地避免线程创建和销毁的开销，提高了线程的复用性和执行效率。 </p>
<p>线程池通常包含两个部分：线程池管理器和工作线程。线程池管理器负责创建、销毁、监控线程池，以及分配任务给工作线程；工作线程则负责执行具体的任务。 </p>
<p><strong>优势</strong>：</p>
<ol>
<li>提高了程序的<strong>响应</strong>速度：使用线程池可以避免线程创建和销毁的开销，从而提高程序的响应速度。</li>
<li>提高了线程的<strong>复用</strong>性：线程池中的线程可以被重复利用，从而提高了线程的复用性。</li>
<li>提高了<strong>执行效率</strong>：线程池可以控制线程的数量，从而避免了过多线程竞争资源的问题，提高了执行效率。</li>
<li>提高了程序的<strong>稳定</strong>性：线程池可以对线程进行统一的管理和监控，从而保证了程序的稳定性和安全性。 总之，线程池是一种非常有用的多线程编程技术，它可以提高程序的性能和稳定性，降低线程创建和销毁的开销，是开发高并发程序的重要手段之一。</li>
</ol>
<p>eg：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 创建线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 提交任务到线程池</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">            <span class="type">Runnable</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WorkerThread</span>(<span class="string">"Task "</span> + (i + <span class="number">1</span>));</span><br><span class="line">            executor.execute(worker);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        executor.shutdown();</span><br><span class="line">        <span class="keyword">while</span> (!executor.isTerminated()) {</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"All tasks completed"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WorkerThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> {</span><br><span class="line">    <span class="keyword">private</span> String taskName;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WorkerThread</span><span class="params">(String taskName)</span> {</span><br><span class="line">        <span class="built_in">this</span>.taskName = taskName;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" Start executing task: "</span> + taskName);</span><br><span class="line">        processTask();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" End executing task: "</span> + taskName);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processTask</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个例子中，我们创建了一个大小为5的线程池，然后提交了10个任务到线程池中。每个任务是一个WorkerThread对象，它实现了Runnable接口，表示它是一个可以在线程池中执行的任务。在每个任务中，我们简单地输出一些信息，并且让线程休眠2秒钟，模拟任务执行的过程。最后，我们关闭了线程池，等待所有任务执行完毕，然后打印一条“所有任务已完成”的消息。</span></span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali笔记</title>
    <url>//2023/12/21/Kali%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="kali的weekly版本与其他版本有什么区别？"><a href="#kali的weekly版本与其他版本有什么区别？" class="headerlink" title="kali的weekly版本与其他版本有什么区别？"></a>kali的weekly版本与其他版本有什么区别？</h1><p>Kali Linux 的 weekly 版本是每周发布的更新版本，其中包含了最新的安全补丁和更新。</p>
<p>它是 Kali Linux 最稳定的版本，但它不如 stable 版本那么稳定。</p>
</body></html>]]></content>
      <tags>
        <tag>kali</tag>
        <tag>Linux</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Miniconda笔记</title>
    <url>//2023/07/27/Miniconda%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="Miniconda介绍"><a href="#Miniconda介绍" class="headerlink" title="Miniconda介绍"></a>Miniconda介绍</h1><p>Miniconda 是一个开源的 Python 和 R 语言的发行版，它包含了conda、Python和R的核心组件以及众多常用的第三方包。Miniconda 的目标是为数据科学和机器学习的开发者提供一个轻量级、易于安装和管理的环境。</p>
<p>Miniconda 的主要特点如下：</p>
<ol>
<li><p>轻量级：Miniconda 只包含了最基本的组件，因此安装文件非常小，便于在不同的计算机和操作系统上进行安装。</p>
</li>
<li><p>易于安装和管理：Miniconda 提供了一个简单的命令行界面，用户可以轻松地创建新的环境、安装所需的包以及管理已安装的包。</p>
</li>
<li><p>跨平台：Miniconda 支持 Windows、macOS 和 Linux 操作系统，方便用户在不同平台上进行开发和实验。</p>
</li>
<li><p>隔离性：通过创建不同的环境，用户可以在不同的项目中使用不同版本的包，避免了包之间的冲突。</p>
</li>
<li><p>依赖管理：Miniconda 使用 Conda 包管理器来管理 Python 和 R 的依赖关系，确保项目的正常运行。</p>
</li>
</ol>
<p>Miniconda 是一个非常实用的工具，尤其适合数据科学和机器学习领域的开发者，可以帮助他们快速搭建一个高效、稳定的开发环境。</p>
<h1 id="配置conda源"><a href="#配置conda源" class="headerlink" title="配置conda源"></a>配置conda源</h1><p>执行命令<code>conda config</code>，在<code>C:\Users\Administrator</code>路径下产生一个<code>.condarc</code>文件，并写入如下内容</p>
<p>阿里镜像（废弃）：</p>
<figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: true</span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.aliyun.com/anaconda/pkgs/free/</span><br><span class="line">  - https://mirrors.aliyun.com/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.aliyun.com/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.aliyun.com/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.aliyun.com/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.aliyun.com/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.aliyun.com/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.aliyun.com/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.aliyun.com/anaconda/cloud</span><br><span class="line">  pytorch-lts: https://mirrors.aliyun.com/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.aliyun.com/anaconda/cloud</span><br><span class="line">envs_dirs: </span><br><span class="line">  - D:\\miniconda3\\envs</span><br></pre></td></tr></tbody></table></figure>

<p>清华镜像</p>
<figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: true</span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  deepmodeling: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/</span><br><span class="line">envs_dirs: </span><br><span class="line">  - D:\\miniconda3\\envs</span><br></pre></td></tr></tbody></table></figure>

<p>注：<code>envs_dirs</code>可以写入python环境安装的位置</p>
<h1 id="修改Miniconda默认环境路径"><a href="#修改Miniconda默认环境路径" class="headerlink" title="修改Miniconda默认环境路径"></a>修改Miniconda默认环境路径</h1><p>执行命令<code>conda config --show</code>查看conda的配置信息</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">add_anaconda_token:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">add_pip_as_python_dependency:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">aggressive_update_packages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ca-certificates</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">certifi</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">openssl</span></span><br><span class="line"><span class="attr">allow_conda_downgrades:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">allow_cycles:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">allow_non_channel_urls:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">allow_softlinks:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">allowlist_channels:</span> []</span><br><span class="line"><span class="attr">always_copy:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">always_softlink:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">always_yes:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">anaconda_upload:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">auto_activate_base:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">auto_stack:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">auto_update_conda:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">bld_path:</span></span><br><span class="line"><span class="attr">changeps1:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">channel_alias:</span> <span class="string">https://conda.anaconda.org</span></span><br><span class="line"><span class="attr">channel_priority:</span> <span class="string">flexible</span></span><br><span class="line"><span class="attr">channel_settings:</span> []</span><br><span class="line"><span class="attr">channels:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">defaults</span></span><br><span class="line"><span class="attr">client_ssl_cert:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">client_ssl_cert_key:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">clobber:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">conda_build:</span> {}</span><br><span class="line"><span class="attr">create_default_packages:</span> []</span><br><span class="line"><span class="attr">croot:</span> <span class="string">C:\Users\Administrator\conda-bld</span></span><br><span class="line"><span class="attr">custom_channels:</span></span><br><span class="line">  <span class="attr">anaconda/pkgs/free:</span> <span class="string">https://mirrors.aliyun.com</span></span><br><span class="line">  <span class="attr">anaconda/pkgs/main:</span> <span class="string">https://mirrors.aliyun.com</span></span><br><span class="line">  <span class="attr">anaconda/pkgs/r:</span> <span class="string">https://mirrors.aliyun.com</span></span><br><span class="line">  <span class="attr">anaconda/pkgs/msys2:</span> <span class="string">https://mirrors.aliyun.com</span></span><br><span class="line">  <span class="attr">conda-forge:</span> <span class="string">https://mirrors.aliyun.com/anaconda/cloud</span></span><br><span class="line">  <span class="attr">msys2:</span> <span class="string">https://mirrors.aliyun.com/anaconda/cloud</span></span><br><span class="line">  <span class="attr">bioconda:</span> <span class="string">https://mirrors.aliyun.com/anaconda/cloud</span></span><br><span class="line">  <span class="attr">menpo:</span> <span class="string">https://mirrors.aliyun.com/anaconda/cloud</span></span><br><span class="line">  <span class="attr">pytorch:</span> <span class="string">https://mirrors.aliyun.com/anaconda/cloud</span></span><br><span class="line">  <span class="attr">pytorch-lts:</span> <span class="string">https://mirrors.aliyun.com/anaconda/cloud</span></span><br><span class="line">  <span class="attr">simpleitk:</span> <span class="string">https://mirrors.aliyun.com/anaconda/cloud</span></span><br><span class="line"><span class="attr">custom_multichannels:</span></span><br><span class="line">  <span class="attr">defaults:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://mirrors.aliyun.com/anaconda/pkgs/free</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://mirrors.aliyun.com/anaconda/pkgs/main</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://mirrors.aliyun.com/anaconda/pkgs/r</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://mirrors.aliyun.com/anaconda/pkgs/msys2</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">default_channels:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.aliyun.com/anaconda/pkgs/free</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.aliyun.com/anaconda/pkgs/main</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.aliyun.com/anaconda/pkgs/r</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.aliyun.com/anaconda/pkgs/msys2</span></span><br><span class="line"><span class="attr">default_python:</span> <span class="number">3.11</span></span><br><span class="line"><span class="attr">default_threads:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">deps_modifier:</span> <span class="string">not_set</span></span><br><span class="line"><span class="attr">dev:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">disallowed_packages:</span> []</span><br><span class="line"><span class="attr">download_only:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">dry_run:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">enable_private_envs:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">env_prompt:</span> <span class="string">({default_env})</span></span><br><span class="line"><span class="attr">envs_dirs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">C:\Users\Administrator\.conda\envs</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">D:\miniconda3\envs</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">C:\Users\Administrator\AppData\Local\conda\conda\envs</span></span><br><span class="line"><span class="attr">error_upload_url:</span> <span class="string">https://conda.io/conda-post/unexpected-error</span></span><br><span class="line"><span class="attr">execute_threads:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">experimental:</span> []</span><br><span class="line"><span class="attr">extra_safety_checks:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">fetch_threads:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">force:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">force_32bit:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">force_reinstall:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">force_remove:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">ignore_pinned:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">json:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">local_repodata_ttl:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">migrated_channel_aliases:</span> []</span><br><span class="line"><span class="attr">migrated_custom_channels:</span> {}</span><br><span class="line"><span class="attr">non_admin_enabled:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">notify_outdated_conda:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">number_channel_notices:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">offline:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">override_channels_enabled:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">path_conflict:</span> <span class="string">clobber</span></span><br><span class="line"><span class="attr">pinned_packages:</span> []</span><br><span class="line"><span class="attr">pip_interop_enabled:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">pkgs_dirs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">D:\miniconda3\pkgs</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">C:\Users\Administrator\.conda\pkgs</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">C:\Users\Administrator\AppData\Local\conda\conda\pkgs</span></span><br><span class="line"><span class="attr">proxy_servers:</span> {}</span><br><span class="line"><span class="attr">quiet:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">remote_backoff_factor:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">remote_connect_timeout_secs:</span> <span class="number">9.15</span></span><br><span class="line"><span class="attr">remote_max_retries:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">remote_read_timeout_secs:</span> <span class="number">60.0</span></span><br><span class="line"><span class="attr">repodata_fns:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">current_repodata.json</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">repodata.json</span></span><br><span class="line"><span class="attr">repodata_threads:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">report_errors:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">restore_free_channel:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">rollback_enabled:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">root_prefix:</span> <span class="string">D:\miniconda3</span></span><br><span class="line"><span class="attr">safety_checks:</span> <span class="string">warn</span></span><br><span class="line"><span class="attr">sat_solver:</span> <span class="string">pycosat</span></span><br><span class="line"><span class="attr">separate_format_cache:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">shortcuts:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">show_channel_urls:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">signing_metadata_url_base:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">solver:</span> <span class="string">classic</span></span><br><span class="line"><span class="attr">solver_ignore_timestamps:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">ssl_verify:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">subdir:</span> <span class="string">win-64</span></span><br><span class="line"><span class="attr">subdirs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">win-64</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">noarch</span></span><br><span class="line"><span class="attr">target_prefix_override:</span></span><br><span class="line"><span class="attr">track_features:</span> []</span><br><span class="line"><span class="attr">unsatisfiable_hints:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">unsatisfiable_hints_check_depth:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">update_modifier:</span> <span class="string">update_specs</span></span><br><span class="line"><span class="attr">use_index_cache:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">use_local:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">use_only_tar_bz2:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">verbosity:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">verify_threads:</span> <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure>

<p>可以看到envs_dir属性，执行conda新建环境命令会先将环境安装到<code>C:\Users\Administrator\.conda\envs</code>，如果不合适会依次寻找路径安装。</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">envs_dirs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">C:\Users\Administrator\.conda\envs</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">D:\miniconda3\envs</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">C:\Users\Administrator\AppData\Local\conda\conda\envs</span></span><br></pre></td></tr></tbody></table></figure>

<p>执行命令<code>conda config --add envs_dirs D:\miniconda3\envs</code>，表示在配置中的envs_dirs添加路径“D:\miniconda3\envs”，该路径成为首要安装位置</p>
<p>如果安装位置仍为C盘，则需要进行权限授权。</p>
<img src="/2023/07/27/Miniconda%E7%AC%94%E8%AE%B0/image-20230727164139315.png" class="" title="点击编辑">

<img src="/2023/07/27/Miniconda%E7%AC%94%E8%AE%B0/image-20230727164211198.png" class="" title="全部角色授权" alt="完全控制">

<img src="/2023/07/27/Miniconda%E7%AC%94%E8%AE%B0/image-20230727164331470.png" class="" title="地址为D盘了">



<h1 id="conda环境命令"><a href="#conda环境命令" class="headerlink" title="conda环境命令"></a>conda环境命令</h1><h2 id="新建环境"><a href="#新建环境" class="headerlink" title="新建环境"></a>新建环境</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">conda create -n py37 python=3.7</span><br></pre></td></tr></tbody></table></figure>

<p>注：<code>-n</code>后面跟住环境名</p>
<h2 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">conda remove -n py37 --all</span><br></pre></td></tr></tbody></table></figure>

<h2 id="激活环境"><a href="#激活环境" class="headerlink" title="激活环境"></a>激活环境</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">conda activate py37</span><br></pre></td></tr></tbody></table></figure>

<h2 id="退出环境"><a href="#退出环境" class="headerlink" title="退出环境"></a>退出环境</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></tbody></table></figure>

<h2 id="查看所有环境"><a href="#查看所有环境" class="headerlink" title="查看所有环境"></a>查看所有环境</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">conda <span class="built_in">env</span> list</span><br></pre></td></tr></tbody></table></figure>

<h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">conda config --add [变量名] [值]</span><br><span class="line">-- conda config --add envs_dirs D:\miniconda3\envs</span><br></pre></td></tr></tbody></table></figure>

<h2 id="删除配置"><a href="#删除配置" class="headerlink" title="删除配置"></a>删除配置</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">conda config --remove [变量名] [值]</span><br><span class="line">-- conda config --remove envs_dirs D:\miniconda3\envs</span><br></pre></td></tr></tbody></table></figure>



<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="CommandNotFoundError"><a href="#CommandNotFoundError" class="headerlink" title="CommandNotFoundError"></a>CommandNotFoundError</h2><p>如果是第一次使用miniconda，执行切换环境命令时出现<code>CommandNotFoundError: Your shell has not been properly configured to use 'conda activate'.</code>，则需要初始化conda</p>
<p>执行依次命令，再重新切换一次环境即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">conda init</span><br><span class="line">conda</span><br><span class="line"></span><br><span class="line">conda activate py368</span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Miniconda</tag>
        <tag>Anaconda</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux笔记</title>
    <url>//2024/02/20/Linux%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="安装VMware-Tools"><a href="#安装VMware-Tools" class="headerlink" title="安装VMware Tools"></a>安装VMware Tools</h1><h2 id="正常安装"><a href="#正常安装" class="headerlink" title="正常安装"></a>正常安装</h2><ol>
<li>点击安装VMware Tools<img src="/2024/02/20/Linux%E7%AC%94%E8%AE%B0/image-20240220170831313.png" class="" title="image-20240220170831313"></li>
<li>打开CD</li>
<li>将文件提取解压到本地</li>
<li>执行<code>sudo ./vmware-install.pl</code></li>
<li>全部默认为yes</li>
</ol>
<h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install open-vm-tools open-vm-tools-desktop</span><br></pre></td></tr></tbody></table></figure>

<p>如果出现无法拖动文件：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> run-vmblock\\x2dfuse.mount</span><br><span class="line">systemctl start run-vmblock\\x2dfuse.mount</span><br><span class="line">systemctl restart vmware-tools</span><br></pre></td></tr></tbody></table></figure>



<h1 id="windows通过ssh发送到Linux"><a href="#windows通过ssh发送到Linux" class="headerlink" title="windows通过ssh发送到Linux"></a>windows通过ssh发送到Linux</h1><p>执行命令</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">scp 文件 john@192.168.243.133:/home/git</span><br></pre></td></tr></tbody></table></figure>

<p>Linux的/home/git文件夹需要配置权限</p>
<h1 id="使用windows的命令框连接ssh"><a href="#使用windows的命令框连接ssh" class="headerlink" title="使用windows的命令框连接ssh"></a>使用windows的命令框连接ssh</h1><p>执行命令，输入密码即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh john@xxx.xxx.xxx.xxx</span><br></pre></td></tr></tbody></table></figure>



<h1 id="Xshell连接虚拟机"><a href="#Xshell连接虚拟机" class="headerlink" title="Xshell连接虚拟机"></a>Xshell连接虚拟机</h1><h2 id="安装SSH"><a href="#安装SSH" class="headerlink" title="安装SSH"></a>安装SSH</h2><p>查看ssh进程</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ps -e|grep ssh</span><br></pre></td></tr></tbody></table></figure>

<p>安装ssh服务</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></tbody></table></figure>

<p>启动ssh服务</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">/etc/init.d/ssh start</span><br></pre></td></tr></tbody></table></figure>

<p>再次查看可以发现ssh已经打开了</p>
<img src="/2024/02/20/Linux%E7%AC%94%E8%AE%B0/image-20240220180947367.png" class="" title="image-20240220180947367">

<h2 id="Xshell连接虚拟机-1"><a href="#Xshell连接虚拟机-1" class="headerlink" title="Xshell连接虚拟机"></a>Xshell连接虚拟机</h2><p>配置连接信息</p>
<img src="/2024/02/20/Linux%E7%AC%94%E8%AE%B0/image-20240220181125754.png" class="" title="image-20240220181125754">

<p>输入用户名、密码</p>
<img src="/2024/02/20/Linux%E7%AC%94%E8%AE%B0/image-20240220181148775.png" class="" title="image-20240220181148775">

<img src="/2024/02/20/Linux%E7%AC%94%E8%AE%B0/image-20240220181206439.png" class="" title="image-20240220181206439">



<h1 id="安装服务器版本"><a href="#安装服务器版本" class="headerlink" title="安装服务器版本"></a>安装服务器版本</h1><p>关键步骤</p>
<h2 id="设置静态IP"><a href="#设置静态IP" class="headerlink" title="设置静态IP"></a>设置静态IP</h2><img src="/2024/02/20/Linux%E7%AC%94%E8%AE%B0/ab396b9179e647f186f545c622581dc4.png" class="" title="img">

<img src="/2024/02/20/Linux%E7%AC%94%E8%AE%B0/b06f211f8e5f4d778ec02cc3804141aa.png" class="" title="img">

<p>DNS服务器地址可以在主机使用命令查看</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ipconfig /all</span><br></pre></td></tr></tbody></table></figure>

<p>网关使用xxx.xxx.xxx.2</p>
<h2 id="分区配置"><a href="#分区配置" class="headerlink" title="分区配置"></a>分区配置</h2><p>选择Custom storage layout</p>
<img src="/2024/02/20/Linux%E7%AC%94%E8%AE%B0/5430eadab78e4263afd45ed2851b57dc.png" class="" title="img">

<p>选择free space，Add GPT Partition</p>
<img src="/2024/02/20/Linux%E7%AC%94%E8%AE%B0/d64b8817104f498dafbbedf349b9d8b0-17084827280155.png" class="" title="img">

<p>配置boot分区，分配500M空间</p>
<img src="/2024/02/20/Linux%E7%AC%94%E8%AE%B0/image-20240221101512474.png" class="" title="image-20240221101512474">

<p>配置swap分区，分配8G空间</p>
<img src="/2024/02/20/Linux%E7%AC%94%E8%AE%B0/25736edbdb0a41f5ad52ad57885c6b9e.png" class="" title="img">

<p>配置其他分区，分配剩余空间</p>
<img src="/2024/02/20/Linux%E7%AC%94%E8%AE%B0/028fd8ab594d44ee89cf7c6b58d20ab8.png" class="" title="img">

<h2 id="设置用户名密码"><a href="#设置用户名密码" class="headerlink" title="设置用户名密码"></a>设置用户名密码</h2><img src="/2024/02/20/Linux%E7%AC%94%E8%AE%B0/f421fb09ae8b41dda15a5b3efa00f35b.png" class="" title="img">



<h1 id="安装禅道"><a href="#安装禅道" class="headerlink" title="安装禅道"></a>安装禅道</h1><p><a href="https://www.zentao.net/book/zentaopms/458.html">linux用一键安装包(推荐) - 禅道使用手册 - 禅道开源项目管理软件 (zentao.net)</a></p>
<p>进入opt文件夹，该文件主要用于安装第三方软件</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br></pre></td></tr></tbody></table></figure>

<p>下载禅道压缩包</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wget https://www.zentao.net/dl/zentao/18.5/ZenTaoPMS.18.5.zbox_64.tar.gz</span><br></pre></td></tr></tbody></table></figure>

<p>解压禅道压缩包</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">tar xvzf ZenTaoPMS.18.5.zbox_64.tar.gz </span><br></pre></td></tr></tbody></table></figure>

<p>启动禅道</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">opt/zbox/zbox start</span><br></pre></td></tr></tbody></table></figure>

<p>切换服务端口、数据库端口</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo /opt/zbox/zbox --aport=8083 --mport=3305 start</span><br></pre></td></tr></tbody></table></figure>

<p>添加数据库用户</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo /opt/zbox/auth/adduser.sh</span><br></pre></td></tr></tbody></table></figure>

<p>查看服务状态</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">/opt/zbox/zbox status</span><br></pre></td></tr></tbody></table></figure>



<h1 id="安装Git服务器"><a href="#安装Git服务器" class="headerlink" title="安装Git服务器"></a>安装Git服务器</h1><h2 id="Git服务器方法"><a href="#Git服务器方法" class="headerlink" title="Git服务器方法"></a>Git服务器方法</h2><h3 id="Git服务器"><a href="#Git服务器" class="headerlink" title="Git服务器"></a>Git服务器</h3><p>安装git</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></tbody></table></figure>

<p>添加git用户、密码</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">usradd git</span><br><span class="line">passwd git</span><br></pre></td></tr></tbody></table></figure>

<p>可以在/home目录下看到git文件夹</p>
<p>新建仓库文件夹，并修改权限	</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /home/git/repo</span><br><span class="line"><span class="built_in">chown</span> -R git:git /home/git/repo</span><br></pre></td></tr></tbody></table></figure>

<p>使用git初始化项目，并修改权限</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git init --bare /home/git/repo/project1.git</span><br><span class="line"><span class="built_in">chown</span> -R git:git /home/git/repo/project1.git</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Git客户端"><a href="#Git客户端" class="headerlink" title="Git客户端"></a>Git客户端</h3><p>克隆项目</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@xxx.xxx.xxx.xxx:/home/git/repo/project1.git</span><br></pre></td></tr></tbody></table></figure>

<p>添加远程</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git remote add origin git@xxx.xxx.xxx.xxx:/home/git/repo/project1.git</span><br></pre></td></tr></tbody></table></figure>

<h2 id="GitLab服务器方法"><a href="#GitLab服务器方法" class="headerlink" title="GitLab服务器方法"></a>GitLab服务器方法</h2><p>zJHIsUoOGf/598Qv0VCGX7MEXN327pKR3VHdnwpK/V0=</p>
<p>安装和配置所需的依赖</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y curl openssh-server ca-certificates tzdata perl</span><br></pre></td></tr></tbody></table></figure>

<p>下载并安装极狐GitLab</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">curl -fsSL https://packages.gitlab.cn/repository/raw/scripts/setup.sh | /bin/bash</span><br><span class="line">sudo apt-get install gitlab-jh</span><br></pre></td></tr></tbody></table></figure>

<p>更新配置</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure </span><br></pre></td></tr></tbody></table></figure>

<p>查看密码</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/gitlab/initial_root_password</span><br></pre></td></tr></tbody></table></figure>

<p>启动GitLab</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">gitlab-ctl start</span><br></pre></td></tr></tbody></table></figure>

<p>修改配置文件，将<code>external_url</code>的值改为<code>http://xxx.xxx.xxx.xxx:8081</code>，并且重新加载配置，重新启动</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim /etc/gitlab/gitlab.rb</span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line">sudo gitlab-ctl restart</span><br></pre></td></tr></tbody></table></figure>

<p>客户端访问<code>http://xxx.xxx.xxx.xxx:8081</code>即可使用GitLab</p>
<h1 id="备份Git服务器"><a href="#备份Git服务器" class="headerlink" title="备份Git服务器"></a>备份Git服务器</h1><h1 id="安装内网穿透"><a href="#安装内网穿透" class="headerlink" title="安装内网穿透"></a>安装内网穿透</h1><h2 id="cpolar"><a href="#cpolar" class="headerlink" title="cpolar"></a>cpolar</h2><p>官网：<a href="https://www.cpolar.com/">cpolar官网-安全的内网穿透工具 | 无需公网ip | 远程访问 | 搭建网站</a></p>
<p>安装cpolar</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">curl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | sudo bash</span><br></pre></td></tr></tbody></table></figure>

<p>查看版本号</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">cpolar version</span><br></pre></td></tr></tbody></table></figure>

<p>添加token</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">cpolar authtoken xxxxxxx</span><br></pre></td></tr></tbody></table></figure>

<p>启动穿透</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">cpolar http 8080</span><br></pre></td></tr></tbody></table></figure>

<p>添加、启动、查看服务</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> cpolar</span><br><span class="line">sudo systemctl start cpolar</span><br><span class="line">sudo systemctl status cpolar</span><br></pre></td></tr></tbody></table></figure>

<p>注：卸载cpolar</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">curl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | sudo bash -s -- --remove</span><br></pre></td></tr></tbody></table></figure>



<h1 id="安装Mysql数据库"><a href="#安装Mysql数据库" class="headerlink" title="安装Mysql数据库"></a>安装Mysql数据库</h1><p>安装mysql</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></tbody></table></figure>

<p>查看服务是否启动、mysql的版本</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl status mysql</span><br><span class="line">mysql --version</span><br></pre></td></tr></tbody></table></figure>

<p>增强mysql安全性</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></tbody></table></figure>

<p>身份操作：</p>
<p>第一次进入数据库</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo mysql</span><br></pre></td></tr></tbody></table></figure>

<p>查看不同用户的身份验证方法</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	<span class="keyword">user</span></span><br><span class="line">	,authentication_string</span><br><span class="line">	,plugin</span><br><span class="line">	,host </span><br><span class="line"><span class="keyword">FROM</span> mysql.user;</span><br></pre></td></tr></tbody></table></figure>

<p>修改root用户的身份验证方式，将<code>auth_socket</code>改为密码验证方式<code>mysql_native_password</code></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">'your_password'</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>重新加载授权表</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></tbody></table></figure>

<p>添加新用户：</p>
<p>创建新用户、并授予权限，要求8位以上复杂的密码</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'用户名称'</span>@<span class="string">'%'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'用户密码'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">'用户名称'</span>@<span class="string">'%'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br></pre></td></tr></tbody></table></figure>

<p>远程连接数据库：</p>
<p>检查用户的host，需要改为<code>%</code></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host<span class="operator">=</span><span class="string">'%'</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">'root'</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">'root'</span>@<span class="string">'%'</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></tbody></table></figure>



<h1 id="开机执行程序"><a href="#开机执行程序" class="headerlink" title="开机执行程序"></a>开机执行程序</h1><ol>
<li><p>将<code>rc-local.service</code>文件复制到<code>system</code>目录下</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/lib/systemd/system/rc-local.service /etc/systemd/system/</span><br></pre></td></tr></tbody></table></figure>

<p><code>rc-local.service</code>文件需要修改，在后面的内容加上</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">Alias=rc-local.service</span><br></pre></td></tr></tbody></table></figure>

<img src="/2024/02/20/Linux%E7%AC%94%E8%AE%B0/image-20240225231956873.png" class="" title="rc-local文件内容">

<p>其中ExecStart参数可以看出，本质上就是执行了<code>/etc/rc.local</code>这个文件</p>
</li>
<li><p>新建rc.local文件，并写入需要执行的命令</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> /etc/rc.local</span><br><span class="line"><span class="built_in">chmod</span> 755 /etc/rc.local</span><br><span class="line">vim /etc/rc.local</span><br></pre></td></tr></tbody></table></figure>

<p><code>rc.local</code>文件的内容</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">/opt/zbox/zbox restart | tee /opt/auto_script/log/open_zentao.log</span><br><span class="line">echo "禅道启动成功"</span><br><span class="line">exit 0</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>开启<code>rc-local</code>服务</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">systemctl start rc-local</span><br><span class="line">systemctl <span class="built_in">enable</span> rc-local</span><br><span class="line">systemctl status rc-local</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>重启测试</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">init 6</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h1 id="使用批处理命令启动VMware的虚拟机"><a href="#使用批处理命令启动VMware的虚拟机" class="headerlink" title="使用批处理命令启动VMware的虚拟机"></a>使用批处理命令启动VMware的虚拟机</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line"><span class="built_in">echo</span> open VMware Ubuntu Server</span><br><span class="line"><span class="string">"F:\VMWare17\vmrun"</span> -T ws start <span class="string">"G:\vm\UbuntuServer22\UbuntuServer22.vmx"</span></span><br><span class="line"><span class="built_in">set</span> /p title=openning...</span><br></pre></td></tr></tbody></table></figure>



<h1 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vi ~/.bashrc</span><br></pre></td></tr></tbody></table></figure>

<p>需要添加的内容</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> [别名]=[需要别名的命令]</span><br></pre></td></tr></tbody></table></figure>



<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h2><p>Systemctl是用于<strong>控制systemd系统和服务管理器的命令行工具</strong>。</p>
<p>例如：</p>
<p>查找VMware Tools运行状态</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl status vmware-tools.service</span><br></pre></td></tr></tbody></table></figure>

<p>一个用于在系统启动时自动启用名为 <code>cpolar</code> 的服务的命令。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> cpolar</span><br></pre></td></tr></tbody></table></figure>

<h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p>ps查看进程信息，-e查看全部进程</p>
<p>例如：</p>
<p>grep使用ps查出的信息筛选出ssh关键词的信息</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ps -e|grep ssh</span><br></pre></td></tr></tbody></table></figure>

<h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><p>压缩指定文件</p>
<p><strong>tar xvzf ZenTaoPMS.18.5.zbox_64.tar.gz</strong>  </p>
<p>解压缩名为”ZenTaoPMS.18.5.zbox_64.tar.gz”的压缩文件</p>
<ul>
<li><code>x</code>: 解压缩文件</li>
<li><code>v</code>: 显示详细信息（verbose）</li>
<li><code>z</code>: 使用gzip进行解压缩</li>
<li><code>f</code>: 指定要解压缩的文件名</li>
</ul>
<h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><p>下载文件</p>
<p><strong>wget <a href="https://www.zentao.net/dl/zentao/18.5/ZenTaoPMS.18.5.zbox_64.tar.gz">https://www.zentao.net/dl/zentao/18.5/ZenTaoPMS.18.5.zbox_64.tar.gz</a></strong></p>
<p>将网站上的ZenTaoPMS.18.5.zbox_64.tar.gz文件下载到当前文件夹</p>
<h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h2><p>创建文件夹</p>
<p><strong>mkdir repository-git</strong></p>
<p>在当前目录下创建repository-git文件夹</p>
<h2 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h2><p>用于更改文件或目录的所有者和群组。</p>
<p><strong>chown -R git:git repository-git/</strong></p>
<p>将<code>repository-git/</code>目录及其子目录下的所有文件和目录的<strong>所有者</strong>和<strong>所属组</strong>更改为git用户和git组。</p>
<p><code>-R</code>参数表示递归地更改目录及其<strong>子目录</strong>下的所有文件和目录的所有者和所属组。</p>
<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p><strong>git init –bare repository-git/</strong></p>
<p>创建一个裸仓库。</p>
<p>裸仓库（bare repository）是<strong>一个没有工作目录的Git仓库</strong>，只包含Git版本库的管理数据，不包含实际的项目文件。这样的仓库通常用于作为远程仓库，用于推送和拉取代码，而不是直接在仓库中进行开发工作。</p>
<p>这个文件夹将包含.git目录，其中包含了所有Git需要的版本控制信息。通常，这种仓库的URL会以.git结尾，这也是为什么从GitHub等平台上克隆仓库时，仓库的URL通常是以.git结尾的原因。</p>
<p>此外，在创建了裸仓库之后，你可以将其设置为远程仓库，其他开发者可以推送到这个仓库或者从中拉取代码，但无法直接在这个仓库上进行开发或查看工作文件的状态。这使得裸仓库非常适合作为中央仓库来协调多个开发者之间的工作。</p>
<h2 id="apt-get"><a href="#apt-get" class="headerlink" title="apt-get"></a>apt-get</h2><p>彻底卸载软件</p>
<p><strong>apt-get purge git</strong></p>
<p>彻底卸载git</p>
<h2 id="poweroff"><a href="#poweroff" class="headerlink" title="poweroff"></a>poweroff</h2><p>关闭服务器</p>
<h1 id="vim笔记"><a href="#vim笔记" class="headerlink" title="vim笔记"></a>vim笔记</h1><table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>i</td>
<td>插入</td>
<td><code>ESC</code>退出插入</td>
</tr>
<tr>
<td>:q</td>
<td>退出</td>
<td></td>
</tr>
<tr>
<td>:w</td>
<td>保存</td>
<td></td>
</tr>
<tr>
<td>:/xxx</td>
<td>向下匹配关键字</td>
<td>xxx是关键字内容</td>
</tr>
<tr>
<td>:?xxx</td>
<td>向上匹配关键字</td>
<td>xxx是关键字内容</td>
</tr>
</tbody></table>
</body></html>]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>NEXT笔记</title>
    <url>//2024/03/19/NEXT%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body></body></html>]]></content>
  </entry>
  <entry>
    <title>Node笔记</title>
    <url>//2023/09/06/Node%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="Node安装"><a href="#Node安装" class="headerlink" title="Node安装"></a>Node安装</h1><h2 id="设置路径"><a href="#设置路径" class="headerlink" title="设置路径"></a>设置路径</h2><p>由于使用<code>npm</code>下载包时会将默认将包下载到C盘，因此为了防止减少C盘使用空间，需要将node包全局安装位置和安装缓存设置到其他盘。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">"D:\node18\node_global"</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">"D:\node18\node_cache"</span></span><br></pre></td></tr></tbody></table></figure>

<p><code>E:\Program Files\nodejs</code>换为node安装位置</p>
<h2 id="设置镜像"><a href="#设置镜像" class="headerlink" title="设置镜像"></a>设置镜像</h2><p>使用node安装包的时候会使用到国外的镜像网络下载，所以下载的时候会很慢，该为淘宝的镜像可以加速下载</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> registry http://registry.npmmirror.com  // 最新版</span><br></pre></td></tr></tbody></table></figure>

<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>将目录下的<code>node_global</code>文件夹路径添加到系统的环境变量中</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">D:\node18\node_global</span><br></pre></td></tr></tbody></table></figure>



<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="Error-EPERM-operation-not-permitted-mkdir-‘D-node18-node-cache-cacache’"><a href="#Error-EPERM-operation-not-permitted-mkdir-‘D-node18-node-cache-cacache’" class="headerlink" title="Error: EPERM: operation not permitted, mkdir ‘D:\node18\node_cache_cacache’"></a>Error: EPERM: operation not permitted, mkdir ‘D:\node18\node_cache_cacache’</h2><ol>
<li><p>找到node安装目录，这里安装到<code>D:\node18</code></p>
</li>
<li><p>右键选择属性</p>
</li>
<li><p>点击<code>安全</code></p>
</li>
<li><p>选择<code>Users(...)</code>，点击编辑<br><img src="F:\blob\blob\source_posts\Node笔记\image-20231005005603072.png" alt="image-20231005005603072"></p>
</li>
<li><p>选择完全控制，点击应用，推出即可<br><img src="F:\blob\blob\source_posts\Node笔记\image-20231005005705737.png" alt="image-20231005005705737"></p>
</li>
</ol>
<h1 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h1><h2 id="安装选项"><a href="#安装选项" class="headerlink" title="安装选项"></a>安装选项</h2><ol>
<li><p><code>--save</code> ：将安装的包添加到项目的依赖中。这些依赖是在生产环境中运行时所需的包。安装后的包信息会被记录在项目的 <code>package.json</code> 文件中的 <code>dependencies</code> 部分。</p>
</li>
<li><p><code>--global</code> ：将包安装为全局包，而不是项目的依赖。全局包可以在命令行中直接使用，而不需要在项目中引入。这对于安装一些常用的工具或命令行程序很有用。</p>
</li>
<li><p><code>--force</code> ：强制安装包，即使已经存在相同版本的包。这在需要覆盖或更新现有包时很有用。</p>
</li>
<li><p><code>--registry</code> ：指定要使用的npm注册表的URL。默认情况下，npm使用官方的npm注册表，但您可以使用自定义的注册表。</p>
</li>
<li><p><code>--dry-run</code> ：模拟运行安装过程，而不实际安装包。这可以帮助您查看将要安装的包及其依赖关系，以便在实际安装之前进行检查。</p>
</li>
</ol>
<p>这些选项也可以组合使用，例如 <code>--save-dev --force</code> 。可以通过运行 <code>npm help install</code> 命令来查看更多npm安装命令的选项和说明。</p>
<h2 id="–save-dev"><a href="#–save-dev" class="headerlink" title="–save-dev"></a>–save-dev</h2><p>在使用npm安装包时， <code>--save-dev</code> 是一个选项，用于将安装的包添加到项目的开发依赖中。开发依赖是指仅在开发过程中需要使用的包，而不是在生产环境中运行时所需的包。</p>
<p>当您在开发过程中使用某个包来编写代码、运行测试、构建项目等时，您可以使用 <code>--save-dev</code> 选项将其添加到开发依赖中。这样，在其他开发人员或部署项目时，他们可以通过简单地运行 <code>npm install</code> 命令来安装所有开发依赖。</p>
<p>使用 <code>--save-dev</code> 选项安装的包信息会被记录在项目的 <code>package.json</code> 文件中的 <code>devDependencies</code> 部分。这样，当其他人或您自己在新环境中进行项目部署时，只需运行 <code>npm install</code> 命令，npm会自动安装 <code>devDependencies</code> 中列出的包。</p>
<p>总结来说， <code>--save-dev</code> 选项用于将包添加到项目的开发依赖中，以便在开发过程中使用，并在部署或共享项目时方便其他人安装相同的开发依赖。</p>
<h1 id="Vscode插件推荐"><a href="#Vscode插件推荐" class="headerlink" title="Vscode插件推荐"></a>Vscode插件推荐</h1><h2 id="NPM-Script"><a href="#NPM-Script" class="headerlink" title="NPM-Script"></a>NPM-Script</h2><p><img src="F:\blob\blob\source_posts\Node笔记\image-20231006020502655.png" alt="image-20231006020502655"></p>
<p>安装完成后在<code>文件管理器</code>下会看到<code>NPM SCRIPTS</code>的标签栏，其中所显示的命令为当前项目的<code>package.json</code>文件中的<code>scripts</code>中的命令</p>
<p><img src="F:\blob\blob\source_posts\Node笔记\image-20231006020733967.png" alt="image-20231006020733967"></p>
<p>点击标签栏的<code>start</code>命令相当于执行<code>npm run start</code>命令</p>
<p>但是一般情况下会执行<code>auto run start</code>，因此要到设置中将<code>auto</code>改为<code>npm</code></p>
<p><img src="F:\blob\blob\source_posts\Node笔记\image-20231006020952200.png" alt="image-20231006020952200"></p>
<h1 id="Node包推荐"><a href="#Node包推荐" class="headerlink" title="Node包推荐"></a>Node包推荐</h1><h2 id="nvm-windows"><a href="#nvm-windows" class="headerlink" title="nvm-windows"></a>nvm-windows</h2><p>node的版本管理器，可以在同一台机器上安装不同版本的node，用于适应某些包因为不同的node版本而导致不能使用或者下载。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>到GitHub上安装最新的nvm-windows，nvm-setup.zip文件，<a href="https://github.com/coreybutler/nvm-windows/releases">Releases · coreybutler/nvm-windows (github.com)</a></p>
<p>选择nvm安装路径</p>
<img src="/2023/09/06/Node%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0h1YW5nc1Rpbmc=,size_16,color_FFFFFF,t_70.png" class="" title="nvm安装路径">

<p>选择node的安装路径</p>
<img src="/2023/09/06/Node%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0h1YW5nc1Rpbmc=,size_16,color_FFFFFF,t_70-17065313229192.png" class="" title="node的安装路径">

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><img src="/2023/09/06/Node%E7%AC%94%E8%AE%B0/image-20240129203621663.png" class="" title="image-20240129203621663">

<p>代理配置</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></tbody></table></figure>

<p>配置全局的npm</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">"E:\nvm\npm"</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><table>
<thead>
<tr>
<th>命令</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>nvm list</td>
<td>查看已安装的node版本</td>
</tr>
<tr>
<td>nvm list available</td>
<td>查看网络可安装的node版本</td>
</tr>
<tr>
<td>nvm install 17.9.1</td>
<td>安装17.9.1的node版本</td>
</tr>
<tr>
<td>nvm version</td>
<td>查看当前nvm的版本</td>
</tr>
<tr>
<td>nvm uninstall 17.9.1</td>
<td>卸载17.9.1版本的node（必须要在另一个版本中卸载该版本）</td>
</tr>
</tbody></table>
<h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>每一个新环境都要配置</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">"D:\nodejs\node_global"</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">"D:\nodejs\node_cache"</span></span><br></pre></td></tr></tbody></table></figure>

<p>其中，nodejs是nvm的快捷方式</p>
<img src="/2023/09/06/Node%E7%AC%94%E8%AE%B0/image-20240129211039666.png" class="" title="image-20240129211039666">

<p>此电脑的环境变量也要设置</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">D:\nodejs\node_global</span><br></pre></td></tr></tbody></table></figure>

<img src="/2023/09/06/Node%E7%AC%94%E8%AE%B0/image-20240129211156089.png" class="" title="image-20240129211156089">
</body></html>]]></content>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy笔记</title>
    <url>//2023/09/06/Numpy%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="where函数"><a href="#where函数" class="headerlink" title="where函数"></a>where函数</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">numpy.where(condition, [x, y])</span><br></pre></td></tr></tbody></table></figure>

<p><code>condition</code>是一个数组</p>
<p><code>x</code>和<code>y</code>是可选的</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ol>
<li>只使用<code>condition</code>参数</li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个NumPy数组</span></span><br><span class="line">arr = np.array([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用np.where函数找出数组中大于25的元素的位置</span></span><br><span class="line">indices = np.where(arr &gt; <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(indices)  <span class="comment"># 输出: (array([2, 3, 4]),)</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>加上<code>x</code>和<code>y</code>的参数，小于等于25的元素为-1</li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用np.where函数找出数组中大于25的元素</span></span><br><span class="line">result = np.where(arr &gt; <span class="number">25</span>, arr, -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出: array([-1, -1, 30, 40, 50])</span></span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas笔记</title>
    <url>//2023/09/06/Pandas%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="读取数据👉read-xxx"><a href="#读取数据👉read-xxx" class="headerlink" title="读取数据👉read_xxx"></a>读取数据👉read_xxx</h1><p>读取excel的数据</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">df = pd.read_excel(item_file_path)</span><br></pre></td></tr></tbody></table></figure>

<p>读取csv的数据</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">df = pd.read_csv(file_path, encoding=<span class="string">'gbk'</span>)</span><br></pre></td></tr></tbody></table></figure>



<h1 id="遍历数据👉iterrows、iteritems"><a href="#遍历数据👉iterrows、iteritems" class="headerlink" title="遍历数据👉iterrows、iteritems"></a>遍历数据👉iterrows、iteritems</h1><h2 id="行遍历👉iterrows"><a href="#行遍历👉iterrows" class="headerlink" title="行遍历👉iterrows"></a>行遍历👉iterrows</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> index, obj <span class="keyword">in</span> item_df.iterrows():</span><br><span class="line">    index  <span class="comment"># 行号</span></span><br><span class="line">    obj  <span class="comment"># 当前行的数据对象</span></span><br><span class="line">    obj[<span class="string">'col_name'</span>]  <span class="comment"># 获取当前行的对应的列名col_name的数据	</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="列遍历👉iteritems"><a href="#列遍历👉iteritems" class="headerlink" title="列遍历👉iteritems"></a>列遍历👉iteritems</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> col_name, col <span class="keyword">in</span> item_df.iteritems():</span><br><span class="line">    col_name  <span class="comment"># 列名</span></span><br><span class="line">    col  <span class="comment"># 列对应行的数据</span></span><br><span class="line">    col[row_index]  <span class="comment"># 下标为row_index的行对应的col_name的数据</span></span><br></pre></td></tr></tbody></table></figure>



<h1 id="过滤列数据找到对应行数据👉-condition"><a href="#过滤列数据找到对应行数据👉-condition" class="headerlink" title="过滤列数据找到对应行数据👉[[condition]]"></a>过滤列数据找到对应行数据👉[[condition]]</h1><p>过滤列名为<code>col_name</code>的数据等于<code>val</code>值的行数据，将过滤得到的数据赋值到<code>df_data</code>变量上。</p>
<p>注：需要将获取得到的对应列的值（<code>df['col_name']</code>）和对比的值（<code>val</code>）转为字符型，</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">df_data = df[df[<span class="string">'col_name'</span>].astype(<span class="built_in">str</span>) == <span class="built_in">str</span>(<span class="string">'val'</span>)]</span><br></pre></td></tr></tbody></table></figure>



<h1 id="列转为List👉tolist"><a href="#列转为List👉tolist" class="headerlink" title="列转为List👉tolist"></a>列转为List👉tolist</h1><p>将该列<code>col_name</code>的所有数据转为List结构</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">df[<span class="string">'col_name'</span>].tolist()</span><br></pre></td></tr></tbody></table></figure>



<h1 id="修改行对应的列数据👉loc-i-c"><a href="#修改行对应的列数据👉loc-i-c" class="headerlink" title="修改行对应的列数据👉loc[i, c]"></a>修改行对应的列数据👉loc[i, c]</h1><p>将第<code>index</code>行的数据，对应的列<code>col_name</code>，修改值为<code>new_val</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">df.loc[index, <span class="string">'col_name'</span>] = <span class="string">'new_val'</span></span><br></pre></td></tr></tbody></table></figure>



<h1 id="添加列👉-‘new-col-name’"><a href="#添加列👉-‘new-col-name’" class="headerlink" title="添加列👉[‘new_col_name’]"></a>添加列👉[‘new_col_name’]</h1><p>往表格中添加新列<code>new_col</code>，并且赋值为<code>new_col_val</code></p>
<p>注：需要保存当前的<code>df</code>才能在文件中看到效果</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">df[<span class="string">'new_col'</span>] = <span class="string">'new_col_val'</span></span><br></pre></td></tr></tbody></table></figure>



<h1 id="保存文件👉to-xxx"><a href="#保存文件👉to-xxx" class="headerlink" title="保存文件👉to_xxx"></a>保存文件👉to_xxx</h1><p>将当前修改过的<code>df</code>保存到<code>output_file.xls</code>文件中。</p>
<p>注：文件名需要加上后缀</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">df.to_excel(<span class="string">'output_file.xls'</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>Pycharm笔记</title>
    <url>//2024/01/30/Pycharm%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="显示函数形参提示信息"><a href="#显示函数形参提示信息" class="headerlink" title="显示函数形参提示信息"></a>显示函数形参提示信息</h1><p>快捷键<code>Ctrl+P</code></p>
<img src="/2024/01/30/Pycharm%E7%AC%94%E8%AE%B0/image-20230802142437205.png" class="" title="image-20230802142437205">



<h1 id="右键打开pycharm"><a href="#右键打开pycharm" class="headerlink" title="右键打开pycharm"></a>右键打开pycharm</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\PyCharm]</span><br><span class="line">@=<span class="string">"Open Folder as PyCharm Project"</span></span><br><span class="line"><span class="string">"Icon"</span>=<span class="string">"C:\\software\\pycharm2021\\PyCharm 2021.3.2\\bin\\pycharm64.exe"</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\PyCharm\<span class="built_in">command</span>]</span><br><span class="line">@=<span class="string">"\"C:\\software\\pycharm2021\\PyCharm 2021.3.2\\bin\\pycharm64.exe\" \"%V\""</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\PyCharm]</span><br><span class="line">@=<span class="string">"Open Folder as PyCharm Project"</span></span><br><span class="line"><span class="string">"Icon"</span>=<span class="string">"C:\\software\\pycharm2021\\PyCharm 2021.3.2\\bin\\pycharm64.exe"</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\PyCharm\<span class="built_in">command</span>]</span><br><span class="line">@=<span class="string">"\"C:\\software\\pycharm2021\\PyCharm 2021.3.2\\bin\\pycharm64.exe\" \"%V\""</span></span><br></pre></td></tr></tbody></table></figure>



<h1 id="配置注释风格"><a href="#配置注释风格" class="headerlink" title="配置注释风格"></a>配置注释风格</h1><p>查找<code>docstrings</code>，在<code>Tools -&gt; Python Integrated Tools</code>中</p>
<img src="/2024/01/30/Pycharm%E7%AC%94%E8%AE%B0/image-20240130094957093.png" class="" title="image-20240130094957093">
</body></html>]]></content>
  </entry>
  <entry>
    <title>Pyinstaller笔记</title>
    <url>//2023/12/19/Pyinstaller%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="添加静态文件"><a href="#添加静态文件" class="headerlink" title="添加静态文件"></a>添加静态文件</h1><img src="/2023/12/19/Pyinstaller%E7%AC%94%E8%AE%B0/format,png.png" class="" title="img">

<p>意思是将test.py当前目录下的res目录（及其目录中的文件）加入目标exe中，在运行时放在临时文件的根目录下，名称为res</p>
<p>使用对应资源的时候需要使用到如下方法：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">resource_path</span>(<span class="params">relative_path</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    这段代码根据程序是否被打包成可执行文件，确定了资源的基本路径，</span></span><br><span class="line"><span class="string">    并将基本路径与相对路径拼接起来，返回资源的绝对路径。</span></span><br><span class="line"><span class="string">    :param relative_path:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">getattr</span>(sys, <span class="string">'frozen'</span>, <span class="literal">False</span>):</span><br><span class="line">        <span class="comment"># 已打包的运行环境</span></span><br><span class="line">        <span class="keyword">return</span> os.path.join(sys._MEIPASS, relative_path)</span><br><span class="line">    <span class="keyword">return</span> relative_path</span><br></pre></td></tr></tbody></table></figure>

<p>双击启动打包后的exe文件，会将文件解压到C盘的Temp文件夹里，因此<code>sys._MEIPASS</code>为跳转到该Temp文件夹中</p>
</body></html>]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Pyinstaller</tag>
        <tag>打包</tag>
      </tags>
  </entry>
  <entry>
    <title>Python</title>
    <url>//2023/05/25/Python%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="Python导入包顺序"><a href="#Python导入包顺序" class="headerlink" title="Python导入包顺序"></a>Python导入包顺序</h1><ol>
<li>标准库导入</li>
<li>相关第三方库导入</li>
<li>本地应用/库的导入，按照字母顺序</li>
</ol>
<h1 id="配置pip源"><a href="#配置pip源" class="headerlink" title="配置pip源"></a>配置pip源</h1><ol>
<li><p>在<code>C:\Users\Administrator</code>下新建pip文件夹</p>
</li>
<li><p>在文件夹里新建<code>pip.ini</code>文件，并写入如下内容</p>
</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="line"></span><br><span class="line">[install]</span><br><span class="line">trusted-host = pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></tbody></table></figure>



<h1 id="args与-kwargs-的区别"><a href="#args与-kwargs-的区别" class="headerlink" title="*args与*kwargs 的区别"></a>*args与*kwargs 的区别</h1><p>*args 用于传递可变数量的非关键字参数，以<strong>元组</strong>的形式传递。</p>
<p>*kwargs 用于传递可变数量的关键字参数，以<strong>字典</strong>的形式传递。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">example_function</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Non-keyword arguments:"</span>)</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">        <span class="built_in">print</span>(arg)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\nKeyword arguments:"</span>)</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"<span class="subst">{key}</span>: <span class="subst">{value}</span>"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">example_function(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"cherry"</span>, fruit1=<span class="string">"orange"</span>, fruit2=<span class="string">"kiwi"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The result of the example code is:</span></span><br><span class="line"><span class="comment"># Non-keyword arguments:</span></span><br><span class="line"><span class="comment"># apple</span></span><br><span class="line"><span class="comment"># banana</span></span><br><span class="line"><span class="comment"># cherry</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Keyword arguments:</span></span><br><span class="line"><span class="comment"># fruit1: orange</span></span><br><span class="line"><span class="comment"># fruit2: kiwi</span></span><br></pre></td></tr></tbody></table></figure>



<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><p>装饰器是Python的一个特性，可以让我们在不修改原函数的情况下，动态增加函数的功能。</p>
<p>其本质上装饰器是一个函数，它接收一个函数的输入，返回一个新函数的输出。</p>
<h2 id="装饰器的使用"><a href="#装饰器的使用" class="headerlink" title="装饰器的使用"></a>装饰器的使用</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_wrapper</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Dao层的捕获错误装饰器</span></span><br><span class="line"><span class="string">    :param func:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = func(*args, **kwargs)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"this is wrapper"</span>, res)</span><br><span class="line">            <span class="keyword">return</span> res + <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"exceptions_wrapper_dao"</span>, err)</span><br><span class="line">            <span class="keyword">raise</span> err</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@my_wrapper</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    a = <span class="number">1</span> + <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    r = test()</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="comment"># this is wrapper 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br></pre></td></tr></tbody></table></figure>

<p>通过打断点可以知道：执行test函数时，会跳转到wrapper函数里，执行func函数时，会执行test函数里的内容，最后return的结果作为执行test函数的结果。</p>
<h2 id="装饰器的参数"><a href="#装饰器的参数" class="headerlink" title="装饰器的参数"></a>装饰器的参数</h2><p>也就是在原有的基础上套上一层函数</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_wrapper</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Dao层的捕获错误装饰器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                res = func(*args, **kwargs)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"this is wrapper"</span>, res)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"this is n -&gt;&gt;"</span>, n)</span><br><span class="line">                <span class="keyword">return</span> res + <span class="number">1</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"exceptions_wrapper_dao"</span>, err)</span><br><span class="line">                <span class="keyword">raise</span> err</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@my_wrapper(<span class="params"><span class="number">123</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    a = <span class="number">1</span> + <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    r = test()</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="comment"># this is wrapper 3</span></span><br><span class="line"><span class="comment"># this is n -&gt;&gt; 123</span></span><br><span class="line"><span class="comment"># 4</span></span><br></pre></td></tr></tbody></table></figure>



<h1 id="logging日志重复输出"><a href="#logging日志重复输出" class="headerlink" title="logging日志重复输出"></a>logging日志重复输出</h1><p>logging封装代码</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> LOG_FILE_DIR</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLogger</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            name = __name__</span><br><span class="line">        <span class="comment"># 日志文件路径</span></span><br><span class="line">        log_path = os.path.join(LOG_FILE_DIR, time.strftime(<span class="string">'%Y-%m-%d %H%M%S'</span>, time.localtime(time.time())) + <span class="string">".log"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(LOG_FILE_DIR):</span><br><span class="line">            os.makedirs(LOG_FILE_DIR)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建一个logger</span></span><br><span class="line">        self.logger = logging.getLogger(name)</span><br><span class="line">        self.logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建一个StringIO对象</span></span><br><span class="line">        self.log_string = StringIO()</span><br><span class="line">        <span class="comment"># 创建一个全局的StringIO对象</span></span><br><span class="line">        self.log_string_global = StringIO()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建一个handler，用于写入日志文件</span></span><br><span class="line">        file_handler = logging.FileHandler(log_path)</span><br><span class="line">        file_handler.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建一个handler，用于将日志输出到控制台</span></span><br><span class="line">        console_handler = logging.StreamHandler()</span><br><span class="line">        console_handler.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建一个handler，用于写入日志字符串</span></span><br><span class="line">        string_handler = logging.StreamHandler(self.log_string)</span><br><span class="line">        string_handler.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建一个handler，用于记录所有的字符串</span></span><br><span class="line">        string_global_handler = logging.StreamHandler(self.log_string_global)</span><br><span class="line">        string_global_handler.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义handler的输出格式</span></span><br><span class="line">        formatter = logging.Formatter(</span><br><span class="line">            fmt=<span class="string">"%(asctime)s %(name)s %(filename)s %(funcName)s %(lineno)d %(message)s"</span>,</span><br><span class="line">            datefmt=<span class="string">"%Y-%m-%d %X"</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 为每个handler添加输出格式</span></span><br><span class="line">        file_handler.setFormatter(formatter)</span><br><span class="line">        console_handler.setFormatter(formatter)</span><br><span class="line">        string_handler.setFormatter(formatter)</span><br><span class="line">        string_global_handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 给logger添加handler</span></span><br><span class="line">        self.logger.handlers.clear()  <span class="comment"># 清除之前的handler  # 重点</span></span><br><span class="line">        self.logger.addHandler(file_handler)</span><br><span class="line">        self.logger.addHandler(console_handler)</span><br><span class="line">        self.logger.addHandler(string_handler)</span><br><span class="line">        self.logger.addHandler(string_global_handler)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_log</span>(<span class="params">self, msg, level=<span class="string">'info'</span></span>):</span><br><span class="line">        <span class="comment"># 记录日志</span></span><br><span class="line">        <span class="keyword">if</span> level == <span class="string">'debug'</span>:</span><br><span class="line">            self.logger.debug(msg)</span><br><span class="line">        <span class="keyword">elif</span> level == <span class="string">'info'</span>:</span><br><span class="line">            self.logger.info(msg)</span><br><span class="line">        <span class="keyword">elif</span> level == <span class="string">'warning'</span>:</span><br><span class="line">            self.logger.warning(msg)</span><br><span class="line">        <span class="keyword">elif</span> level == <span class="string">'error'</span>:</span><br><span class="line">            self.logger.error(msg)</span><br><span class="line">        <span class="keyword">elif</span> level == <span class="string">'critical'</span>:</span><br><span class="line">            self.logger.critical(msg)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取并清除日志字符串</span></span><br><span class="line">        log_contents = self.log_string.getvalue()</span><br><span class="line">        self.log_string.truncate(<span class="number">0</span>)</span><br><span class="line">        self.log_string.seek(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> log_contents</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_global_log</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取全局日志信息</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.log_string_global.getvalue()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear_global_log</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        清除全局日志信息</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.log_string_global.truncate(<span class="number">0</span>)</span><br><span class="line">        self.log_string_global.seek(<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure>

<p>不同的name对应不同的logger。同样的logger，它们会共享handler，从而导致日志重复输出。</p>
<p><strong>解决方法：</strong></p>
<ol>
<li>提供不同的name值</li>
<li>在添加处理器时，清除处理器</li>
</ol>
<h1 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h1><p>涉及多线程使用同一类时，可以为该类添加线程锁，当前线程在用着时，其他线程就不能使用</p>
<p>场景：启动flask时，会使用日志输出flask启动信息，而启动发送邮件线程也会使用日志输出启动信息，因为log的特殊性，输出当前信息就得清空log，所以两个线程同时使用的时候，后者线程可能刚输出日志之后就会被前者线程清空log。</p>
<p>解决方法：为日志类添加线程锁</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLoggerInfo</span>(<span class="title class_ inherited__">MyLogger</span>):</span><br><span class="line">    text_browser = <span class="literal">None</span>  <span class="comment"># 日志信息框</span></span><br><span class="line">    lock = threading.Lock()  <span class="comment"># 线程锁  # 重点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_text_browser</span>(<span class="params">text_browser</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        设置日志信息框</span></span><br><span class="line"><span class="string">        :param text_browser:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        MyLoggerInfo.text_browser = text_browser</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_log</span>(<span class="params">self, msg, level=<span class="string">'info'</span>, is_print_to_text=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        输出日志</span></span><br><span class="line"><span class="string">        :param msg: 日志信息</span></span><br><span class="line"><span class="string">        :param level: 日志等级</span></span><br><span class="line"><span class="string">        :param is_print_to_text: 是否输出到qt信息框中</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">with</span> self.lock:</span><br><span class="line">            text_log = <span class="built_in">super</span>().print_log(msg, level)</span><br><span class="line">            <span class="keyword">if</span> is_print_to_text:</span><br><span class="line">                <span class="keyword">if</span> MyLoggerInfo.text_browser <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    MyLoggerInfo.text_browser.append(text_log</span><br></pre></td></tr></tbody></table></figure>



<h1 id="解决错误码-1073741819-0xC0000005"><a href="#解决错误码-1073741819-0xC0000005" class="headerlink" title="解决错误码 -1073741819 (0xC0000005)"></a>解决错误码 -1073741819 (0xC0000005)</h1><p>执行到某行代码时，程序自动停止，出现错误<code>Process finished with exit code -1073741819 (0xC0000005)</code></p>
<p><strong>出现原因</strong>：与金山词霸、有道词典等软件的划词功能有关</p>
<p>可能是因为这些软件和程序使用相同的系统资源</p>
<h1 id="可视化打包Python程序"><a href="#可视化打包Python程序" class="headerlink" title="可视化打包Python程序"></a>可视化打包Python程序</h1><p>执行安装命令，<code>pip install auto-py-to-exe</code></p>
<p>执行打包程序打开命令，<code>auto-py-to-exe</code></p>
<h1 id="解决问题-AssertionError"><a href="#解决问题-AssertionError" class="headerlink" title="解决问题 AssertionError"></a>解决问题 AssertionError</h1><p><code>AssertionError: View function mapping is overwriting an existing endpoint function: message.w</code></p>
<p>问题原因：flask路由使用了相同的endpoint函数</p>
<p>解决方法：</p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>重命名装饰器的名字</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">flask_controller_info</span>(<span class="params">req</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    装饰器</span></span><br><span class="line"><span class="string">    :param req: 请求该接口的参数</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">w</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            res = func(*args, **kwargs)  <span class="comment"># 执行函数            </span></span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        w.__name__ = func.__name__</span><br><span class="line">        <span class="keyword">return</span> w</span><br><span class="line">    <span class="keyword">return</span> f</span><br></pre></td></tr></tbody></table></figure>

<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>可以设置@app.route的endpoint名，以避免出现重名的endpoint函数</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">"/path1"</span>, endpoint=<span class="string">'func1'</span></span>)</span></span><br><span class="line"><span class="meta">@exception_handler</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">"/path2"</span>, endpoint=<span class="string">'func2'</span></span>)</span></span><br><span class="line"><span class="meta">@exception_handler</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure>



<h1 id="pipwin"><a href="#pipwin" class="headerlink" title="pipwin"></a>pipwin</h1><p>pipwin是一个Python包管理器，它会自动安装来自<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/%E7%9A%84%E5%8C%85%EF%BC%8C%E9%9D%9E%E5%B8%B8%E6%96%B9%E4%BE%BF%E3%80%82%E5%A6%82%E6%9E%9C%E9%81%87%E5%88%B0pip%E6%89%BE%E4%B8%8D%E5%88%B0%EF%BC%8C%E6%88%96%E8%80%85%E8%AF%B4pip%E4%B8%8B%E8%BD%BD%E5%90%AF%E5%8A%A8wheel%E7%BC%96%E8%AF%91%E5%90%8E%E5%8D%B4%E5%A4%B1%E8%B4%A5%E7%9A%84%E6%83%85%E5%86%B5%EF%BC%8C%E4%B8%8D%E5%A6%A8%E5%B0%9D%E8%AF%95%E4%B8%80%E4%B8%8B%E8%BF%99%E4%B8%AA%E5%B7%A5%E5%85%B7%E3%80%82">http://www.lfd.uci.edu/~gohlke/pythonlibs/的包，非常方便。如果遇到pip找不到，或者说pip下载启动wheel编译后却失败的情况，不妨尝试一下这个工具。</a> </p>
<p>pipwin的主要作用是解决pip在Windows系统中的一些兼容性问题，比如安装某些Python包时需要编译C++代码或者需要一些特定的编译器等。 </p>
<blockquote>
<p>注：<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a> 是一个提供Python库下载的网站，它提供了许多科学开源扩展包的32位和64位Windows二进制文件，这些包是官方CPython发行版所需的。</p>
</blockquote>
<h1 id="生成requirements文件"><a href="#生成requirements文件" class="headerlink" title="生成requirements文件"></a>生成requirements文件</h1><p><strong>整个环境下的安装包都保存到requirements.txt中</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">弃用	pip freeze &gt; requirements.txt</span><br><span class="line">pip list --format=freeze &gt; requirements.txt</span><br></pre></td></tr></tbody></table></figure>

<p><strong>只生成单个项目中的使用到的安装包</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install pipreqs</span><br><span class="line">pipreqs .</span><br></pre></td></tr></tbody></table></figure>

<p>执行安装requirements.txt</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></tbody></table></figure>



<h1 id="filter方法"><a href="#filter方法" class="headerlink" title="filter方法"></a>filter方法</h1><p>接收两个参数，函数、列表</p>
<p>函数计算得到为True的元素返回到新的列表中</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_even</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> num % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">even_numbers = <span class="built_in">list</span>(<span class="built_in">filter</span>(is_even, numbers))</span><br><span class="line"><span class="built_in">print</span>(even_numbers)  <span class="comment"># 输出： [2, 4, 6]</span></span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch笔记</title>
    <url>//2023/10/07/Pytorch%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="安装GPU环境"><a href="#安装GPU环境" class="headerlink" title="安装GPU环境"></a>安装GPU环境</h1><h2 id="更新显卡驱动CUDA-Driver"><a href="#更新显卡驱动CUDA-Driver" class="headerlink" title="更新显卡驱动CUDA Driver"></a>更新显卡驱动CUDA Driver</h2><h3 id="检查显卡型号"><a href="#检查显卡型号" class="headerlink" title="检查显卡型号"></a><strong>检查显卡型号</strong></h3><p>可以在任务管理器中查看显卡型号</p>
<p><img src="F:\blob\blob\source_posts\Pytorch笔记\image-20231007180025977.png" alt="image-20231007180025977"></p>
<h3 id="安装显卡驱动"><a href="#安装显卡驱动" class="headerlink" title="安装显卡驱动"></a><strong>安装显卡驱动</strong></h3><p>打开NVIDIA官网<a href="https://www.nvidia.cn/Download/index.aspx?lang=cn">https://www.nvidia.cn/Download/index.aspx?lang=cn</a></p>
<p>根据显卡型号搜索驱动，下载安装即可</p>
<p><img src="F:\blob\blob\source_posts\Pytorch笔记\image-20231007180311323.png" alt="image-20231007180311323"></p>
<h3 id="查看CUDA-Driver版本"><a href="#查看CUDA-Driver版本" class="headerlink" title="查看CUDA Driver版本"></a><strong>查看CUDA Driver版本</strong></h3><p>输入命令</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></tbody></table></figure>

<p><img src="F:\blob\blob\source_posts\Pytorch笔记\image-20231007181414200.png" alt="image-20231007181414200"></p>
<p>可以看出这里的<code>cuda</code>版本为12.2，因此可以安装小于12.2的<code>pytorch cuda</code>版本</p>
<h2 id="安装CUDA-Toolkit"><a href="#安装CUDA-Toolkit" class="headerlink" title="安装CUDA Toolkit"></a>安装CUDA Toolkit</h2><p>进入toolkit的网址<a href="https://developer.nvidia.com/cuda-toolkit-archive">CUDA Toolkit Archive | NVIDIA Developer</a>，根据CUDA的版本选择对应的Toolkit下载</p>
<p><img src="F:\blob\blob\source_posts\Pytorch笔记\image-20231013171600723.png" alt="image-20231013171600723"></p>
<h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>选择将安装程序解压到临时安装地址</p>
<p><img src="F:\blob\blob\source_posts\Pytorch笔记\image-20231014002851902.png" alt="image-20231014002851902"></p>
<p>选择自定义安装</p>
<p><img src="F:\blob\blob\source_posts\Pytorch笔记\image-20231014003258205.png" alt="image-20231014003258205"></p>
<p>取消安装<code>Visual Studio Integration</code></p>
<p><img src="F:\blob\blob\source_posts\Pytorch笔记\image-20231014003402449.png" alt="image-20231014003402449"></p>
<p>这里需要注意一下安装路径，后续安装cuDNN时会用到</p>
<p><img src="F:\blob\blob\source_posts\Pytorch笔记\image-20231014003504886.png" alt="image-20231014003504886"></p>
<p>输入命令查看是否安装成功</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">nvcc --version</span><br><span class="line"><span class="built_in">set</span> cuda</span><br></pre></td></tr></tbody></table></figure>

<p><img src="F:\blob\blob\source_posts\Pytorch笔记\image-20231014011125885.png" alt="image-20231014011125885"></p>
<h2 id="安装cuDNN"><a href="#安装cuDNN" class="headerlink" title="安装cuDNN"></a>安装cuDNN</h2><p>进入cudnn网址<a href="https://developer.nvidia.com/rdp/cudnn-archive">cuDNN Archive | NVIDIA Developer</a>，选择cuda版本对应的cuDNN版本下载</p>
<p><img src="F:\blob\blob\source_posts\Pytorch笔记\image-20231013171825900.png" alt="image-20231013171825900"></p>
<h3 id="下载方法"><a href="#下载方法" class="headerlink" title="下载方法"></a>下载方法</h3><p>点击对应的cuDNN版本，选项框会撑开，选择<code>复制链接</code>，可以将链接复制到迅雷或者其他下载器上下载。</p>
<p>注：这样的目的是为了跳过注册而直接下载cuDNN</p>
<p><img src="F:\blob\blob\source_posts\Pytorch笔记\image-20231013172230525.png" alt="image-20231013172230525"></p>
<h3 id="安装过程-1"><a href="#安装过程-1" class="headerlink" title="安装过程"></a>安装过程</h3><p>下载完成后，解压出来，将这三个文件夹移动到安装CUDA Toolkit的位置</p>
<p><img src="F:\blob\blob\source_posts\Pytorch笔记\image-20231014011357490.png" alt="image-20231014011357490"></p>
<p><img src="F:\blob\blob\source_posts\Pytorch笔记\image-20231014011500551.png" alt="image-20231014011500551"></p>
<p>最后将这四个文件夹添加到系统环境变量</p>
<p><img src="F:\blob\blob\source_posts\Pytorch笔记\image-20231014011731435.png" alt="image-20231014011731435"></p>
<p>进入目录<code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\extras\demo_suite</code>执行目录下的文件<code>bandwidthTest.exe</code>，结果为<code>PASS</code>表示安装成功</p>
<p><img src="F:\blob\blob\source_posts\Pytorch笔记\image-20231014012051170.png" alt="image-20231014012051170"></p>
<p><img src="F:\blob\blob\source_posts\Pytorch笔记\image-20231014012127076.png" alt="image-20231014012127076"></p>
<h2 id="安装pytorch"><a href="#安装pytorch" class="headerlink" title="安装pytorch"></a>安装pytorch</h2><p>进入<code>pytorch</code>官网<a href="https://pytorch.org/">https://pytorch.org/</a></p>
<p>选择操作系统、包管理工具、语言、<code>cuda</code>表示使用显卡运算，最后直接执行<code>Run this Command</code>得到的命令安装即可</p>
<p><img src="F:\blob\blob\source_posts\Pytorch笔记\image-20231007181632258.png" alt="image-20231007181632258"></p>
<h2 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h2><p>在安装<code>pytorch</code>的环境下输入代码，执行</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="built_in">print</span>(torch.cuda.is_available())</span><br></pre></td></tr></tbody></table></figure>

<p>如果返回<code>True</code>则代表<code>gpu</code>环境的<code>pytorch</code>安装成功</p>
</body></html>]]></content>
      <tags>
        <tag>Python</tag>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>Python小程序</title>
    <url>//2023/07/06/Python%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<html><head></head><body><h1 id="1-将图片转为icon图标"><a href="#1-将图片转为icon图标" class="headerlink" title="1. 将图片转为icon图标"></a>1. 将图片转为icon图标</h1><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_to_icon</span>(<span class="params">png_path, icon_path</span>):</span><br><span class="line">    image = Image.<span class="built_in">open</span>(png_path)</span><br><span class="line">    image.save(icon_path, <span class="built_in">format</span>=<span class="string">'ICO'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example usage</span></span><br><span class="line"><span class="comment"># 第一个参数是图片地址，第二个参数是需要输出的icon图片文件名和文件后缀</span></span><br><span class="line">convert_to_icon(<span class="string">'./data/hexo.png'</span>, <span class="string">'./data/icon.ico'</span>)</span><br></pre></td></tr></tbody></table></figure>



<h1 id="2-将UI文件转为Python文件"><a href="#2-将UI文件转为Python文件" class="headerlink" title="2. 将UI文件转为Python文件"></a>2. 将UI文件转为Python文件</h1><p>安装<code>pyqt5</code>包</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install pyqt5</span><br></pre></td></tr></tbody></table></figure>

<p>在<code>ui</code>文件目录下执行命令</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pyuic5 -o mainwindow.py mainwindow.ui</span><br></pre></td></tr></tbody></table></figure>

<p>该命令可以将ui文件转为Python文件</p>
<p>注：UI文件由Qt界面设计器（Qt Designer）设计</p>
<h1 id="3-手写签名转为白底黑字"><a href="#3-手写签名转为白底黑字" class="headerlink" title="3. 手写签名转为白底黑字"></a>3. 手写签名转为白底黑字</h1><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取手写签名图片</span></span><br><span class="line">img = cv2.imread(<span class="string">'./data/sign.jpg'</span>)</span><br><span class="line"><span class="comment"># 将图片转换为灰度图像</span></span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"><span class="comment"># 将灰度图像二值化，得到黑白图像</span></span><br><span class="line">_, thresh = cv2.threshold(gray, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY_INV)</span><br><span class="line"><span class="comment"># 将黑白图像反转，变成白底黑字</span></span><br><span class="line">inverted = cv2.bitwise_not(thresh)</span><br><span class="line"><span class="comment"># 保存结果图片</span></span><br><span class="line">cv2.imwrite(<span class="string">'./data/result.jpg'</span>, inverted)</span><br></pre></td></tr></tbody></table></figure>



<h1 id="4-拼接两个PDF"><a href="#4-拼接两个PDF" class="headerlink" title="4. 拼接两个PDF"></a>4. 拼接两个PDF</h1><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Import necessary libraries</span></span><br><span class="line"><span class="keyword">import</span> PyPDF2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Open the PDF files to be merged</span></span><br><span class="line">pdf1 = <span class="built_in">open</span>(<span class="string">'1.pdf'</span>, <span class="string">'rb'</span>)</span><br><span class="line">pdf2 = <span class="built_in">open</span>(<span class="string">'2.pdf'</span>, <span class="string">'rb'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a PDF reader object for each file</span></span><br><span class="line">pdf_reader1 = PyPDF2.PdfReader(pdf1)</span><br><span class="line">pdf_reader2 = PyPDF2.PdfReader(pdf2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a PDF writer object</span></span><br><span class="line">pdf_writer = PyPDF2.PdfWriter()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Loop through the pages of the first PDF and add them to the writer object</span></span><br><span class="line"><span class="keyword">for</span> page_num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pdf_reader1.pages)):</span><br><span class="line">    page = pdf_reader1.pages[page_num]</span><br><span class="line">    pdf_writer.add_page(page)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Loop through the pages of the second PDF and add them to the writer object</span></span><br><span class="line"><span class="keyword">for</span> page_num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pdf_reader2.pages)):</span><br><span class="line">    page = pdf_reader2.pages[page_num]</span><br><span class="line">    pdf_writer.add_page(page)</span><br><span class="line"></span><br><span class="line">page_size = pdf_reader2.pages[<span class="number">0</span>].mediabox</span><br><span class="line">pdf_writer.pages[<span class="number">0</span>].mediabox = page_size</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a new PDF file and write the merged PDF to it</span></span><br><span class="line">merged_pdf = <span class="built_in">open</span>(<span class="string">'merged.pdf'</span>, <span class="string">'wb'</span>)</span><br><span class="line">pdf_writer.write(merged_pdf)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Close the files</span></span><br><span class="line">pdf1.close()</span><br><span class="line">pdf2.close()</span><br><span class="line">merged_pdf.close()</span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt</title>
    <url>//2023/07/21/Qt/</url>
    <content><![CDATA[<html><head></head><body><h1 id="1-配置Pycharm外部工具"><a href="#1-配置Pycharm外部工具" class="headerlink" title="1. 配置Pycharm外部工具"></a>1. 配置Pycharm外部工具</h1><ol>
<li>点击Settings<img src="/2023/07/21/Qt/image-20230721113233713.png" class="" title="image-20230721113233713"></li>
<li>找到External Tools 即，外部工具，点击右侧面板的加号添加<img src="/2023/07/21/Qt/image-20230721113325105.png" class="" title="image-20230721113325105"></li>
<li>输入工具名称<code>Name</code>，<code>Program</code>填写外部工具程序的exe地址，<code>Arguments</code>填写数据参数，<code>Working directory</code>填写文件的工作地址<img src="/2023/07/21/Qt/image-20230721113500738.png" class="" title="image-20230721113500738"></li>
<li>Pycharm提供了宏命令，点击加号可以查看<code>Macros</code>为宏命令，底下的<code>Macro preview</code>可以查看当前宏命令的内容<img src="/2023/07/21/Qt/image-20230721113814934.png" class="" title="image-20230721113814934"></li>
</ol>
<p>使用pycharm外部文件命令，唤出Qt Creator打开对应的ui文件</p>
<p><strong>配置Qt Creator</strong></p>
<blockquote>
<p>Program: D:\qt562\Tools\QtCreator\bin\qtcreator.exe</p>
<p>Arguments: $FilePath$</p>
<p>Working directory: $FileDir$</p>
</blockquote>
<p>参数解释：</p>
<p>使用安装好的<code>Qt Creator</code>软件，输入参数（Argument）即文件地址，使用<code>Qt Creator</code>软件打开当前的文件</p>
<img src="/2023/07/21/Qt/image-20230721114154780.png" class="" title="配置Qt Creator">

<p><strong>配置PyUIC</strong></p>
<p>PyUIC的作用是将ui文件转换为py文件</p>
<blockquote>
<p>Program: D:\Anaconda3501\envs\python368\python.exe</p>
<p>Arguments: -m PyQt5.uic.pyuic $FileName$ -o $FileNameWithoutExtension$.py</p>
<p>Working directory: $FileDir$</p>
</blockquote>
<p>参数解释：</p>
<p>程序调用python文件，执行<code>python.exe -m PyQt5.uic.pyuic $FileName$ -o $FileNameWithoutExtension$.py</code>表示使用<code>PyQt5.uic.pyuic</code>命令，执行当前文件名，<code>-o</code>输出的地址为<code>$FileNameWithoutExtension$.py</code>，即将$FileName$文件转换为python文件</p>
<img src="/2023/07/21/Qt/image-20230721114339400.png" class="" title="配置PyUIC">



<h1 id="2-Qt-Creator命令"><a href="#2-Qt-Creator命令" class="headerlink" title="2. Qt Creator命令"></a>2. Qt Creator命令</h1><p>找到Qt Creator的位置，执行命令<code>qtcreator.exe -h</code>可以看到程序的命令介绍</p>
<img src="/2023/07/21/Qt/image-20230721182418485.png" class="" title="image-20230721182418485">



<h1 id="3-Qt-Designer命令"><a href="#3-Qt-Designer命令" class="headerlink" title="3. Qt Designer命令"></a>3. Qt Designer命令</h1><p>qt designer是python的一个库文件，位置一般在<code>python385\Lib\site-packages\qt5_applications\Qt\bin</code></p>
<p>找到Qt Designer的位置，执行命令<code>designer.exe -h</code>可以看到程序的命令介绍</p>
<img src="/2023/07/21/Qt/image-20230721182611512.png" class="" title="image-20230721182611512">



<h1 id="4-对话框居中"><a href="#4-对话框居中" class="headerlink" title="4. 对话框居中"></a>4. 对话框居中</h1><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">dialog = QtWidgets.QDialog(MainWindow)</span><br><span class="line">d = Ui_Dialog()</span><br><span class="line">d.setupUi(dialog)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取屏幕的尺寸</span></span><br><span class="line">screen = QApplication.desktop()</span><br><span class="line"><span class="comment"># 获取对话框的尺寸</span></span><br><span class="line">dialog_size = dialog.geometry()</span><br><span class="line"><span class="comment"># 计算对话框的位置</span></span><br><span class="line">x = (screen.width() - dialog_size.width()) // <span class="number">2</span></span><br><span class="line">y = (screen.height() - dialog_size.height()) // <span class="number">2</span></span><br><span class="line"><span class="comment"># 设置对话框的位置</span></span><br><span class="line">dialog.setGeometry(x, y, dialog_size.width(), dialog_size.height())</span><br><span class="line"><span class="comment"># 显示对话框</span></span><br><span class="line">dialog.exec_()</span><br></pre></td></tr></tbody></table></figure>



<h1 id="5-QListWidgetItem组件添加数据"><a href="#5-QListWidgetItem组件添加数据" class="headerlink" title="5. QListWidgetItem组件添加数据"></a>5. QListWidgetItem组件添加数据</h1><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">item = QtWidgets.QListWidgetItem()  <span class="comment"># 实例化list item</span></span><br><span class="line"></span><br><span class="line">item.setData(<span class="number">1</span>, <span class="string">'SYS01'</span>)  <span class="comment"># 设置item的数据项，表示为item对象的第一个位置的值为'SYS01' </span></span><br><span class="line"></span><br><span class="line">item.setData(<span class="number">2</span>, <span class="number">1</span>)  <span class="comment"># 表示为item对象的第二个位置的值为1</span></span><br><span class="line"></span><br><span class="line">item.setData(<span class="number">3</span>, {</span><br><span class="line"><span class="string">'id'</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">'name'</span>: <span class="string">'test'</span></span><br><span class="line">})  <span class="comment"># 表示为item对象的第三个位置的值为字典 {'id': 1, 'name': 'test'}</span></span><br><span class="line"></span><br><span class="line">item.setText(_translate(<span class="string">"Dialog"</span>, <span class="string">"微易邮箱配置"</span>))  <span class="comment"># 设置这项的文本内容</span></span><br></pre></td></tr></tbody></table></figure>



<h1 id="6-QListWidget添加右键自定义菜单"><a href="#6-QListWidget添加右键自定义菜单" class="headerlink" title="6. QListWidget添加右键自定义菜单"></a>6. QListWidget添加右键自定义菜单</h1><p>为<code>listWidget_2</code>添加邮件自定义菜单</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">	self.listWidget_2.setContextMenuPolicy(Qt.CustomContextMenu)  <span class="comment"># 配置List的上下文菜单策略</span></span><br><span class="line">    self.listWidget_2.customContextMenuRequested.connect(self.show_email_context_menu)  <span class="comment"># 邮箱配置右键菜单</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_email_context_menu</span>(<span class="params">self, position</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    自定义右键邮件配置菜单</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    menu = QMenu()</span><br><span class="line">    <span class="comment"># 修改菜单</span></span><br><span class="line">    update_action = QAction(<span class="string">"修改"</span>, menu)</span><br><span class="line">    update_action.triggered.connect(self.open_update_email_config)  <span class="comment"># open_update_email_config需要自己实现</span></span><br><span class="line">    menu.addAction(update_action)</span><br><span class="line">    <span class="comment"># 删除菜单</span></span><br><span class="line">    delete_action = QAction(<span class="string">"删除"</span>, menu)</span><br><span class="line">    delete_action.triggered.connect(self.delete_email_config)  <span class="comment"># delete_email_config需要自己实现</span></span><br><span class="line">    menu.addAction(delete_action)</span><br><span class="line"></span><br><span class="line">    menu.exec_(self.listWidget_2.viewport().mapToGlobal(position))</span><br><span class="line">    <span class="comment"># 表示该菜单运行在listWidget_2组件上</span></span><br></pre></td></tr></tbody></table></figure>



<h1 id="7-QT开发服务流程"><a href="#7-QT开发服务流程" class="headerlink" title="7. QT开发服务流程"></a>7. QT开发服务流程</h1><p>Dao层、Service层、Controller层</p>
<p>Dao层主要与数据库交互</p>
<p>Service层主要实现业务逻辑</p>
<p>Controller层主要处理业务层所需要的数据</p>
<p><strong>Dao层出错</strong>：</p>
<p>Dao层遇到错误，应该将其抛到Service层</p>
<p>Dao层</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EmailConfigDao</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_all_email_config</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        查询所有邮箱配置</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 实现查询逻辑</span></span><br><span class="line">        sql = <span class="string">"""</span></span><br><span class="line"><span class="string">            SELECT *</span></span><br><span class="line"><span class="string">            FROM EmailConfig</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = db.fetch_all(sql)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            <span class="built_in">print</span>(err)</span><br><span class="line">            <span class="keyword">raise</span> err</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></tbody></table></figure>

<p>Service层</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EmailConfigService</span>:</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    邮箱配置Service层</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        self.email_config_dao = EmailConfigDao()  <span class="comment"># 邮件请求队列Dao</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_all_email_config</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        查询所有邮箱配置</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 实现查询逻辑</span></span><br><span class="line">        res = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = self.email_config_dao.select_all_email_config()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            <span class="built_in">print</span>(err)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">"获取数据失败"</span></span><br><span class="line">        <span class="keyword">return</span> JsonUtil.database_data_to_list_json(res)</span><br></pre></td></tr></tbody></table></figure>



<h1 id="8-启动QT的同时启动FLask"><a href="#8-启动QT的同时启动FLask" class="headerlink" title="8. 启动QT的同时启动FLask"></a>8. 启动QT的同时启动FLask</h1><p>可以在 PyQt 的主线程中启动 Flask 服务，但是为了避免阻塞 GUI，需要再线程中启动 Flask 服务。同时，当 PyQt 应用退出时，也可以关闭 Flask 服务。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FlaskThreading</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    启动Flask线程</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        self.srv = <span class="literal">None</span></span><br><span class="line">        self.app = app</span><br><span class="line">        self.ctx = self.app.app_context()</span><br><span class="line">        self.ctx.push()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        启动线程</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.srv = make_server(HOST, PORT, self.app)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Flask正在运行..."</span>)</span><br><span class="line">            self.srv.serve_forever()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"启动错误【%s】"</span> % <span class="built_in">str</span>(err))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shutdown</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        关闭线程</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.srv.shutdown()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"成功关闭Flask"</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"关闭错误【%s】"</span> % <span class="built_in">str</span>(err))</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">shutdown_flask</span>():</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    关闭Flask线程</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    flask_threading.shutdown()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 初始化Sqlite</span></span><br><span class="line">    init_table()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化窗口</span></span><br><span class="line">    qt_app = QApplication(sys.argv)</span><br><span class="line">    my_main_win = Main()</span><br><span class="line">    my_main_win.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义窗口退出事件响应</span></span><br><span class="line">    qt_app.aboutToQuit.connect(shutdown_flask)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动Flask服务</span></span><br><span class="line">    flask_threading.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动Qt</span></span><br><span class="line">    sys.exit(qt_app.<span class="built_in">exec</span>())</span><br></pre></td></tr></tbody></table></figure>



<h1 id="9-ui文件与逻辑代码分离"><a href="#9-ui文件与逻辑代码分离" class="headerlink" title="9. ui文件与逻辑代码分离"></a>9. ui文件与逻辑代码分离</h1><p>新建UI文件夹，implement为对应ui文件的逻辑文件。</p>
<img src="/2023/07/21/Qt/image-20230807174516321.png" class="" title="image-20230807174516321">

<p>可以使用继承，通过<code>self</code>访问父级属性</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QDialog</span><br><span class="line"><span class="keyword">from</span> service.EmailConfigService <span class="keyword">import</span> EmailConfigService</span><br><span class="line"><span class="keyword">from</span> UI.emailConfig <span class="keyword">import</span> Ui_Dialog</span><br><span class="line"><span class="keyword">from</span> UI.component.Message <span class="keyword">import</span> Message  <span class="comment"># 重点</span></span><br><span class="line"><span class="keyword">from</span> common.Validate <span class="keyword">import</span> Validate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EmailConfig</span>(QDialog, Ui_Dialog):  <span class="comment"># 重点</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    邮件配置窗口</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, call_back=<span class="literal">None</span>, config_mode=<span class="string">'add'</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(EmailConfig, self).__init__()</span><br><span class="line">        self.setupUi(self)</span><br><span class="line">        self.setWindowTitle(<span class="string">"邮箱配置"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        self.call_back = call_back</span><br><span class="line">        self.config_mode = config_mode  <span class="comment"># add：表示添加框；update：表示更新框</span></span><br><span class="line">        self.data = {}  <span class="comment"># 数据</span></span><br><span class="line">        self.email_config_service = EmailConfigService()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义事件</span></span><br><span class="line">        self.pushButton.clicked.connect(self.save)  <span class="comment"># 保存</span></span><br><span class="line">        self.pushButton_2.clicked.connect(self.cancel)  <span class="comment"># 取消</span></span><br></pre></td></tr></tbody></table></figure>



<h1 id="10-主窗口"><a href="#10-主窗口" class="headerlink" title="10. 主窗口"></a>10. 主窗口</h1><p>同样使用继承</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>(QMainWindow, Ui_MainWindow):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Main, self).__init__()</span><br><span class="line">        self.setupUi(self)  <span class="comment"># 重点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"邮件和短信服务"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化变量</span></span><br><span class="line">        self.exportConfigDialog = <span class="literal">None</span>  <span class="comment"># 配置页面</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义事件</span></span><br><span class="line">        self.action.triggered.connect(self.open_config)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_config</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        打开配置导航栏</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.exportConfigDialog = ConfigDialog()</span><br><span class="line">        self.exportConfigDialog.<span class="built_in">exec</span>()</span><br></pre></td></tr></tbody></table></figure>

<p>打开窗口的写法</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">self.exportConfigDialog = ConfigDialog()</span><br><span class="line">self.exportConfigDialog.<span class="built_in">exec</span>()</span><br></pre></td></tr></tbody></table></figure>

<p>启动窗口</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 初始化窗口</span></span><br><span class="line">    qt_app = QApplication(sys.argv)</span><br><span class="line">    my_main_win = Main()</span><br><span class="line">    my_main_win.show()</span><br><span class="line">    <span class="comment"># 启动Qt</span></span><br><span class="line">    sys.exit(qt_app.<span class="built_in">exec</span>())</span><br></pre></td></tr></tbody></table></figure>



<h1 id="11-定时器"><a href="#11-定时器" class="headerlink" title="11. 定时器"></a>11. 定时器</h1><p>场景：两个线程同时使用一个日志类，该日志类会使用qt的TextBrowser将日志输出。如果日志数量太多，就会导致qt界面卡顿、闪退</p>
<p>解决方案：使用Qt定时器，将日志内容分段输出，避免使用线程的同时操作Qt</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLoggerInfo</span>(<span class="title class_ inherited__">MyLogger</span>):</span><br><span class="line">    text_browser = <span class="literal">None</span>  <span class="comment"># 日志信息框</span></span><br><span class="line">    lock = threading.Lock()  <span class="comment"># 线程锁</span></span><br><span class="line">    log_cache = []  <span class="comment"># 缓存日志</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_text_browser</span>(<span class="params">text_browser</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        设置日志信息框</span></span><br><span class="line"><span class="string">        :param text_browser:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        MyLoggerInfo.text_browser = text_browser</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_log</span>(<span class="params">self, msg, level=<span class="string">'INFO'</span></span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        输出日志</span></span><br><span class="line"><span class="string">        :param msg: 日志信息</span></span><br><span class="line"><span class="string">        :param level: 日志等级</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">with</span> self.lock:</span><br><span class="line">            text_log = <span class="built_in">super</span>().print_log(msg, level)</span><br><span class="line">            MyLoggerInfo.log_cache.append(StringUtils.get_formate_info_color(msg, level))</span><br><span class="line">            <span class="keyword">return</span> text_log</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">display_logs</span>():</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        用于分段输出日志</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        show_logs_num = <span class="number">10</span>  <span class="comment"># 每次输出最大日志数</span></span><br><span class="line">        to_show = MyLoggerInfo.log_cache[:show_logs_num]  <span class="comment"># 需要输出的日志</span></span><br><span class="line">        MyLoggerInfo.log_cache = MyLoggerInfo.log_cache[show_logs_num:]  <span class="comment"># 清除已输出的日志</span></span><br><span class="line">        <span class="keyword">for</span> log_msg <span class="keyword">in</span> to_show:</span><br><span class="line">            <span class="keyword">if</span> MyLoggerInfo.text_browser <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># textBrowser显示日志内容</span></span><br><span class="line">                MyLoggerInfo.text_browser.append(log_msg)</span><br><span class="line">                <span class="comment"># 添加完提示框之后，自动向下滑</span></span><br><span class="line">                MyLoggerInfo.text_browser.verticalScrollBar().setValue(</span><br><span class="line">                    MyLoggerInfo.text_browser.verticalScrollBar().maximum())</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 初始化Sqlite</span></span><br><span class="line">    init_table()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化窗口</span></span><br><span class="line">    qt_app = QApplication(sys.argv)</span><br><span class="line">    my_main_win = Main()</span><br><span class="line">    timer = QTimer()</span><br><span class="line"></span><br><span class="line">    my_logger_info = MyLoggerInfo()  <span class="comment"># 日志对象</span></span><br><span class="line">    MyLoggerInfo.set_text_browser(my_main_win.textBrowser_2)</span><br><span class="line"></span><br><span class="line">    timer.timeout.connect(my_logger_info.display_logs)  <span class="comment"># 绑定日志显示函数</span></span><br><span class="line">    timer.start(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义窗口退出事件响应</span></span><br><span class="line">    qt_app.aboutToQuit.connect(my_main_win.shutdown_threading)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启线程</span></span><br><span class="line">    my_main_win.open_threading()</span><br><span class="line"></span><br><span class="line">    my_main_win.showMaximized()</span><br><span class="line">    my_main_win.show()</span><br><span class="line">    <span class="comment"># 启动Qt</span></span><br><span class="line">    sys.exit(qt_app.<span class="built_in">exec</span>())</span><br></pre></td></tr></tbody></table></figure>

<ol>
<li>在该日志类添加一个缓存日志<code>log_cache</code>，使用静态是为了保证所有的日志都在该缓存日志里</li>
<li>在该日志类添加一个输出日志方法<code>display_logs</code>，用于展示日志信息</li>
<li>在主函数中，实例化定时器，将<code>display_logs</code>方法绑定到该定时器中</li>
</ol>
</body></html>]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>React实战笔记</title>
    <url>//2024/04/03/React%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="React实战案例"><a href="#React实战案例" class="headerlink" title="React实战案例"></a>React实战案例</h1><p>项目名称：图书管理系统</p>
<h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><h3 id="ER图"><a href="#ER图" class="headerlink" title="ER图"></a>ER图</h3><h3 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h3><h3 id="数据库表清单"><a href="#数据库表清单" class="headerlink" title="数据库表清单"></a>数据库表清单</h3><table>
<thead>
<tr>
<th>名称</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>user</td>
<td>用户表</td>
</tr>
<tr>
<td>book</td>
<td>图书表</td>
</tr>
<tr>
<td>borrow_record</td>
<td>借阅记录表</td>
</tr>
</tbody></table>
<h3 id="数据库表详细内容"><a href="#数据库表详细内容" class="headerlink" title="数据库表详细内容"></a>数据库表详细内容</h3><h4 id="user（用户表）"><a href="#user（用户表）" class="headerlink" title="user（用户表）"></a>user（用户表）</h4><table>
<thead>
<tr>
<th>列名</th>
<th>类型</th>
<th>长度</th>
<th>默认值</th>
<th>键</th>
<th>是否为空</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>user_id</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>用户ID</td>
</tr>
<tr>
<td>username</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>用户名</td>
</tr>
<tr>
<td>password</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>密码</td>
</tr>
<tr>
<td>user_type</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>用户类型</td>
</tr>
<tr>
<td>register_time</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>注册时间</td>
</tr>
</tbody></table>
<h4 id="book（图书表）"><a href="#book（图书表）" class="headerlink" title="book（图书表）"></a>book（图书表）</h4><table>
<thead>
<tr>
<th>列名</th>
<th>类型</th>
<th>长度</th>
<th>默认值</th>
<th>键</th>
<th>是否为空</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>book_id</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>图书ID</td>
</tr>
<tr>
<td>title</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>书名</td>
</tr>
<tr>
<td>author</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>作者</td>
</tr>
<tr>
<td>publisher</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>出版社</td>
</tr>
<tr>
<td>publish_date</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>出版日期</td>
</tr>
<tr>
<td>isbn</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>ISBN</td>
</tr>
<tr>
<td>category</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>分类</td>
</tr>
<tr>
<td>stock</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>库存</td>
</tr>
</tbody></table>
<h4 id="borrow-record（借阅记录表）"><a href="#borrow-record（借阅记录表）" class="headerlink" title="borrow_record（借阅记录表）"></a>borrow_record（借阅记录表）</h4><table>
<thead>
<tr>
<th>列名</th>
<th>类型</th>
<th>长度</th>
<th>默认值</th>
<th>键</th>
<th>是否为空</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>record_id</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>记录ID</td>
</tr>
<tr>
<td>user_id</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>用户ID</td>
</tr>
<tr>
<td>book_id</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>图书ID</td>
</tr>
<tr>
<td>borrow_time</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>借阅时间</td>
</tr>
<tr>
<td>return_time</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>归还时间</td>
</tr>
<tr>
<td>status</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>状态</td>
</tr>
</tbody></table>
<p>数据库设计：</p>
<ol>
<li>用户表（User）<ul>
<li>用户ID（UserID）：主键，自增长</li>
<li>用户名（Username）：唯一，非空</li>
<li>密码（Password）：非空</li>
<li>用户类型（UserType）：普通用户、管理员</li>
<li>注册时间（RegisterTime）：时间戳</li>
</ul>
</li>
<li>图书表（Book）<ul>
<li>图书ID（BookID）：主键，自增长</li>
<li>书名（Title）：非空</li>
<li>作者（Author）：非空</li>
<li>出版社（Publisher）：非空</li>
<li>出版日期（PublishDate）：日期</li>
<li>ISBN（ISBN）：唯一</li>
<li>分类（Category）：非空</li>
<li>库存（Stock）：非负整数</li>
</ul>
</li>
<li>借阅记录表（BorrowRecord）<ul>
<li>记录ID（RecordID）：主键，自增长</li>
<li>用户ID（UserID）：外键，关联用户表</li>
<li>图书ID（BookID）：外键，关联图书表</li>
<li>借阅时间（BorrowTime）：时间戳</li>
<li>归还时间（ReturnTime）：时间戳，允许为空</li>
<li>状态（Status）：未归还、已归还</li>
</ul>
</li>
</ol>
<h2 id="具体功能"><a href="#具体功能" class="headerlink" title="具体功能"></a>具体功能</h2><h3 id="用户注册与登录"><a href="#用户注册与登录" class="headerlink" title="用户注册与登录"></a>用户注册与登录</h3><ul>
<li>用户可以注册账号并登录系统</li>
<li>管理员可以管理用户信息</li>
</ul>
<h3 id="图书查询"><a href="#图书查询" class="headerlink" title="图书查询"></a>图书查询</h3><ul>
<li>用户可以根据书名、作者、分类等条件查询图书</li>
<li>显示图书详细信息，如出版日期、库存等</li>
</ul>
<h3 id="借阅图书"><a href="#借阅图书" class="headerlink" title="借阅图书"></a>借阅图书</h3><ul>
<li>用户可以查看可借阅的图书列表</li>
<li>用户可以借阅图书，系统自动更新库存和借阅记录</li>
</ul>
<h3 id="归还图书"><a href="#归还图书" class="headerlink" title="归还图书"></a>归还图书</h3><ul>
<li>用户可以归还图书，系统自动更新借阅记录和库存</li>
</ul>
<h3 id="管理员功能"><a href="#管理员功能" class="headerlink" title="管理员功能"></a>管理员功能</h3><ul>
<li>管理员可以添加、修改、删除图书信息</li>
<li>管理员可以查看所有借阅记录</li>
<li>管理员可以管理用户信息，如禁用账号等</li>
</ul>
<h3 id="统计报表"><a href="#统计报表" class="headerlink" title="统计报表"></a>统计报表</h3><ul>
<li>系统可以生成各类统计报表，如借阅排行榜、库存报警等</li>
</ul>
</body></html>]]></content>
  </entry>
  <entry>
    <title>React笔记</title>
    <url>//2024/04/02/React%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="脚手架方式"><a href="#脚手架方式" class="headerlink" title="脚手架方式"></a>脚手架方式</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">cnpm install -g create-react-app</span><br></pre></td></tr></tbody></table></figure>

<h2 id="CDN方式"><a href="#CDN方式" class="headerlink" title="CDN方式"></a>CDN方式</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/react@18/umd/react.development.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/react-dom@18/umd/react-dom.development.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/@babel/standalone/babel.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>



<h1 id="构建命令"><a href="#构建命令" class="headerlink" title="构建命令"></a>构建命令</h1><h1 id="React知识点"><a href="#React知识点" class="headerlink" title="React知识点"></a>React知识点</h1><h2 id="组件和JSX"><a href="#组件和JSX" class="headerlink" title="组件和JSX"></a>组件和JSX</h2><h3 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h3><h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><h2 id="插值和状态"><a href="#插值和状态" class="headerlink" title="插值和状态"></a>插值和状态</h2><h2 id="挂载和状态设置"><a href="#挂载和状态设置" class="headerlink" title="挂载和状态设置"></a>挂载和状态设置</h2><h3 id="组件挂载"><a href="#组件挂载" class="headerlink" title="组件挂载"></a>组件挂载</h3><h3 id="状态设置"><a href="#状态设置" class="headerlink" title="状态设置"></a>状态设置</h3><h4 id="异步修改"><a href="#异步修改" class="headerlink" title="异步修改"></a>异步修改</h4><h4 id="同步修改"><a href="#同步修改" class="headerlink" title="同步修改"></a>同步修改</h4><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h2 id="拆组件"><a href="#拆组件" class="headerlink" title="拆组件"></a>拆组件</h2><h2 id="事件处理器"><a href="#事件处理器" class="headerlink" title="事件处理器"></a>事件处理器</h2><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h2></body></html>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqlit笔记</title>
    <url>//2023/08/08/Sqlit%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="1-解决错误：Error-binding-parameter-X-probably-unsupported-type"><a href="#1-解决错误：Error-binding-parameter-X-probably-unsupported-type" class="headerlink" title="1. 解决错误：Error binding parameter X - probably unsupported type"></a>1. 解决错误：Error binding parameter X - probably unsupported type</h1><p>错误的意思是，绑定的属性错误，可能是不支持的类型</p>
<p>SQLite支持以下几种数据类型：NULL、INTEGER、REAL（浮点数字）、TEXT和BLOB。</p>
<p>Python会自动映射</p>
<blockquote>
<p>int -&gt; INTEGER</p>
<p>float -&gt; REAL</p>
<p>str -&gt;TEXT</p>
</blockquote>
<p>然而，并非所有Python的数据类型都可以被SQLite支持。例如，字典（dict）、列表（list）不能</p>
<h1 id="2-Sqlit支持的类型"><a href="#2-Sqlit支持的类型" class="headerlink" title="2. Sqlit支持的类型"></a>2. Sqlit支持的类型</h1><p>SQLite数据库系统支持以下五种基本的数据类型：</p>
<ol>
<li><strong>NULL</strong>：这种类型的值表示缺失的数据或未知的数据。</li>
<li><strong>INTEGER</strong>：这种类型的值是一个有符号的整数，根据值的大小，存储大小可以是1、2、3、4、6或8字节。</li>
<li><strong>REAL</strong>：这种类型的值是一个浮点值，存储为8字节的IEEE浮点数。</li>
<li><strong>TEXT</strong>：这种类型的值是一个文本字符串，存储使用数据库编码（UTF-8、UTF-16BE或UTF-16LE）。</li>
<li><strong>BLOB</strong>：这种类型的值是一个blob数据，即二进制大对象，存储的是二进制数据。</li>
</ol>
<p>此外，SQLite支持类型别名（例如，允许你使用<code>INT</code>代替<code>INTEGER</code>，<code>VARCHAR</code>代替<code>TEXT</code>等），并且你可以在创建表时为列指定几乎任何名称作为数据类型（例如，<code>BOOLEAN</code>，<code>DATETIME</code>等）。但是，这些自定义类型名称最终都会被映射到上述五种基本类型。 </p>
</body></html>]]></content>
      <tags>
        <tag>Python</tag>
        <tag>sqlit</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora笔记</title>
    <url>//2024/02/21/Typora%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="配置标题分级自动编号"><a href="#配置标题分级自动编号" class="headerlink" title="配置标题分级自动编号"></a>配置标题分级自动编号</h1><h2 id="打开主题文件夹"><a href="#打开主题文件夹" class="headerlink" title="打开主题文件夹"></a>打开主题文件夹</h2><img src="/2024/02/21/Typora%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTAzMjgz,size_16,color_FFFFFF,t_70.png" class="" title="在这里插入图片描述">

<h2 id="新建base-user-css文件"><a href="#新建base-user-css文件" class="headerlink" title="新建base.user.css文件"></a>新建base.user.css文件</h2><h2 id="添加内容1-分级标题有编号"><a href="#添加内容1-分级标题有编号" class="headerlink" title="添加内容1-分级标题有编号"></a>添加内容1-分级标题有编号</h2><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/** initialize css counter */</span></span><br><span class="line"><span class="selector-id">#write</span> {</span><br><span class="line">    <span class="attribute">counter-reset</span>: h1</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> {</span><br><span class="line">    <span class="attribute">counter-reset</span>: h2</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> {</span><br><span class="line">    <span class="attribute">counter-reset</span>: h3</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h3</span> {</span><br><span class="line">    <span class="attribute">counter-reset</span>: h4</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h4</span> {</span><br><span class="line">    <span class="attribute">counter-reset</span>: h5</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h5</span> {</span><br><span class="line">    <span class="attribute">counter-reset</span>: h6</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/** put counter result into headings */</span></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h1</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">counter-increment</span>: h1;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">". "</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">counter-increment</span>: h2;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">"."</span> <span class="built_in">counter</span>(h2) <span class="string">". "</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h3</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h3</span><span class="selector-class">.md-focus</span><span class="selector-class">.md-heading</span><span class="selector-pseudo">:before</span> <span class="comment">/** override the default style for focused headings */</span> {</span><br><span class="line">    <span class="attribute">counter-increment</span>: h3;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">"."</span> <span class="built_in">counter</span>(h2) <span class="string">"."</span> <span class="built_in">counter</span>(h3) <span class="string">". "</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h4</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h4</span><span class="selector-class">.md-focus</span><span class="selector-class">.md-heading</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">counter-increment</span>: h4;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">"."</span> <span class="built_in">counter</span>(h2) <span class="string">"."</span> <span class="built_in">counter</span>(h3) <span class="string">"."</span> <span class="built_in">counter</span>(h4) <span class="string">". "</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h5</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h5</span><span class="selector-class">.md-focus</span><span class="selector-class">.md-heading</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">counter-increment</span>: h5;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">"."</span> <span class="built_in">counter</span>(h2) <span class="string">"."</span> <span class="built_in">counter</span>(h3) <span class="string">"."</span> <span class="built_in">counter</span>(h4) <span class="string">"."</span> <span class="built_in">counter</span>(h5) <span class="string">". "</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h6</span><span class="selector-class">.md-focus</span><span class="selector-class">.md-heading</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">counter-increment</span>: h6;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">"."</span> <span class="built_in">counter</span>(h2) <span class="string">"."</span> <span class="built_in">counter</span>(h3) <span class="string">"."</span> <span class="built_in">counter</span>(h4) <span class="string">"."</span> <span class="built_in">counter</span>(h5) <span class="string">"."</span> <span class="built_in">counter</span>(h6) <span class="string">". "</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/** override the default style for focused headings */</span></span><br><span class="line"><span class="selector-id">#write</span>&gt;<span class="selector-tag">h3</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#write</span>&gt;<span class="selector-tag">h4</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#write</span>&gt;<span class="selector-tag">h5</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#write</span>&gt;<span class="selector-tag">h6</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h3</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h4</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h5</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h6</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">color</span>: inherit;</span><br><span class="line">    <span class="attribute">border</span>: inherit;</span><br><span class="line">    <span class="attribute">border-radius</span>: inherit;</span><br><span class="line">    <span class="attribute">position</span>: inherit;</span><br><span class="line">    <span class="attribute">left</span>:initial;</span><br><span class="line">    <span class="attribute">float</span>: none;</span><br><span class="line">    <span class="attribute">top</span>:initial;</span><br><span class="line">    <span class="attribute">font-size</span>: inherit;</span><br><span class="line">    <span class="attribute">padding-left</span>: inherit;</span><br><span class="line">    <span class="attribute">padding-right</span>: inherit;</span><br><span class="line">    <span class="attribute">vertical-align</span>: inherit;</span><br><span class="line">    <span class="attribute">font-weight</span>: inherit;</span><br><span class="line">    <span class="attribute">line-height</span>: inherit;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="添加内容2-目录TOC有编号"><a href="#添加内容2-目录TOC有编号" class="headerlink" title="添加内容2-目录TOC有编号"></a>添加内容2-目录TOC有编号</h2><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**************************************</span></span><br><span class="line"><span class="comment"> * Header Counters in TOC</span></span><br><span class="line"><span class="comment"> **************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* No link underlines in TOC */</span></span><br><span class="line"><span class="selector-class">.md-toc-inner</span> {</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-content</span> {</span><br><span class="line">    <span class="attribute">counter-reset</span>: h1toc</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h1</span> {</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h2toc</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h2</span> {</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h3toc</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h3</span> {</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">3rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">9rem</span>;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h4toc</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h4</span> {</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">4rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">85rem</span>;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h5toc</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h5</span> {</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">8rem</span>;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h6toc</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h6</span> {</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">6rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">75rem</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h1</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h1toc;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1toc) <span class="string">". "</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h1</span> <span class="selector-class">.md-toc-inner</span> {</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h2</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h2toc;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1toc) <span class="string">". "</span> <span class="built_in">counter</span>(h2toc) <span class="string">". "</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h2</span> <span class="selector-class">.md-toc-inner</span> {</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h3</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h3toc;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1toc) <span class="string">". "</span> <span class="built_in">counter</span>(h2toc) <span class="string">". "</span> <span class="built_in">counter</span>(h3toc) <span class="string">". "</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h3</span> <span class="selector-class">.md-toc-inner</span> {</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h4</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h4toc;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1toc) <span class="string">". "</span> <span class="built_in">counter</span>(h2toc) <span class="string">". "</span> <span class="built_in">counter</span>(h3toc) <span class="string">". "</span> <span class="built_in">counter</span>(h4toc) <span class="string">". "</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h4</span> <span class="selector-class">.md-toc-inner</span> {</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h5</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h5toc;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1toc) <span class="string">". "</span> <span class="built_in">counter</span>(h2toc) <span class="string">". "</span> <span class="built_in">counter</span>(h3toc) <span class="string">". "</span> <span class="built_in">counter</span>(h4toc) <span class="string">". "</span> <span class="built_in">counter</span>(h5toc) <span class="string">". "</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h5</span> <span class="selector-class">.md-toc-inner</span> {</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h6</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h6toc;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1toc) <span class="string">". "</span> <span class="built_in">counter</span>(h2toc) <span class="string">". "</span> <span class="built_in">counter</span>(h3toc) <span class="string">". "</span> <span class="built_in">counter</span>(h4toc) <span class="string">". "</span> <span class="built_in">counter</span>(h5toc) <span class="string">". "</span> <span class="built_in">counter</span>(h6toc) <span class="string">". "</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h6</span> <span class="selector-class">.md-toc-inner</span> {</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************</span></span><br><span class="line"><span class="comment"> * Header Counters in Content</span></span><br><span class="line"><span class="comment"> **************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** initialize css counter */</span></span><br><span class="line"><span class="selector-id">#write</span> {</span><br><span class="line">    <span class="attribute">counter-reset</span>: h1</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> {</span><br><span class="line">    <span class="attribute">counter-reset</span>: h2</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> {</span><br><span class="line">    <span class="attribute">counter-reset</span>: h3</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h3</span> {</span><br><span class="line">    <span class="attribute">counter-reset</span>: h4</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h4</span> {</span><br><span class="line">    <span class="attribute">counter-reset</span>: h5</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h5</span> {</span><br><span class="line">    <span class="attribute">counter-reset</span>: h6</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/** put counter result into headings */</span></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h1</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">counter-increment</span>: h1;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">". "</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">counter-increment</span>: h2;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">"."</span> <span class="built_in">counter</span>(h2) <span class="string">". "</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h3</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">h3</span><span class="selector-class">.md-focus</span><span class="selector-class">.md-heading</span><span class="selector-pseudo">:before</span> { <span class="comment">/*override the default style for focused headings */</span></span><br><span class="line">    <span class="attribute">counter-increment</span>: h3;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">"."</span> <span class="built_in">counter</span>(h2) <span class="string">"."</span> <span class="built_in">counter</span>(h3) <span class="string">". "</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h4</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">h4</span><span class="selector-class">.md-focus</span><span class="selector-class">.md-heading</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">counter-increment</span>: h4;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">"."</span> <span class="built_in">counter</span>(h2) <span class="string">"."</span> <span class="built_in">counter</span>(h3) <span class="string">"."</span> <span class="built_in">counter</span>(h4) <span class="string">". "</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h5</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">h5</span><span class="selector-class">.md-focus</span><span class="selector-class">.md-heading</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">counter-increment</span>: h5;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">"."</span> <span class="built_in">counter</span>(h2) <span class="string">"."</span> <span class="built_in">counter</span>(h3) <span class="string">"."</span> <span class="built_in">counter</span>(h4) <span class="string">"."</span> <span class="built_in">counter</span>(h5) <span class="string">". "</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">h6</span><span class="selector-class">.md-focus</span><span class="selector-class">.md-heading</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">counter-increment</span>: h6;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">"."</span> <span class="built_in">counter</span>(h2) <span class="string">"."</span> <span class="built_in">counter</span>(h3) <span class="string">"."</span> <span class="built_in">counter</span>(h4) <span class="string">"."</span> <span class="built_in">counter</span>(h5) <span class="string">"."</span> <span class="built_in">counter</span>(h6) <span class="string">". "</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/** override the default style for focused headings */</span></span><br><span class="line"><span class="selector-id">#write</span>&gt;<span class="selector-tag">h3</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>, <span class="selector-id">#write</span>&gt;<span class="selector-tag">h4</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>, <span class="selector-id">#write</span>&gt;<span class="selector-tag">h5</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>, <span class="selector-id">#write</span>&gt;<span class="selector-tag">h6</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">h3</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">h4</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">h5</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">h6</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">color</span>: inherit;</span><br><span class="line">    <span class="attribute">border</span>: inherit;</span><br><span class="line">    <span class="attribute">border-radius</span>: inherit;</span><br><span class="line">    <span class="attribute">position</span>: inherit;</span><br><span class="line">    <span class="attribute">left</span>: initial;</span><br><span class="line">    <span class="attribute">float</span>: none;</span><br><span class="line">    <span class="attribute">top</span>: initial;</span><br><span class="line">    <span class="attribute">font-size</span>: inherit;</span><br><span class="line">    <span class="attribute">padding-left</span>: inherit;</span><br><span class="line">    <span class="attribute">padding-right</span>: inherit;</span><br><span class="line">    <span class="attribute">vertical-align</span>: inherit;</span><br><span class="line">    <span class="attribute">font-weight</span>: inherit;</span><br><span class="line">    <span class="attribute">line-height</span>: inherit;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="添加内容3-侧边栏大纲自动编号"><a href="#添加内容3-侧边栏大纲自动编号" class="headerlink" title="添加内容3-侧边栏大纲自动编号"></a>添加内容3-侧边栏大纲自动编号</h2><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.sidebar-content</span> {</span><br><span class="line">    <span class="attribute">counter-reset</span>: h1</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outline-h1</span> {</span><br><span class="line">    <span class="attribute">counter-reset</span>: h2</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outline-h2</span> {</span><br><span class="line">    <span class="attribute">counter-reset</span>: h3</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outline-h3</span> {</span><br><span class="line">    <span class="attribute">counter-reset</span>: h4</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outline-h4</span> {</span><br><span class="line">    <span class="attribute">counter-reset</span>: h5</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outline-h5</span> {</span><br><span class="line">    <span class="attribute">counter-reset</span>: h6</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outline-h1</span>&gt;<span class="selector-class">.outline-item</span>&gt;<span class="selector-class">.outline-label</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">counter-increment</span>: h1;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">". "</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outline-h2</span>&gt;<span class="selector-class">.outline-item</span>&gt;<span class="selector-class">.outline-label</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">counter-increment</span>: h2;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">"."</span> <span class="built_in">counter</span>(h2) <span class="string">". "</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outline-h3</span>&gt;<span class="selector-class">.outline-item</span>&gt;<span class="selector-class">.outline-label</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">counter-increment</span>: h3;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">"."</span> <span class="built_in">counter</span>(h2) <span class="string">"."</span> <span class="built_in">counter</span>(h3) <span class="string">". "</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outline-h4</span>&gt;<span class="selector-class">.outline-item</span>&gt;<span class="selector-class">.outline-label</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">counter-increment</span>: h4;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">"."</span> <span class="built_in">counter</span>(h2) <span class="string">"."</span> <span class="built_in">counter</span>(h3) <span class="string">"."</span> <span class="built_in">counter</span>(h4) <span class="string">". "</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outline-h5</span>&gt;<span class="selector-class">.outline-item</span>&gt;<span class="selector-class">.outline-label</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">counter-increment</span>: h5;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">"."</span> <span class="built_in">counter</span>(h2) <span class="string">"."</span> <span class="built_in">counter</span>(h3) <span class="string">"."</span> <span class="built_in">counter</span>(h4) <span class="string">"."</span> <span class="built_in">counter</span>(h5) <span class="string">". "</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outline-h6</span>&gt;<span class="selector-class">.outline-item</span>&gt;<span class="selector-class">.outline-label</span><span class="selector-pseudo">:before</span> {</span><br><span class="line">    <span class="attribute">counter-increment</span>: h6;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">"."</span> <span class="built_in">counter</span>(h2) <span class="string">"."</span> <span class="built_in">counter</span>(h3) <span class="string">"."</span> <span class="built_in">counter</span>(h4) <span class="string">"."</span> <span class="built_in">counter</span>(h5) <span class="string">"."</span> <span class="built_in">counter</span>(h6) <span class="string">". "</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h1 id="添加代码块默认语言"><a href="#添加代码块默认语言" class="headerlink" title="添加代码块默认语言"></a>添加代码块默认语言</h1><ol>
<li><p>找到并打开<code>frame.js</code>文件<img src="/2024/02/21/Typora%E7%AC%94%E8%AE%B0/image-20240407014038552.png" class="" title="image-20240407014038552"></p>
</li>
<li><p>打开frame.js 全局搜索“select a language”</p>
</li>
<li><p>添加默认语言<img src="/2024/02/21/Typora%E7%AC%94%E8%AE%B0/image-20240407014227835.png" class="" title="image-20240407014227835"></p>
</li>
</ol>
</body></html>]]></content>
  </entry>
  <entry>
    <title>Vscode笔记</title>
    <url>//2023/10/06/Vscode%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="无法加载文件，因为在此系统上禁止运行脚本"><a href="#无法加载文件，因为在此系统上禁止运行脚本" class="headerlink" title="无法加载文件，因为在此系统上禁止运行脚本"></a>无法加载文件，因为在此系统上禁止运行脚本</h2><p>使用管理员身份打开<code>powershell</code></p>
<p>输入命令，再输入<code>y</code>即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <tags>
        <tag>Vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy笔记</title>
    <url>//2024/03/31/Scrapy%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>创建项目</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">scrapy startproject demo</span><br></pre></td></tr></tbody></table></figure>

<p>创建爬虫</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">scrapy genspider douban movie.douban.com</span><br></pre></td></tr></tbody></table></figure>



<h1 id="字段定义"><a href="#字段定义" class="headerlink" title="字段定义"></a>字段定义</h1><h1 id="爬虫引擎"><a href="#爬虫引擎" class="headerlink" title="爬虫引擎"></a>爬虫引擎</h1><h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><h2 id="图片下载器"><a href="#图片下载器" class="headerlink" title="图片下载器"></a>图片下载器</h2></body></html>]]></content>
  </entry>
  <entry>
    <title>Ubuntu笔记</title>
    <url>//2024/02/18/Ubuntu%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="Ubuntu不同的版本"><a href="#Ubuntu不同的版本" class="headerlink" title="Ubuntu不同的版本"></a>Ubuntu不同的版本</h1><img src="/2024/02/18/Ubuntu%E7%AC%94%E8%AE%B0/image-20240218135542945.png" class="" title="image-20240218135542945">

<ul>
<li>Ubuntu-CD是用于安装桌面版Ubuntu操作系统的安装光盘；</li>
<li>Ubuntu-Cloud是专为云计算环境设计的Ubuntu版本；</li>
<li>Ubuntu-Ports是针对特定硬件架构（如ARM架构）的Ubuntu版本；</li>
<li>Ubuntu-Releases是发布的Ubuntu版本的存档。</li>
</ul>
<h1 id="设置root密码"><a href="#设置root密码" class="headerlink" title="设置root密码"></a>设置root密码</h1><ol>
<li>输入命令<code>sudo passwd root</code></li>
<li>输入当前用户的密码</li>
<li>输入root的密码，不少于8位</li>
<li>再次输入</li>
</ol>
</body></html>]]></content>
      <tags>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10笔记</title>
    <url>//2023/09/04/Win10%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="删除有权限的文件夹"><a href="#删除有权限的文件夹" class="headerlink" title="删除有权限的文件夹"></a>删除有权限的文件夹</h1><p>删除一个文件夹需要管理员权限</p>
<img src="/2023/09/04/Win10%E7%AC%94%E8%AE%B0/image-20230904171505043.png" class="" title="image-20230904171505043">

<p>可以在当前文件夹下输入命令<code>rmdir</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">PS E:\wesofte\项目\xxx&gt; <span class="built_in">rmdir</span></span><br><span class="line"></span><br><span class="line">位于命令管道位置 1 的 cmdlet Remove-Item</span><br><span class="line">请为以下参数提供值:</span><br><span class="line">Path[0]: dir_name</span><br><span class="line">Path[1]:</span><br><span class="line"></span><br><span class="line">确认</span><br><span class="line">E:\wesofte\项目\xxx\dir_name 处的项具有子项，并且未指定 Recurse</span><br><span class="line">参数。如果继续，所有子项均将随该项删除。是否确实要继续?</span><br><span class="line">[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助 (默认值为“Y”): A</span><br><span class="line">PS E:\wesofte\项目\xxx&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>在<code>Path[0]:</code>后输入文件夹名称，遇到<code>Path[1]:</code>直接回车；</p>
<p>之后选择子项全部删除<code>[A] 全是(A)</code></p>
<h1 id="查看端口占用情况"><a href="#查看端口占用情况" class="headerlink" title="查看端口占用情况"></a>查看端口占用情况</h1><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></tbody></table></figure>

<p>该命令可以查看端口号和PID</p>
<p>根据对应的PID在任务管理器找到对应的应用程序</p>
<h1 id="切换窗口取消切换浏览器标签"><a href="#切换窗口取消切换浏览器标签" class="headerlink" title="切换窗口取消切换浏览器标签"></a>切换窗口取消切换浏览器标签</h1><p><img src="F:\blob\blob\source_posts\Win10笔记\image-20231001021716820.png" alt="image-20231001021716820"></p>
<p><img src="F:\blob\blob\source_posts\Win10笔记\image-20231001021822622.png" alt="image-20231001021822622"></p>
<p>打开win10设置，找到多任务处理，Alt+Tab选择”仅打开的窗口“</p>
<h1 id="设置win10自带微软输入法词库"><a href="#设置win10自带微软输入法词库" class="headerlink" title="设置win10自带微软输入法词库"></a>设置win10自带微软输入法词库</h1><p><img src="F:\blob\blob\source_posts\Win10笔记\image-20231001162457537.png" alt="image-20231001162457537"></p>
<p>右键输入法，选择用户自定义词库</p>
<p><img src="F:\blob\blob\source_posts\Win10笔记\image-20231001162554376.png" alt="image-20231001162554376"></p>
<p>选择添加用户定义的短语，添加短语<br>拼音就是在触发短语的时候字符，短句即为模板</p>
<blockquote>
<p>%yyyy%%MM%%dd%	输出格式 20200407<br>%yyyy%-%MM%-%dd% %HH%:%mm%:%ss%	输出格式 2020-04-07 14:42:59<br>%yyyy%年%MM%月%dd%日 %HH%:%mm%:%ss%	输出格式 2020年04月07日 14:42:59</p>
</blockquote>
<h1 id="将此电脑等图标显示到桌面上"><a href="#将此电脑等图标显示到桌面上" class="headerlink" title="将此电脑等图标显示到桌面上"></a>将此电脑等图标显示到桌面上</h1><p>在设置界面中，选择主题，找到最底下的（或者右侧栏）的相关设置，选择桌面图标设置，勾选需要显示的图标</p>
<img src="/2023/09/04/Win10%E7%AC%94%E8%AE%B0/image-20231221091916458.png" class="" title="image-20231221091916458">



<h1 id="设置当前管理员为Administrator"><a href="#设置当前管理员为Administrator" class="headerlink" title="设置当前管理员为Administrator"></a>设置当前管理员为Administrator</h1><blockquote>
<p>注意：如果一直使用的是其他用户，无论切换到什么用户，都会清空当前的状态，有点类似重装系统</p>
</blockquote>
<p>打开此电脑的计算机管理</p>
<p>选择系统工具、本地用户和组、用户</p>
<p>将Administrator的属性取消勾选账户已禁用</p>
<img src="/2023/09/04/Win10%E7%AC%94%E8%AE%B0/image-20231221091454283.png" class="" title="image-20231221091454283">

<h1 id="设置右键打开CMD"><a href="#设置右键打开CMD" class="headerlink" title="设置右键打开CMD"></a>设置右键打开CMD</h1><p>注册表</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\cmd_here]</span><br><span class="line">@=<span class="string">"在此处打开命令行"</span></span><br><span class="line"><span class="string">"Icon"</span>=<span class="string">"cmd.exe"</span></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\cmd_here\<span class="built_in">command</span>]</span><br><span class="line">@=<span class="string">"\"C:\\Windows\\System32\\cmd.exe\""</span></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Folder\shell\cmdPrompt]</span><br><span class="line">@=<span class="string">"在此处打开命令行"</span></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Folder\shell\cmdPrompt\<span class="built_in">command</span>]</span><br><span class="line">@=<span class="string">"\"C:\\Windows\\System32\\cmd.exe\" \"cd %1\""</span></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\cmd_here]</span><br><span class="line">@=<span class="string">"在此处打开命令行"</span></span><br><span class="line"><span class="string">"Icon"</span>=<span class="string">"cmd.exe"</span></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\cmd_here\<span class="built_in">command</span>]</span><br><span class="line">@=<span class="string">"\"C:\\Windows\\System32\\cmd.exe\""</span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="查看Wifi密码"><a href="#查看Wifi密码" class="headerlink" title="查看Wifi密码"></a>查看Wifi密码</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">// 查看Wifi列表</span><br><span class="line">netsh wlan show profiles</span><br><span class="line"></span><br><span class="line">// 查看指定Wifi名称的Wifi密码</span><br><span class="line">netsh wlan show profile name=<span class="string">"wifi name"</span> key=clear</span><br></pre></td></tr></tbody></table></figure>

<h1 id="切换多桌面"><a href="#切换多桌面" class="headerlink" title="切换多桌面"></a>切换多桌面</h1><p>win + ctrl + D 新建桌面</p>
<p>win + ctrl + 方向键 切换桌面</p>
<p>win + ctrl + F4 删除当前桌面</p>
</body></html>]]></content>
      <tags>
        <tag>win10</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10重装笔记</title>
    <url>//2023/09/04/win10%E9%87%8D%E8%A3%85%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="跳过登录微软帐户"><a href="#跳过登录微软帐户" class="headerlink" title="跳过登录微软帐户"></a>跳过登录微软帐户</h1><p>断掉所有网络</p>
<p>使用shift+F10打开命令框，并输入<code>OOBE\BYPASSNRO</code></p>
</body></html>]]></content>
      <tags>
        <tag>win10</tag>
      </tags>
  </entry>
  <entry>
    <title>electron笔记</title>
    <url>//2023/10/06/electron%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="安装electron"><a href="#安装electron" class="headerlink" title="安装electron"></a>安装electron</h1><p>安装<code>cnpm</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure>

<p>使用cnpm安装electron，防止安装错误</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">cnpm install -g electron</span><br></pre></td></tr></tbody></table></figure>



<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>在一个空的<code>node</code>项目中执行<code>node</code>初始化命令</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></tbody></table></figure>

<p>在该项目中安装<code>electron</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">cnpm install --save-dev electron</span><br></pre></td></tr></tbody></table></figure>

<p>可以发现<code>package.json</code>文件的<code>devDependencies</code>多了<code>electron</code>，证明安装成功。<br>安装成功后，在<code>scripts</code>写上<code>electron .</code>，后续用于启动<code>electron</code></p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"electron_test"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"version"</span><span class="punctuation">:</span> <span class="string">"1.0.0"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">""</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"main"</span><span class="punctuation">:</span> <span class="string">"main.js"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"scripts"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"start"</span><span class="punctuation">:</span> <span class="string">"electron ."</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"author"</span><span class="punctuation">:</span> <span class="string">""</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"license"</span><span class="punctuation">:</span> <span class="string">"ISC"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"devDependencies"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"electron"</span><span class="punctuation">:</span> <span class="string">"^26.2.4"</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>

<p>其中<code>main</code>对应的<code>main.js</code>表示electron的入口文件</p>
<p>由于空项目中还没有需要我们创建，并且创建到根目录下</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> { app, <span class="title class_">BrowserWindow</span> } = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="comment">// 创建浏览器窗口</span></span><br><span class="line">    <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>({</span><br><span class="line">        <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="attr">webPreferences</span>: {</span><br><span class="line">            <span class="attr">nodeIntegration</span>: <span class="literal">true</span></span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 窗口最大化</span></span><br><span class="line">    win.<span class="title function_">maximize</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载应用的index.html</span></span><br><span class="line">    win.<span class="title function_">loadFile</span>(<span class="string">'./src/index.html'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开开发者工具</span></span><br><span class="line">    <span class="comment">// win.webContents.openDevTools()</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当Electron初始化完成并且准备创建浏览器窗口时调用该方法</span></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当所有窗口都关闭时退出应用</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">'window-all-closed'</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="comment">// 在macOS上，除非用户用Cmd + Q显式退出，否则应用与菜单栏始终处于活动状态</span></span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">'darwin'</span>) {</span><br><span class="line">        app.<span class="title function_">quit</span>()</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">'activate'</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="comment">// 在macOS上，当单击dock图标并且没有其他窗口打开时，重新创建一个窗口</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">BrowserWindow</span>.<span class="title function_">getAllWindows</span>().<span class="property">length</span> === <span class="number">0</span>) {</span><br><span class="line">        <span class="title function_">createWindow</span>()</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p>最后在当前文件夹路径下，启动命令框，并执行命令启动<code>electron</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></tbody></table></figure>



<h1 id="修改图标"><a href="#修改图标" class="headerlink" title="修改图标"></a>修改图标</h1><p>需要修改<code>electron</code>右上角的图标可以在<code>main.js</code>中的<code>BrowserWindow</code>对象中修改<code>icon</code>属性</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> { app, <span class="title class_">BrowserWindow</span> } = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="comment">// 创建浏览器窗口</span></span><br><span class="line">    <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>({</span><br><span class="line">		<span class="attr">icon</span>: <span class="string">"ico的路径"</span>, </span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><p>安装<code>electron-build</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install electron-builder -g</span><br></pre></td></tr></tbody></table></figure>

<p>在<code>package.json</code>文件中写入打包配置</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"electron_test"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"version"</span><span class="punctuation">:</span> <span class="string">"1.0.0"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">""</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"main"</span><span class="punctuation">:</span> <span class="string">"main.js"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"scripts"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"start"</span><span class="punctuation">:</span> <span class="string">"electron ."</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"build"</span><span class="punctuation">:</span> <span class="string">"electron-builder --win --x64"</span>  <span class="comment">// 配置打包命令</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"author"</span><span class="punctuation">:</span> <span class="string">""</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"license"</span><span class="punctuation">:</span> <span class="string">"ISC"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"devDependencies"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"electron"</span><span class="punctuation">:</span> <span class="string">"^26.2.4"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"electron-builder"</span><span class="punctuation">:</span> <span class="string">"^24.6.4"</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"build"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"productName"</span><span class="punctuation">:</span> <span class="string">"cropImage"</span><span class="punctuation">,</span>  <span class="comment">// 软件名称</span></span><br><span class="line">    <span class="attr">"appId"</span><span class="punctuation">:</span> <span class="string">"com.zh.cropImage"</span><span class="punctuation">,</span>  <span class="comment">// 软件id</span></span><br><span class="line">    <span class="attr">"directories"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"output"</span><span class="punctuation">:</span> <span class="string">"dist"</span>  <span class="comment">// 打包输出地址</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"mac"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"icon"</span><span class="punctuation">:</span> <span class="string">"src\\static\\icon\\logo.ico"</span>  <span class="comment">// mac系统下，图标的路径</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"win"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"icon"</span><span class="punctuation">:</span> <span class="string">"src\\static\\icon\\logo.ic"</span><span class="punctuation">,</span>  <span class="comment">// windows系统下，图标的路径</span></span><br><span class="line">      <span class="attr">"target"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">"nsis"</span> </span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"nsis"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"oneClick"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span>  <span class="comment">// 是否一键安装</span></span><br><span class="line">      <span class="attr">"allowToChangeInstallationDirectory"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>  <span class="comment">// 是否允许修改安装目录</span></span><br><span class="line">      <span class="attr">"perMachine"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>  <span class="comment">// 是否以每台机器为单位进行安装</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>

<p>执行打包命令进行打包</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></tbody></table></figure>

<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><h3 id="electron-v-xxxx-zip"><a href="#electron-v-xxxx-zip" class="headerlink" title="electron-v.xxxx.zip"></a>electron-v.xxxx.zip</h3><p>下载对应文件，<strong>无需解压</strong>放到<code>AppData\Local\electron\Cache</code>目录下</p>
<p><img src="F:\blob\blob\source_posts\electron笔记\image-20231006215832415.png" alt="image-20231006215832415"></p>
<h3 id="winCodeSign-v-xxx-7z"><a href="#winCodeSign-v-xxx-7z" class="headerlink" title="winCodeSign-v.xxx.7z"></a>winCodeSign-v.xxx.7z</h3><p>下载对应文件，<strong>解压</strong>放到<code>AppData\Local\electron-builder\Cache\winCodeSign</code>目录下</p>
<p><img src="F:\blob\blob\source_posts\electron笔记\image-20231006215640752.png" alt="image-20231006215640752"></p>
<h3 id="nsis-v-xxx-7z"><a href="#nsis-v-xxx-7z" class="headerlink" title="nsis-v.xxx.7z"></a>nsis-v.xxx.7z</h3><p>下载对应文件，<strong>解压</strong>放到<code>AppData\Local\electron-builder\Cache\nsis</code>目录下</p>
<p><img src="F:\blob\blob\source_posts\electron笔记\image-20231006215543666.png" alt="image-20231006215543666"></p>
<h3 id="nsis-resources-v-xxx-7z"><a href="#nsis-resources-v-xxx-7z" class="headerlink" title="nsis-resources-v.xxx.7z"></a>nsis-resources-v.xxx.7z</h3><p>下载对应文件，<strong>解压</strong>放到<code>AppData\Local\electron-builder\Cache\nsis</code>目录下</p>
<p><img src="F:\blob\blob\source_posts\electron笔记\image-20231006215546769.png" alt="image-20231006215546769"></p>
</body></html>]]></content>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>前端设计</title>
    <url>//2023/08/04/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<html><head></head><body><h1 id="移动端适配"><a href="#移动端适配" class="headerlink" title="移动端适配"></a>移动端适配</h1><p>插件：amfe-flexible、postcss-pxtorem</p>
</body></html>]]></content>
  </entry>
  <entry>
    <title>pgsql数据库</title>
    <url>//2023/07/13/pgsql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<html><head></head><body><h1 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h1><ol>
<li>安装pgsql数据库之前，一定要确保 <code>cmd</code>的编码为 <code>GBK</code>，否则，安装期间会报错，不能自动初始化data文件夹。因为安装期间会使用命令行初始化data文件夹，如果为 <code>UTF-8</code>格式的编码就会运行失败，安装后的data文件夹为空。</li>
</ol>
<img src="/2023/07/13/pgsql%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230713190238405.png" class="" title="image-20230713190238405">

<ol start="2">
<li>如果重新启动pgsql服务失败，可能也是 <code>1.</code>原因造成的</li>
</ol>
<img src="/2023/07/13/pgsql%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230713190537076.png" class="" title="image-20230713190537076">

</body></html>]]></content>
      <tags>
        <tag>问题记录</tag>
      </tags>
  </entry>
  <entry>
    <title>发送邮件</title>
    <url>//2023/08/11/%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
    <content><![CDATA[<html><head></head><body><h1 id="一、准备数据"><a href="#一、准备数据" class="headerlink" title="一、准备数据"></a>一、准备数据</h1><ol>
<li><p>准备需要发送邮件发送端的账号</p>
</li>
<li><p>开启STMP服务</p>
<img src="/2023/08/11/%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/image-20230811164756168.png" class="" title="image-20230811164756168">
<img src="/2023/08/11/%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/image-20230811164814380.png" class="" title="image-20230811164814380">
<img src="/2023/08/11/%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/image-20230811164846225.png" class="" title="根据提示开启SMTP">
</li>
<li><p>开启服务后，保存好授权密码，该密码只会显示一次</p>
<img src="/2023/08/11/%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/image-20230811165036370.png" class="" title="image-20230811165036370">
</li>
<li><p>还需获取服务器地址和端口号。在该页面最底下有服务器地址，端口信息可以查看这篇文章<a href="https://blog.csdn.net/qq_29180565/article/details/91906635">邮箱端口列表_126邮箱端口号_冷子夜的博客-CSDN博客</a></p>
<img src="/2023/08/11/%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/image-20230811165313844.png" class="" title="image-20230811165313844"></li>
</ol>
<h1 id="二、发送邮件"><a href="#二、发送邮件" class="headerlink" title="二、发送邮件"></a>二、发送邮件</h1><p>这里使用Python演示，30行代码完成邮件发送</p>
<ol>
<li>连接服务器，<code>con = smtplib.SMTP_SSL(data['SendAddr'], data['Port'])</code></li>
<li>登录邮箱，<code>con.login(data['Username'], data['Password'])</code></li>
<li>发送邮件，<code>con.sendmail(data['Username'], data['Receiver'], msg.as_string())</code></li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"></span><br><span class="line">data = {</span><br><span class="line">    <span class="string">"SendAddr"</span>: <span class="string">"Email server address"</span>,</span><br><span class="line">    <span class="string">"Port"</span>: <span class="string">"Email server port"</span>,</span><br><span class="line">    <span class="string">"Username"</span>: <span class="string">"Sender email"</span>,</span><br><span class="line">    <span class="string">"Password"</span>: <span class="string">"Sender email password"</span>,</span><br><span class="line">    <span class="string">"Subject"</span>: <span class="string">"这是一封邮件，请注意查收！"</span>,</span><br><span class="line">    <span class="string">"Content"</span>: <span class="string">"这是邮件内容..."</span>,</span><br><span class="line">    <span class="string">"Receiver"</span>: [<span class="string">'Receiver email 1'</span>]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置邮件内容</span></span><br><span class="line">msg = MIMEMultipart()</span><br><span class="line">msg[<span class="string">'From'</span>] = data[<span class="string">"Username"</span>]  <span class="comment"># 该邮件的发送端</span></span><br><span class="line">msg[<span class="string">"Subject"</span>] = data[<span class="string">'Subject'</span>]  <span class="comment"># 该邮件的主题</span></span><br><span class="line">msg.attach(MIMEText(data[<span class="string">'Content'</span>], <span class="string">"plain"</span>))  <span class="comment"># 该邮件的内容</span></span><br><span class="line">msg[<span class="string">'From'</span>] = data[<span class="string">"Receiver"</span>]  <span class="comment"># 该邮件的发送端</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接邮箱服务器</span></span><br><span class="line">con = smtplib.SMTP_SSL(data[<span class="string">'SendAddr'</span>], data[<span class="string">'Port'</span>])</span><br><span class="line"><span class="comment"># 使用发送端邮箱和授权密码，登录邮箱</span></span><br><span class="line">con.login(data[<span class="string">'Username'</span>], data[<span class="string">'Password'</span>])</span><br><span class="line"><span class="comment"># 发送邮件</span></span><br><span class="line">con.sendmail(data[<span class="string">'Username'</span>], data[<span class="string">'Receiver'</span>], msg.as_string())</span><br><span class="line"><span class="comment"># 退出连接邮箱服务器</span></span><br><span class="line">con.quit()</span><br></pre></td></tr></tbody></table></figure>



<h1 id="三、添加附件"><a href="#三、添加附件" class="headerlink" title="三、添加附件"></a>三、添加附件</h1><p>发送邮件时，可以添加附件，步骤如下：</p>
<ol>
<li>打开指定路径的文件，并以二进制形式读取文件内容。 </li>
<li>使用文件名的扩展名来确定附件的类型。  </li>
<li>创建一个<code>MIMEApplication</code>对象，将文件内容作为参数传入，并指定附件的类型。  </li>
<li>添加一个头部信息，指定附件的内容类型为<code>attachment</code>，并将文件名编码为<code>utf-8</code>格式。  </li>
<li>将附件添加到邮件消息中。</li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_file</span>(<span class="params">msg, file_path, file_name</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    邮件添加文件</span></span><br><span class="line"><span class="string">    :param msg:</span></span><br><span class="line"><span class="string">    :param file_path: 文件路径</span></span><br><span class="line"><span class="string">    :param file_name: 文件名</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        part = MIMEApplication(f.read(), _subtype=FileUtil.get_file_extension(file_name))</span><br><span class="line">    part.add_header(<span class="string">'content-disposition'</span>, <span class="string">'attachment'</span>, filename=(<span class="string">'utf-8'</span>, <span class="string">''</span>, <span class="string">"%s"</span> % file_name))</span><br><span class="line">	msg.attach(part)</span><br></pre></td></tr></tbody></table></figure>
</body></html>]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>算法</title>
    <url>//2023/07/06/%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<html><head></head><body><h1 id="1-算法"><a href="#1-算法" class="headerlink" title="1. 算法"></a>1. 算法</h1><table>
<thead>
<tr>
<th>排序算法</th>
<th>平均时间复杂度</th>
<th>最坏时间复杂度</th>
<th>最好时间复杂度</th>
<th>空间复杂度</th>
<th>稳定性</th>
</tr>
</thead>
<tbody><tr>
<td>冒泡排序</td>
<td>O(n^2)</td>
<td>O(n^2)</td>
<td>O(n)</td>
<td>O(1)</td>
<td>稳定</td>
</tr>
<tr>
<td>选择排序</td>
<td>O(n^2)</td>
<td>O(n^2)</td>
<td>O(n^2)</td>
<td>O(1)</td>
<td>不稳定</td>
</tr>
<tr>
<td>插入排序</td>
<td>O(n^2)</td>
<td>O(n^2)</td>
<td>O(n)</td>
<td>O(1)</td>
<td>稳定</td>
</tr>
<tr>
<td>希尔排序</td>
<td>O(n log n)</td>
<td>O(n^2)</td>
<td>O(n log^2 n)</td>
<td>O(1)</td>
<td>不稳定</td>
</tr>
<tr>
<td>归并排序</td>
<td>O(n log n)</td>
<td>O(n log n)</td>
<td>O(n log n)</td>
<td>O(n)</td>
<td>稳定</td>
</tr>
<tr>
<td>快速排序</td>
<td>O(n log n)</td>
<td>O(n^2)</td>
<td>O(n log n)</td>
<td>O(log n)</td>
<td>不稳定</td>
</tr>
<tr>
<td>堆排序</td>
<td>O(n log n)</td>
<td>O(n log n)</td>
<td>O(n log n)</td>
<td>O(1)</td>
<td>不稳定</td>
</tr>
<tr>
<td>计数排序</td>
<td>O(n + k)</td>
<td>O(n + k)</td>
<td>O(n + k)</td>
<td>O(k)</td>
<td>稳定</td>
</tr>
<tr>
<td>桶排序</td>
<td>O(n + k)</td>
<td>O(n^2)</td>
<td>O(n)</td>
<td>O(n + k)</td>
<td>稳定</td>
</tr>
<tr>
<td>基数排序</td>
<td>O(n * k)</td>
<td>O(n * k)</td>
<td>O(n * k)</td>
<td>O(n + k)</td>
<td>稳定</td>
</tr>
</tbody></table>
</body></html>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>红客笔记</title>
    <url>//2023/09/02/%E7%BA%A2%E5%AE%A2%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="VMware的三种网络"><a href="#VMware的三种网络" class="headerlink" title="VMware的三种网络"></a>VMware的三种网络</h1><p>VMware虚拟机的三种网络连接方式分别是：桥接（Bridged）模式、NAT 模式和仅主机（Host-only）模式。</p>
<ol>
<li>桥接模式：桥接模式是VMware虚拟机最常用的网络连接方式，它可以将虚拟机连接到真实的网络上，使其拥有独立的IP地址，并且可以直接与其他设备进行通信。</li>
<li>NAT模式：NAT模式可以将虚拟机连接到宿主机上，利用宿主机来进行网络连接，虚拟机也可以通过宿主机进行网络访问。</li>
<li>Host-only模式：Host-only模式只能将虚拟机与宿主机之间建立网络连接，而不能与其他设备进行通信。</li>
</ol>
<p><strong>三种模式的区别：</strong>  </p>
<ul>
<li>桥接模式：虚拟机和宿主机在同一个网段上，可以直接与其他设备进行通信。</li>
<li>NAT模式：虚拟机将主机作为网络代理，来连接网络。是最常用的方式。会生成一个虚拟网卡（一般安装好VMware的时候就有了），来代理所有的虚拟机。可以和母机不在同一网段。</li>
<li>Host-only模式：只能将虚拟机与宿主机之间建立网络连接，而不能与其他设备进行通信。</li>
</ul>
<p><strong>三种模式的优缺点：</strong></p>
<ul>
<li>桥接模式：虚拟机和宿主机在同一个网段上，可以直接与其他设备进行通信，但是会受到宿主机网络流量的影响。</li>
<li>NAT模式：虚拟机将主机作为网络代理，来连接网络。可以和其他设备进行通信，但是虚拟机的IP地址是主机分配的，可能会导致IP冲突。</li>
<li>Host-only模式：只能将虚拟机与宿主机之间建立网络连接，而不能与其他设备进行通信。</li>
</ul>
<p><strong>三种模式的通俗理解：</strong></p>
<ul>
<li><p>桥接模式：就像你有一台路由器，虚拟机和宿主机都连接到了这台路由器上，它们可以互相访问，也可以访问外部网络。</p>
<blockquote>
<p>只有桥接模式的网络模式，才会使得虚拟机的地位和宿主机的地位平等</p>
</blockquote>
<img src="/2023/09/02/%E7%BA%A2%E5%AE%A2%E7%AC%94%E8%AE%B0/image-20230910230558819.png" class="" title="image-20230910230558819">
</li>
<li><p>NAT模式：就像你有一台路由器，虚拟机和宿主机都连接到了这台路由器上，但是虚拟机的IP地址是主机分配的，只能访问内部网络。</p>
</li>
</ul>
<img src="/2023/09/02/%E7%BA%A2%E5%AE%A2%E7%AC%94%E8%AE%B0/image-20230910230628581.png" class="" title="image-20230910230628581">

<ul>
<li>Host-only模式：就像你有两台路由器，一台路由器连接到了外部网络，另一台路由器只连接了虚拟机和宿主机，它们之间可以互相访问，但是不能访问外部网络。</li>
</ul>
<img src="/2023/09/02/%E7%BA%A2%E5%AE%A2%E7%AC%94%E8%AE%B0/image-20230910230652866.png" class="" title="image-20230910230652866">



<h1 id="CentOS7"><a href="#CentOS7" class="headerlink" title="CentOS7"></a>CentOS7</h1><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><ol>
<li>选择典型模式</li>
</ol>
<img src="/2023/09/02/%E7%BA%A2%E5%AE%A2%E7%AC%94%E8%AE%B0/image-20230910231444041.png" class="" title="image-20230910231444041">

<ol start="2">
<li>选择<code>安装程序光盘映像文件</code>，并浏览centos7的镜像路径，这里现在安装centos7.2009版本的</li>
</ol>
<img src="/2023/09/02/%E7%BA%A2%E5%AE%A2%E7%AC%94%E8%AE%B0/image-20230910231538712.png" class="" title="image-20230910231538712">

<ol start="3">
<li>输入虚拟机全名，普通用户名和密码（该密码同样是root用户的密码）</li>
</ol>
<img src="/2023/09/02/%E7%BA%A2%E5%AE%A2%E7%AC%94%E8%AE%B0/image-20230910231934143.png" class="" title="image-20230910231934143">

<ol start="4">
<li>选择安装虚拟机的位置</li>
</ol>
<img src="/2023/09/02/%E7%BA%A2%E5%AE%A2%E7%AC%94%E8%AE%B0/image-20230910232053479.png" class="" title="image-20230910232053479">

<ol start="5">
<li>设置磁盘容量</li>
</ol>
<img src="/2023/09/02/%E7%BA%A2%E5%AE%A2%E7%AC%94%E8%AE%B0/image-20230910232213643.png" class="" title="image-20230910232213643">

<h2 id="配置静态IP"><a href="#配置静态IP" class="headerlink" title="配置静态IP"></a>配置静态IP</h2><h2 id="修改yum源"><a href="#修改yum源" class="headerlink" title="修改yum源"></a>修改yum源</h2><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><ol>
<li>ls：列出目录中的文件和子目录。</li>
<li>ls -a：列出目录中的文件和子目录（包括隐藏文件）。</li>
<li>cd：切换当前工作目录。</li>
<li>pwd：显示当前工作目录的路径。</li>
<li>cp：复制文件或目录。</li>
<li>mv：移动文件或目录，也可用于重命名。</li>
<li>rm：删除文件或目录。</li>
<li>mkdir：创建新目录。</li>
<li>rmdir：删除空目录。</li>
<li>touch：创建新文件或更新文件时间戳。</li>
<li>cat：查看文件内容或合并文件。</li>
<li>more/less：分页查看文件内容。</li>
<li>grep：在文件中搜索指定文本。</li>
<li>find：查找文件或目录。</li>
<li>chmod：修改文件权限。</li>
<li>chown：修改文件所有者和所属组。</li>
<li>ps：查看进程状态。</li>
<li>kill：终止进程。</li>
<li>top：实时查看系统进程及资源占用情况。</li>
<li>df：查看磁盘空间使用情况。</li>
<li>du：查看目录空间使用情况。</li>
<li>ifconfig：查看网络接口配置信息。</li>
<li>ping：测试网络连通性。</li>
<li>wget：从网络上下载文件。</li>
<li>tar：打包和解压缩文件。</li>
<li>gzip/gunzip：压缩和解压缩文件。</li>
<li>ssh：远程登录其他计算机。</li>
<li>scp：远程拷贝文件。</li>
<li>rsync：远程同步文件。</li>
<li>ntpdate/ntpstat：同步网络时间服务器的时间。</li>
<li>systemctl：管理系统服务和守护进程。</li>
<li>service：启动、停止、重启服务。</li>
<li>crontab：定时执行任务。</li>
<li>su：切换用户身份。</li>
<li>sudo：以管理员权限执行命令。</li>
<li>apt-get/yum/dnf：软件包管理器，用于安装、升级和卸载软件。</li>
<li>vi/vim/nano：文本编辑器，用于编辑文件。</li>
<li>man：查看命令手册页。</li>
<li>history：查看命令历史记录。</li>
<li>alias：设置命令别名，简化常用命令输入。</li>
<li>export/import：设置环境变量，导入导出配置文件等。</li>
</ol>
<h2 id="vi常用指令"><a href="#vi常用指令" class="headerlink" title="vi常用指令"></a>vi常用指令</h2><p>vi是一个文本编辑器，常用于Linux系统。以下是一些常用的vi指令：</p>
<ul>
<li><code>i</code>：进入插入模式，可以在光标位置输入文本。</li>
<li><code>a</code>：进入添加模式，可以在光标后输入文本。</li>
<li><code>dd</code>：删除当前行。</li>
<li><code>yy</code>：复制当前行。</li>
<li><code>p</code>：粘贴到光标下方。</li>
<li><code>:w</code>：保存文件。</li>
<li><code>:q</code>：退出vi编辑器。</li>
</ul>
</body></html>]]></content>
      <tags>
        <tag>虚拟机</tag>
        <tag>网络安全</tag>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>硬件</title>
    <url>//2023/09/03/%E7%A1%AC%E4%BB%B6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="内存条"><a href="#内存条" class="headerlink" title="内存条"></a>内存条</h1><h2 id="DDR4与DDR5的区别"><a href="#DDR4与DDR5的区别" class="headerlink" title="DDR4与DDR5的区别"></a>DDR4与DDR5的区别</h2><p>DDR4和DDR5的区别主要在于<strong>架构设计</strong>层面。</p>
<p>DDR4采用<strong>单</strong>个64位通道，而DDR5则具有两个独立的32位子（<strong>双</strong>）通道。</p>
<p>传输长度也从<strong>8字节</strong>增加到了<strong>16字节</strong>。</p>
<p>此外，DDR5内存最大的优势之一是更高的<strong>频率</strong>。随着多核心处理器的不断推出和更新，内存频率升级变得至关重要。 </p>
<h2 id="频率"><a href="#频率" class="headerlink" title="频率"></a>频率</h2><img src="/2023/09/03/%E7%A1%AC%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20230903011949291.png" class="" title="image-20230903011949291">

<p>上图内容表示：DDR4内存条，频率为3200MHz，容量为8/16/32G</p>
<p>内存条频率高是可以提高电脑的性能。</p>
<p>内存的频率越高，内存的读写速度就越快，从而提高电脑的响应速度和运行速度  。</p>
<p>但是，实际使用中，内存条的频率并不是越高越好。因为内存的频率过高会导致CPU和主板的负担加重，从而影响电脑的稳定性和寿命。</p>
<h3 id="3200频率与2667频率的区别"><a href="#3200频率与2667频率的区别" class="headerlink" title="3200频率与2667频率的区别"></a>3200频率与2667频率的区别</h3><p>3200频率和2667频率的区别在于内存的主频，即内存所能达到的最高工作频率。</p>
<p>3200频率的内存条比2667频率的内存条具有更高的传输效率，因此性能更好  。</p>
<p>但是，实际性能差距取决于多种因素，如CPU决定的频率范围、主板的频率范围、内存颗粒好坏、时序是否合理等。</p>
<p><strong>如何查看CPU决定的频率范围</strong></p>
<p>在cmd窗口执行命令<code>wmic memorychip</code>，执行结果如下</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;wmic memorychip</span><br><span class="line">Attributes  BankLabel  Capacity    Caption          ConfiguredClockSpeed  ConfiguredVoltage  CreationClassName     DataWidth  Description      DeviceLocator   FormFactor  HotSwappable  InstallDate  InterleaveDataDepth  InterleavePosition  Manufacturer  MaxVoltage  MemoryType  MinVoltage  Model  Name             OtherIdentifyingInfo  PartNumber        PositionInRow  PoweredOn  Removable  Replaceable  SerialNumber  SKU  SMBIOSMemoryType  Speed  Status  Tag                TotalWidth  TypeDetail  Version</span><br><span class="line">1           BANK 0     8589934592  Physical Memory  2667                  1200               Win32_PhysicalMemory  64         Physical Memory  ChannelA-DIMM0  12                                     1                    1                   Samsung       1500        0           1500               Physical Memory                        M471A1K43DB1-CTD                                                    3360A34E           26                2667           Physical Memory 0  64          128</span><br></pre></td></tr></tbody></table></figure>

<p>定位到<code>speed</code>字段，对应的是2667，表示内存的实际工作频率</p>
<h1 id="显示屏"><a href="#显示屏" class="headerlink" title="显示屏"></a>显示屏</h1><h2 id="频率-1"><a href="#频率-1" class="headerlink" title="频率"></a>频率</h2><p>电脑屏幕的刷新频率是指显示器每秒绘制新图像的次数，其单位为赫兹 (Hz)。</p>
<p>例如，如果您的显示器刷新率为 144 Hz，这是指它每秒钟会刷新图像 144 次 。</p>
<p>刷新率越高，画面的稳定性就越好，游戏或者网页浏览就会越顺畅 。</p>
<p><strong>如何查看显示屏的刷新频率</strong></p>
<p>在桌面右键选择<code>显示设置</code></p>
<img src="/2023/09/03/%E7%A1%AC%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20230903014251227.png" class="" title="image-20230903014251227">

<p>滑到下面看到<code>高级显示设置</code></p>
<img src="/2023/09/03/%E7%A1%AC%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20230903014343045.png" class="" title="image-20230903014343045">

<p>可以看到显示器刷新率</p>
<img src="/2023/09/03/%E7%A1%AC%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20230903014416666.png" class="" title="image-20230903014416666">

<h2 id="屏幕尺寸"><a href="#屏幕尺寸" class="headerlink" title="屏幕尺寸"></a>屏幕尺寸</h2><p>显示器尺寸通常指的是显示器<strong>屏幕对角线</strong>的尺寸，所以显示器屏幕大小其实是由对角线尺寸和和显示器比例共同决定的。 </p>
<p><strong>计算方法</strong></p>
<p>屏幕尺寸是指显示器屏幕对角线的尺寸，一般用英寸来表示。 </p>
<p>测量显示器<strong>对角线长度</strong>转换为英寸即可，1英寸=2.54厘米</p>
<h1 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h1><h2 id="硬盘性能分析工具"><a href="#硬盘性能分析工具" class="headerlink" title="硬盘性能分析工具"></a>硬盘性能分析工具</h2><h3 id="Crystal-Disk-Mark"><a href="#Crystal-Disk-Mark" class="headerlink" title="Crystal Disk Mark"></a>Crystal Disk Mark</h3><p>ARM架构使用DiskMarkA64或者DiskMarkA32</p>
<p><img src="/%E7%A1%AC%E4%BB%B6%E7%AC%94%E8%AE%B0%5Cimage-20231121192801172.png" alt="image-20231121192801172"></p>
<p><strong>参数界面</strong></p>
<p><img src="/%E7%A1%AC%E4%BB%B6%E7%AC%94%E8%AE%B0%5Cimage-20231123154728304.png" alt="image-20231123154728304"></p>
<p><strong>参数解读</strong></p>
<p>SEQ1MQ8T1：顺序读写，1MiB=1024KiB，1线程，8队列</p>
<p>RND4KQ32T1：随机读写，4KiB，1线程，32队列<br><img src="/%E7%A1%AC%E4%BB%B6%E7%AC%94%E8%AE%B0%5Cimage-20231123155452839.png" alt="image-20231123155452839"></p>
<ol>
<li>队列与线程，一般来说，线程数越多，队列数越大，意味着硬盘的并发处理能力越强。但是，如果线程数或队列数过大，超过硬盘的处理能力，测试结果可能会受到其他因素的影响，不能准确反映硬盘的实际性能。因此，合理的设置线程数和队列数，可以更准确地评估硬盘的性能。</li>
<li>SEQ，指连续读写，可以理解为影音文件的读写速度，商家标称速度一般指的是这个速度</li>
<li>4K，随机读写性能代表了硬盘的数据吞吐能力，4K读写的快慢决定了系统的操作体验。对U盘来说，代表了零碎文件（比如复制有大量小文件的文件夹）的读写速度。</li>
</ol>
<p><strong>注</strong></p>
<p><strong>MiB与MB的区别</strong>，MiB已2为底，即1MiB = 2^20，1MB = 10^6</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>次方</th>
<th>名字</th>
<th>次方</th>
</tr>
</thead>
<tbody><tr>
<td>KB</td>
<td>10^3</td>
<td>KiB</td>
<td>2^10</td>
</tr>
<tr>
<td>MB</td>
<td>10^6</td>
<td>MiB</td>
<td>2^20</td>
</tr>
<tr>
<td>GM</td>
<td>10^9</td>
<td>GiB</td>
<td>2^30</td>
</tr>
</tbody></table>
</body></html>]]></content>
      <tags>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>软件开发</title>
    <url>//2023/08/10/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<html><head></head><body><h1 id="1-Util、Common的意义"><a href="#1-Util、Common的意义" class="headerlink" title="1. Util、Common的意义"></a>1. Util、Common的意义</h1><p>Util主要用于放置一些通用工具，即拿即用的工具</p>
<p>Common主要用于放置项目通用的类，若其他项目需要用，则需要进行一些针对性的配置</p>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1></body></html>]]></content>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>//2023/05/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<html><head></head><body><h1 id="1-TCP-的三次握手和四次挥手"><a href="#1-TCP-的三次握手和四次挥手" class="headerlink" title="1. TCP 的三次握手和四次挥手"></a>1. TCP 的三次握手和四次挥手</h1><p>三次握手和四次挥手是 TCP 协议中的概念，用于建立和断开 TCP 连接。</p>
<p><strong>三次握手的过程如下</strong><br>第一次握手：客户端向服务器发送 SYN 包，并进入 SYN_SENT 状态。<br>第二次握手：服务器收到 SYN 包后，向客户端发送 SYN+ACK 包，并进入 SYN_RCVD 状态。<br>第三次握手：客户端收到 SYN+ACK 包后，向服务器发送 ACK 包，并进入 ESTABLISHED 状态。</p>
<p><strong>四次挥手的过程如下</strong><br>第一次挥手：客户端向服务器发送 FIN 包，并进入 FIN_WAIT_1 状态。<br>第二次挥手：服务器收到 FIN 包后，向客户端发送 ACK 包，并进入 CLOSE_WAIT 状态。<br>第三次挥手：服务器向客户端发送 FIN 包，并进入 LAST_ACK 状态。<br>第四次挥手：客户端收到 FIN 包后，向服务器发送 ACK 包，并进入 TIME_WAIT 状态，等待 2MSL 后进入 CLOSED 状态。</p>
<p><strong>作用</strong><br>三次握手是为了确保客户端和服务器之间的通信是可靠的，防止因为网络延迟等原因导致的数据传输错误。<br>四次挥手是为了确保客户端和服务器之间的连接能够正常断开，防止因为网络延迟等原因导致的连接未能正确关闭。</p>
<h1 id="2-URL"><a href="#2-URL" class="headerlink" title="2. URL"></a>2. URL</h1><p>URL（Uniform Resource Locator）统一资源定位器，是用于标识和定位互联网上资源的字符串。</p>
</body></html>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>高阶函数与函数柯里化</title>
    <url>//2023/10/29/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E4%B8%8E%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/</url>
    <content><![CDATA[<html><head></head><body><h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1></body></html>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>鼠标右键执行程序</title>
    <url>//2023/07/06/%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在研究如何右键使用Typora打开当前文件夹，于是到网上查找注册表相关的知识，学到了一下有趣的东西</p>
<h1 id="设置注册表"><a href="#设置注册表" class="headerlink" title="设置注册表"></a>设置注册表</h1><p>设置注册表右键使用Typora打开当前文件夹</p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>使用cmd打开注册表（<code>regedit</code>）</p>
<p>找到<code>计算机\HKEY_CLASSES_ROOT\Directory\Background\shell</code></p>
<img src="/2023/07/06/%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F/1.png" class="">

<p>在这个目录下文件夹都是右键打开的项目，比如：</p>
<img src="/2023/07/06/%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F/2.png" class="">

<p>配置的步骤如下：</p>
<ol>
<li>在shell目录下，右键新建<strong>项</strong>，名字可以随便起，但是可以清楚知道这个项主要配置的右键打开的哪个项目；</li>
<li>将名称为<code>默认</code>的数据改为<code>Open With Typora</code>，这个即为右键显示的项目名；<img src="/2023/07/06/%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F/3.png" class=""></li>
<li>添加一个<strong>字符串值</strong>，名称为<code>icon</code>，数据为Typora的图标地址，直接复制图标地址，不需要使用双引号括起来，标签图片必须为<code>ico</code>类型的图标文件；</li>
<li>再回到<code>Typora</code>右键新建<strong>项</strong>，名字为<code>command</code>；</li>
<li>将名称为<code>默认</code>的数据改为<code>"Typora地址" "%V"</code>（双引号加上Typora的地址，加上空格，再加上双引号，里面是％和V）</li>
</ol>
<p>注：<code>%V</code>表示站位符，表示当前文件夹的路径</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>使用注册表方式直接将数据注册到注册表</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\Typora]</span><br><span class="line">@=<span class="string">"使用Typora打开"</span></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\Typora\<span class="built_in">command</span>]</span><br><span class="line">@=<span class="string">"\"F:\\Typora\\Typora.exe\" \"%V\""</span></span><br></pre></td></tr></tbody></table></figure>

<p>注：新建txt文件，将内容写入文本后，将后缀改为<code>reg</code>（1.reg）</p>
<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>根据这个规则，可以为hexo博客设置在文件夹右键新建文章，这里的思路采用右键执行bash命令，bash文件先写好并保存到一个固定路径上。</p>
<p>步骤和刚才的类似，只是在command的文件夹下，将Typora的文件路径改为bat文件的路径即可，如果需要执行exe文件也可以如此配置。</p>
<img src="/2023/07/06/%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F/4.png" class="">
</body></html>]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
</search>
